#+title: Multibin maps
#+options: ^:{} toc:nil num:nil
Intelligent powers-of-two rebinning of maps, with weighting, masking, and sensible treatment of NaNs

* [1/3] Plan of action [2016-12-20 Tue]
+ [X] Basic functionality is already here
+ [ ] Improve on the masking
  + Use a per-line continuum mask
  + This will help in the red (e.g. [S III] 9069) whee the stars are brighter
+ [ ] Port over more functionality from the MUSE project
  + Fuzzing, maybe
  + And constant S/N maps

* Generic utility library for rebinning: =rebin_utils.py= 
:LOGBOOK:
- Note taken on [2016-12-19 Mon 18:29] \\
  This had previously been in the =RubinWFC3/Tsquared= folder
:END:

#+BEGIN_SRC python :eval no :tangle rebin_utils.py
  import numpy as np

  def pad_array(a, n):
      """Pad 2d array `a` to nearest multiple of `n` in each dimension"""
      newshape = (n*np.ceil(np.array(a.shape).astype(float)/n)).astype(int)
      b = np.zeros(newshape, dtype=a.dtype)
      b[:a.shape[0], :a.shape[1]] = a
      return b


  def downsample(images, mask, weights=None, verbose=False, mingood=1):
      """
      Resample (average) a list of 2d images at 2x2, taking account of a logical mask

      Now optionally use a weights array, and resample that too (adding, not averaging)
      """
      # Construct slices for even and odd elements, respectively
      # e, o = np.s_[:,-1,2], np.s_[1,:,2] # Just learnt about the np.s_() function!
      e, o = slice(None,-1,2), slice(1,None,2)

      # Find the number of good sub-pixels in each new pixel
      ngood = mask[e,e].astype(int) + mask[o,e].astype(int) \
              + mask[e,o].astype(int) + mask[o,o].astype(int)

      newmask = ngood >= mingood
      # # Resample the mask
      # # newmask is True if any of the 4 sub-pixels are true
      # newmask = mask[e,e] | mask[o,e] | mask[e,o] | mask[o,o]

      if weights is None:
          # now resample the images
          newimages = [
              np.where(
                  newmask,      # Check that we have at least 1 good pixel
                  # Take the mean of all the good sub-pixels
                  (image[e,e]*mask[e,e] + image[o,e]*mask[o,e]
                   + image[e,o]*mask[e,o] + image[o,o]*mask[o,o]) / ngood,
                  0.0                 # Avoid NaNs if we have no good pixels
                  )
              for image in images]
      else:
          newweights = (weights[e,e]*mask[e,e] + weights[o,e]*mask[o,e]
			+ weights[e,o]*mask[e,o] + weights[o,o]*mask[o,o])
          newimages = [
              np.where(
                  newweights > 0.0,      # Check that we have at least 1 good pixel
                  # Take the mean of all the good sub-pixels
                  (image[e,e]*mask[e,e]*weights[e,e] +
                   image[o,e]*mask[o,e]*weights[o,e] +
                   image[e,o]*mask[e,o]*weights[e,o] +
                   image[o,o]*mask[o,o]*weights[o,o]
                   ) / newweights,
                  0.0                 # Avoid NaNs if we have no good pixels
                  )
              for image in images]

      if verbose:
          print("Fraction of good pixels: old = {:.2f}, new = {:.2f}".format(
              float(mask.sum())/mask.size, float(newmask.sum())/newmask.size))
      # Of course, we will get garbage where ngood=0, but that doesn't
      # matter since newmask will be False for those pixels
      if weights is None:
          return newimages, newmask
      else:
          # New option to bin weights too
          return newimages, newmask, newweights


  def oversample(image, m):
      "Oversample an image by factor m x m. Simply repeat the pixels"
      # Check inputs
      if np.isnan(image).any():
          print("oversample: nan(s) found in input image")
      result = np.kron(image, np.ones((m,m)))
      # Check output
      if np.isnan(result).any():
          print("oversample: nan(s) found in output image")
      return result

#+END_SRC

* Application to MUSE spectral maps

** Grab of copy of continuum image to use as mask
+ I still haven't decided if I want to do the masking in the same way or not
+ But in the meantime I need this file 
#+BEGIN_SRC bash
cp -av ../OrionMuse/muse-hr-image-wfc3-f547m.fits .
#+END_SRC

#+RESULTS:
: ../OrionMuse/muse-hr-image-wfc3-f547m.fits -> ./muse-hr-image-wfc3-f547m.fits

** multibin-map.py - Perform binning of a line map
:PROPERTIES:
:ID:       D2B1D238-7058-406B-93FD-60AD6BACA97A
:END:
+ [2015-11-08 Sun 17:27] Update to do dependency checking
+ [2016-05-17 Tue 22:25] Update to deal with mean velocities
+ [2016-12-19 Mon 18:33] Moved here from the OrionMuse project

#+BEGIN_SRC python :tangle multibin-map.py
  from __future__ import print_function
  import sys
  import os
  from distutils.dep_util import newer, newer_group
  import numpy as np
  from rebin_utils import downsample, oversample, pad_array
  from astropy.io import fits

  nlist = [1, 2, 4, 8, 16, 32, 64, 128, 256]
  mingoods = [2, 2, 2, 2, 2, 2, 2, 2, 2]


  try: 
      infile = sys.argv[1]
  except:
      sys.exit('Usage: {} FITSFILE'.format(sys.argv[0]))


  hdu = fits.open(infile)[0]
  if hdu.data is None:
      hdu = fits.open(infile)[1]
  hdr = hdu.header
  # Maximum binning
  nmax = nlist[-1]

  # Pad arrays to nearest multiple of nmax
  im = pad_array(hdu.data, nmax)

  basename = os.path.basename(infile)
  map_type = basename.split('-')[0]

  if map_type in ['mean', 'sigma']:
      # For the mean velocity and sigma width maps, weight by brightness
      wfile = infile.replace(map_type, 'linesum')
      if infile.endswith('-patfixx.fits'):
          # Strip off the pattern fix prefix if present
          wfile = wfile.replace('-patfixx', '')
      whdu = fits.open(wfile)[0]
      if whdu.data is None:
          # try second HDU if first has no data
          whdu = fits.open(wfile)[1]
      w = pad_array(whdu.data, nmax)
  else:
      # Otherwise, just natural weighting
      w = np.ones_like(im)

  continuum = fits.open('muse-hr-image-wfc3-f547m.fits')['DATA'].data
  starmask = continuum > 150

  # If we pad the starmask and combine it with the padded image, then we
  # automatically deal with the case where the input files have already
  # been padded
  m =  np.isfinite(im) & (~pad_array(starmask, nmax))

  for n, mingood in zip(nlist, mingoods):
      im[~m] = 0.0
      outfile = infile.replace('.fits', '-bin{:03d}.fits'.format(n))
      if n == nlist[0]:
          # Do dependency checking on the first iteration
          if not newer(infile, outfile):
              # Bail out if dependency not newer than target
              sys.exit(outfile + ' is already up to date.')
      print('Saving', outfile)
      # Save both the scaled image and the weights, but at the full resolution
      fits.HDUList([
          fits.PrimaryHDU(),
          fits.ImageHDU(data=oversample(im, n), header=hdr, name='scaled'),
          fits.ImageHDU(data=oversample(w, n), header=hdr, name='weight'),
      ]).writeto(outfile, clobber=True)
      # Now do the rebinning by a factor of two
      [im,], m, w = downsample([im,], m, weights=w, mingood=mingood)


#+END_SRC

#+BEGIN_SRC sh :results verbatim
D=../OrionMuse/LineMaps
python multibin-map.py $D/sigma-O_III-5007-patfixx.fits
#+END_SRC

#+RESULTS:
#+begin_example
Saving ../OrionMuse/LineMaps/sigma-O_III-5007-patfixx-bin001.fits
oversample: nan(s) found in input image
oversample: nan(s) found in output image
Saving ../OrionMuse/LineMaps/sigma-O_III-5007-patfixx-bin002.fits
oversample: nan(s) found in input image
oversample: nan(s) found in output image
Saving ../OrionMuse/LineMaps/sigma-O_III-5007-patfixx-bin004.fits
oversample: nan(s) found in input image
oversample: nan(s) found in output image
Saving ../OrionMuse/LineMaps/sigma-O_III-5007-patfixx-bin008.fits
oversample: nan(s) found in input image
oversample: nan(s) found in output image
Saving ../OrionMuse/LineMaps/sigma-O_III-5007-patfixx-bin016.fits
oversample: nan(s) found in input image
oversample: nan(s) found in output image
Saving ../OrionMuse/LineMaps/sigma-O_III-5007-patfixx-bin032.fits
oversample: nan(s) found in input image
oversample: nan(s) found in output image
Saving ../OrionMuse/LineMaps/sigma-O_III-5007-patfixx-bin064.fits
oversample: nan(s) found in input image
oversample: nan(s) found in output image
Saving ../OrionMuse/LineMaps/sigma-O_III-5007-patfixx-bin128.fits
oversample: nan(s) found in input image
oversample: nan(s) found in output image
Saving ../OrionMuse/LineMaps/sigma-O_III-5007-patfixx-bin256.fits
oversample: nan(s) found in input image
oversample: nan(s) found in output image
#+end_example

#+BEGIN_SRC sh :results verbatim
D=../OrionMuse/LineMaps
python multibin-map.py $D/sigma-N_II-6583-patfixx.fits
#+END_SRC

#+RESULTS:
#+begin_example
Saving ../OrionMuse/LineMaps/sigma-N_II-6583-patfixx-bin001.fits
oversample: nan(s) found in input image
oversample: nan(s) found in output image
Saving ../OrionMuse/LineMaps/sigma-N_II-6583-patfixx-bin002.fits
oversample: nan(s) found in input image
oversample: nan(s) found in output image
Saving ../OrionMuse/LineMaps/sigma-N_II-6583-patfixx-bin004.fits
oversample: nan(s) found in input image
oversample: nan(s) found in output image
Saving ../OrionMuse/LineMaps/sigma-N_II-6583-patfixx-bin008.fits
oversample: nan(s) found in input image
oversample: nan(s) found in output image
Saving ../OrionMuse/LineMaps/sigma-N_II-6583-patfixx-bin016.fits
oversample: nan(s) found in input image
oversample: nan(s) found in output image
Saving ../OrionMuse/LineMaps/sigma-N_II-6583-patfixx-bin032.fits
oversample: nan(s) found in input image
oversample: nan(s) found in output image
Saving ../OrionMuse/LineMaps/sigma-N_II-6583-patfixx-bin064.fits
oversample: nan(s) found in input image
oversample: nan(s) found in output image
Saving ../OrionMuse/LineMaps/sigma-N_II-6583-patfixx-bin128.fits
oversample: nan(s) found in input image
oversample: nan(s) found in output image
Saving ../OrionMuse/LineMaps/sigma-N_II-6583-patfixx-bin256.fits
oversample: nan(s) found in input image
oversample: nan(s) found in output image
#+end_example

** Shell scripts to do multibinning of all linesum, mean and sigma maps
:PROPERTIES:
:ID:       32F0303B-61A5-4C52-93C6-2174185526A8
:END:

+ [2016-12-26 Mon] Add version to work on the data in =~/tmp/musedata/=

Do all the mean 
#+BEGIN_SRC sh :eval no :tangle all-mean-maps-multibin.sh
D=../OrionMuse/LineMaps
linelist=$D/mean-*[0-9][0-9][0-9][0-9]-patfixx.fits
for line in $linelist; do
    echo "Processing $line"
    time python multibin-map.py $line > ${line}-multibin.log
done
#+END_SRC

#+BEGIN_SRC sh :eval no :tangle all-sigma-maps-multibin.sh
D=../OrionMuse/LineMaps
linelist=$D/sigma-*[0-9][0-9][0-9][0-9]-patfixx.fits
for line in $linelist; do
    echo "Processing $line"
    time python multibin-map.py $line > ${line}-multibin.log
done
#+END_SRC

#+BEGIN_SRC sh :eval no :tangle all-musedata-maps-multibin.sh
D=~/tmp/musedata
for line in $D/{sigma,mean,linesum}-*-[0-9][0-9][0-9][0-9].fits; do
    echo "Processing $line"
    time python multibin-map.py $line > ${line}-multibin.log 2>&1
done
#+END_SRC



For more examples, including fuzzed maps, see the [[id:8E91B82E-9A07-4DE7-8EDC-5157FB5EEA99][corresponding header]] of the main MUSE project
