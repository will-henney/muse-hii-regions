* Maps of all lines from the PZ cube
- Find what steps need to be repeated from the list in [[file:ngc-346-drl-spectra.org]]
  - Continuum subtraction ([[id:59F3D73A-6179-462C-86E8-1F915C76E274][Step -1]])
  - Maps of different lines ([[id:B915BA48-D7C9-4FFE-9ECF-511CBF1A4ED7][Step 4]])
** Continuum subtraction
- This uses the median filter method
- Previously, filtered cube files had been written out to [[file:../big-data/ngc346new/]]
  - I might as well write them out in same place, but with a different prefix
#+begin_src sh :dir ../big-data/ngc346new/ :results output verbatim :eval no
  time python ../../lib/median_continuum.py\
       --two-pass \
       --out-prefix n346-PZ-2pass \
       --cube-name PeterZeidler/DATACUBE_FINAL_fwhm_cor.fits \
       11
#+end_src

#+RESULTS:
: /Users/will/Dropbox/muse-hii-regions/big-data/ngc346new

- I have repeated this for window widths of 7, 11, 101
** Image maps


*** First try and make the rainbow maps
Start off with the ESO cube. This differs from what we did previously in that it uses the 2pass 007 filtered cube
#+begin_src sh :dir ../data/spec1d :results output file
  python ../../scripts/peak-image-plot.py \
         ../../big-data/ngc346new/n346-muse-2pass-csub-007.fits \
         n346-nostar-bs-peaks-p0010-d0030.csv \
         --ncolumns 8 \
         --no-subtract-base \
         --wavelength-window-pad 0.5 \
         --extra-suffix ESO007
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/spec1d/peak-images-n346-nostar-bs-peaks-p0010-d0030-ESO007.pdf]]

Now the PZ one

#+begin_src sh :dir ../data/spec1d :results output file
  python ../../scripts/peak-image-plot.py \
         ../../big-data/ngc346new/n346-PZ-2pass-csub-007.fits \
         n346-nostar-bs-peaks-p0010-d0030.csv \
         --ncolumns 8 \
         --no-subtract-base \
         --wavelength-window-pad 0.5 \
         --extra-suffix PZ007
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/spec1d/peak-images-n346-nostar-bs-peaks-p0010-d0030-PZ007.pdf]]

That one is OK

#+begin_src sh :dir ../data/spec1d :results output file
  python ../../scripts/peak-image-plot.py \
         ../../big-data/ngc346new/n346-PZ-2pass-csub-007.fits \
         n346-nostar-bs-peaks-p0010-d0030.csv \
         --ncolumns 8 \
         --subtract-base \
         --wavelength-window-pad 0.5 \
         --extra-suffix PZ007B
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/spec1d/peak-images-n346-nostar-bs-peaks-p0010-d0030-PZ007B.pdf]]

That one is terrible. We should not subtract the base

#+begin_src sh :dir ../data/spec1d :results output file
  python ../../scripts/peak-image-plot.py \
         ../../big-data/ngc346new/n346-PZ-2pass-csub-101.fits \
         n346-nostar-bs-peaks-p0010-d0030.csv \
         --ncolumns 8 \
         --no-subtract-base \
         --wavelength-window-pad 0.5 \
         --extra-suffix PZ101
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/spec1d/peak-images-n346-nostar-bs-peaks-p0010-d0030-PZ101.pdf]]

And that one is mostly fine too. 
*** Now make all the individual maps
- It turns out that the [[file:../scripts/make-one-map.py][make-one-map.py]] script uses info from the spreadsheet to decide how to extract the line and from which median-filtered image.
- I would rather use a homogeneous approach this time
- And more efficient to do all the lines at once, so we do not need to keep reading in the same cube file
**** New version of map script
- The yaml files are in [[file:../data/n346-lines/all-lines-orig/]]
- I will make a new folder [[file:../data/n346-bow-lines/]] to store the maps
  - This will have sub-folders named after the particular median-filtered cube, such as [[file:../data/n346-bow-lines/maps-n346-PZ-2pass-csub-007/]]
- Unlike previous scripts, this finds all paths relative to the project root directory, which may or may not be a good idea
  - We can run it from the [[file:../scripts/]] directory or the [[file:../data/]] directory, or anywhere else that is one level down from the project root (or otherwise use the ~--root-dir~ option)
#+begin_src python :tangle ../scripts/make-all-3wav-maps.py
  import numpy as np
  import sys
  from pathlib import Path
  import typer
  import yaml
  import slugify
  from text_unidecode import unidecode
  from astropy.io import fits
  from astropy.wcs import WCS

  unwanted_types = ["sky", "telluric", "noise", "nan", "stellar"]


  def get_line_type(s):
      if s is None:
          return None
      ltype = slugify.slugify(str(s).rstrip("?"))
      if not ltype or ltype in unwanted_types:
          return None
      else:
          return ltype


  def load_cube_hdu(
      cube_path: Path,
  ):
      return fits.open(cube_path)[0]


  def get_id_string(data):
      s = f"{data['Index']:04d}-"
      s += slugify.slugify(data["ID"])
      if "UIL" in data["ID"]:
          s += "-" + slugify.slugify(f"{data['lambda_HM']:.2f}")
      return s


  def main(
      cube_file: str = "n346-muse-2pass-csub-007.fits",
      project_root: Path = Path("../"),
      yaml_folder: str = "data/n346-lines/all-lines-orig",
      maps_folder: str = "data/n346-bow-lines",
  ):
      """Create ABC channel maps of all emission lines from data in YAML files"""


      # Get the spectral cube
      big_data_folder = project_root / "big-data" / "ngc346new"
      cube_path = big_data_folder / f"{cube_file}"
      cube = load_cube_hdu(cube_path)

      # The YAML files contain metadata for each line
      yaml_files = (project_root / yaml_folder).glob("*.yaml")
      # Loop over all the lines
      for yaml_file in yaml_files:
          with open(yaml_file) as f:
              metadata = yaml.safe_load(f)
          # Group all lines of same type into their own folder
          line_type = get_line_type(metadata["Type"])
          if line_type is None:
              # Skip unwanted types
              continue

          # Make folder for this line type if necessary
          save_path = project_root / maps_folder / f"maps-{cube_path.stem}" / f"type-{line_type}" 
          save_path.mkdir(exist_ok=True, parents=True)

          ipeak = metadata["Index"]
          # Save each of 3 channels as a separate FITS file
          images = {}
          for chan_label, ichan in zip(["A", "B", "C"], [ipeak - 1, ipeak, ipeak + 1]):
              images[chan_label] = cube.data[ichan, ...]
          # And also the moments
          images["ABC"] = images["A"] + images["B"] + images["C"]
          images["m1"] = (images["C"] - images["A"]) / images["ABC"]
          images["m2"] = (images["C"] + images["A"]) / images["ABC"]
          header = WCS(cube.header).celestial.to_header()
          # FITS headers allow only ASCII strings
          header.update({k: unidecode(str(v)) for k, v in metadata.items()})
          for label, image in images.items():
              fits_file = get_id_string(metadata) + f"-{label}.fits"
              fits.PrimaryHDU(header=header, data=image).writeto(
                  save_path / fits_file, overwrite=True
              )
          print("Image saved to", save_path / f"{get_id_string(metadata)}-*.fits")


  if __name__ == "__main__":
      typer.run(main)
#+end_src



#+begin_src sh :dir ../data :results verbatim :eval no
python ../scripts/make-all-3wav-maps.py --cube-file n346-muse-2pass-csub-007.fits
#+end_src

#+begin_src sh :dir ../data :results verbatim
python ../scripts/make-all-3wav-maps.py --help 
#+end_src

#+RESULTS:
#+begin_example
                                                                                
 Usage: make-all-3wav-maps.py [OPTIONS]                                         
                                                                                
 Create ABC channel maps of all emission lines from data in YAML files          
                                                                                
╭─ Options ────────────────────────────────────────────────────────────────────╮
│ --cube-file           TEXT  [default: n346-muse-2pass-csub-007.fits]         │
│ --project-root        PATH  [default: ..]                                    │
│ --yaml-folder         TEXT  [default: data/n346-lines/all-lines-orig]        │
│ --maps-folder         TEXT  [default: data/n346-bow-lines]                   │
│ --help                      Show this message and exit.                      │
╰──────────────────────────────────────────────────────────────────────────────╯

#+end_example
** Initial impressions of the PZ maps
- These are a lot better than I had expected
- Maybe we can just use these, instead of trying to use them to calibrate the ESO ones
*** Some lines that may need tweaking
- The [Ar IV] aurora lines are a bit weird
  - I suspect that the central pixel may be off by one
  - [Ar IV] 7170.5 has no obvious blend
  - [Ar IV] 7237.4 has a blend with an H_2 line, so is listed under that
  - [Ar IV] 7262.7 has a blend with [Cl IV] 7261.4, but it is not so apparent

