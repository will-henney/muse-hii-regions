* Maps of all lines from the PZ cube
- Find what steps need to be repeated from the list in [[file:ngc-346-drl-spectra.org]]
  - Continuum subtraction ([[id:59F3D73A-6179-462C-86E8-1F915C76E274][Step -1]])
  - Maps of different lines ([[id:B915BA48-D7C9-4FFE-9ECF-511CBF1A4ED7][Step 4]])
** DONE Continuum subtraction
CLOSED: [2024-05-09 Thu 11:37]
:LOGBOOK:
- State "DONE"       from "TODO"       [2024-05-09 Thu 11:37] \\
  This is done for now, but I may need to revisit it later if I want another intermediate sied window between 011 and 101
- State "TODO"       from              [2024-05-09 Thu 11:20] \\
  This needs to be re-run for each window size of the PZ file now that I have trimmed off a column.
:END:
- This uses the median filter method
- Previously, filtered cube files had been written out to [[file:../big-data/ngc346new/]]
  - I might as well write them out in the same place, but with a different prefix
- I have done the following window sizes in the terminal, since it takes a while
  - [X] 7
  - [X] 11
  - [X] 101
#+begin_src sh :dir ../big-data/ngc346new/ :results output verbatim :eval no
  time python ../../lib/median_continuum.py\
       --two-pass \
       --out-prefix n346-PZ-2pass \
       --cube-name PeterZeidler/DATACUBE_FINAL_fwhm_cor_trim.fits \
       11
#+end_src

#+RESULTS:
: /Users/will/Dropbox/muse-hii-regions/big-data/ngc346new

- I have repeated this for window widths of 7, 11, 101
** DONE [#A] Fixing the map size discrepancy once and for all
CLOSED: [2024-05-09 Thu 11:19]
:LOGBOOK:
- State "DONE"       from "TODO"       [2024-05-09 Thu 11:19] \\
  I ran this and it seems to have worked. Now to redo all the downstream steps
:END:
- (3801,326,347) is the size of the PZ cube, but (3801,326,346) is the size of the ESO cube
- This difference has caused me no end of pain, and half-assed attempts to fix it have had unwanted knock-on effects, since all my previous workflow assumes the ESO cube size
- The only sane thing to do is to trim off a column from the PZ cube right at the start, so we can just avoid the entire issue
  - This means I will have to rerun the median filters, but that is a small price to pay

#+begin_src python :tangle ../scripts/trim-cube.py
  from astropy.io import fits
  import numpy as np
  import typer
  from pathlib import Path


  def main(
      hdu_index: int = 1,
      cube_name: str = "PeterZeidler/DATACUBE_FINAL_fwhm_cor.fits",
      data_path=Path.home() / "Work/Muse-Hii-Data/SMC-NGC-346",
      extra_suffix: str = "_trim",
      target_shape: tuple[int, int, int] = (3801, 326, 346),
  ):
      # Open the FITS file
      hdu = fits.open(data_path / cube_name)[hdu_index]
      # Trim off the rightmost column
      hdu.data = hdu.data[..., :-1]
      # Check shape of result
      assert hdu.data.shape == target_shape

      # Write the new FITS file
      hdu.writeto(data_path / cube_name.replace(".fits", f"{extra_suffix}.fits"), overwrite=True)


  if __name__ == "__main__":
      typer.run(main)
#+end_src

#+header: :prologue "exec 2>&1" :epilogue ":"
#+begin_src sh :dir ../big-data/ngc346new/ :results output verbatim
  time python ../../scripts/trim-cube.py
#+end_src

#+RESULTS:
: 
: real	0m46.969s
: user	0m26.132s
: sys	0m6.325s

** Image maps


*** First try and make the rainbow maps
Start off with the ESO cube. This differs from what we did previously in that it uses the 2pass 007 filtered cube
#+begin_src sh :dir ../data/spec1d :results output file
  python ../../scripts/peak-image-plot.py \
         ../../big-data/ngc346new/n346-muse-2pass-csub-007.fits \
         n346-nostar-bs-peaks-p0010-d0030.csv \
         --ncolumns 8 \
         --no-subtract-base \
         --wavelength-window-pad 0.5 \
         --extra-suffix ESO007
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/spec1d/peak-images-n346-nostar-bs-peaks-p0010-d0030-ESO007.pdf]]

Now the PZ one

#+begin_src sh :dir ../data/spec1d :results output file
  python ../../scripts/peak-image-plot.py \
         ../../big-data/ngc346new/n346-PZ-2pass-csub-007.fits \
         n346-nostar-bs-peaks-p0010-d0030.csv \
         --ncolumns 8 \
         --no-subtract-base \
         --wavelength-window-pad 0.5 \
         --extra-suffix PZ007
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/spec1d/peak-images-n346-nostar-bs-peaks-p0010-d0030-PZ007.pdf]]

That one is OK

#+begin_src sh :dir ../data/spec1d :results output file
  python ../../scripts/peak-image-plot.py \
         ../../big-data/ngc346new/n346-PZ-2pass-csub-007.fits \
         n346-nostar-bs-peaks-p0010-d0030.csv \
         --ncolumns 8 \
         --subtract-base \
         --wavelength-window-pad 0.5 \
         --extra-suffix PZ007B
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/spec1d/peak-images-n346-nostar-bs-peaks-p0010-d0030-PZ007B.pdf]]

That one is terrible. We should not subtract the base

#+begin_src sh :dir ../data/spec1d :results output file
  python ../../scripts/peak-image-plot.py \
         ../../big-data/ngc346new/n346-PZ-2pass-csub-101.fits \
         n346-nostar-bs-peaks-p0010-d0030.csv \
         --ncolumns 8 \
         --no-subtract-base \
         --wavelength-window-pad 0.5 \
         --extra-suffix PZ101
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/spec1d/peak-images-n346-nostar-bs-peaks-p0010-d0030-PZ101.pdf]]

And that one is mostly fine too. 
*** Now make all the individual maps
- It turns out that the [[file:../scripts/make-one-map.py][make-one-map.py]] script uses info from the spreadsheet to decide how to extract the line and from which median-filtered image.
- I would rather use a homogeneous approach this time
- And more efficient to do all the lines at once, so we do not need to keep reading in the same cube file
**** DONE New version of map script
CLOSED: [2024-05-09 Thu 13:11]
:LOGBOOK:
- State "DONE"       from "TODO"       [2024-05-09 Thu 13:11] \\
  Re-run this for all PZ cubes after doing the column trimming
:END:
- The yaml files are in [[file:../data/n346-lines/all-lines-orig/]]
- I will make a new folder [[file:../data/n346-bow-lines/]] to store the maps
  - This will have sub-folders named after the particular median-filtered cube, such as [[file:../data/n346-bow-lines/maps-n346-PZ-2pass-csub-007/]]
- Unlike previous scripts, this finds all paths relative to the project root directory, which may or may not be a good idea
  - We can run it from the [[file:../scripts/]] directory or the [[file:../data/]] directory, or anywhere else that is one level down from the project root (or otherwise use the ~--project-root~ option)
#+begin_src python :tangle ../scripts/make-all-3wav-maps.py
  import numpy as np
  import sys
  from pathlib import Path
  import typer
  import yaml
  import slugify
  from text_unidecode import unidecode
  from astropy.io import fits
  from astropy.wcs import WCS

  unwanted_types = ["sky", "telluric", "noise", "nan", "stellar"]


  def get_line_type(s):
      if s is None:
          return None
      ltype = slugify.slugify(str(s).rstrip("?"))
      if not ltype or ltype in unwanted_types:
          return None
      else:
          return ltype


  def load_cube_hdu(
      cube_path: Path,
  ):
      return fits.open(cube_path)[0]


  def get_id_string(data):
      s = f"{data['Index']:04d}-"
      s += slugify.slugify(data["ID"])
      if "UIL" in data["ID"]:
          s += "-" + slugify.slugify(f"{data['lambda_HM']:.2f}")
      return s


  def main(
      cube_file: str = "n346-muse-2pass-csub-007.fits",
      project_root: Path = Path("../"),
      yaml_folder: str = "data/n346-lines/all-lines-orig",
      maps_folder: str = "data/n346-bow-lines",
  ):
      """Create ABC channel maps of all emission lines from data in YAML files"""


      # Get the spectral cube
      big_data_folder = project_root / "big-data" / "ngc346new"
      cube_path = big_data_folder / f"{cube_file}"
      cube = load_cube_hdu(cube_path)

      # The YAML files contain metadata for each line
      yaml_files = (project_root / yaml_folder).glob("*.yaml")
      # Loop over all the lines
      for yaml_file in yaml_files:
          with open(yaml_file) as f:
              metadata = yaml.safe_load(f)
          # Group all lines of same type into their own folder
          line_type = get_line_type(metadata["Type"])
          if line_type is None:
              # Skip unwanted types
              continue

          # Make folder for this line type if necessary
          save_path = project_root / maps_folder / f"maps-{cube_path.stem}" / f"type-{line_type}" 
          save_path.mkdir(exist_ok=True, parents=True)

          ipeak = metadata["Index"]
          # Save each of 3 channels as a separate FITS file
          images = {}
          for chan_label, ichan in zip(["A", "B", "C"], [ipeak - 1, ipeak, ipeak + 1]):
              images[chan_label] = cube.data[ichan, ...]
          # And also the moments
          images["ABC"] = images["A"] + images["B"] + images["C"]
          images["m1"] = (images["C"] - images["A"]) / images["ABC"]
          images["m2"] = (images["C"] + images["A"]) / images["ABC"]
          header = WCS(cube.header).celestial.to_header()
          # FITS headers allow only ASCII strings
          header.update({k: unidecode(str(v)) for k, v in metadata.items()})
          for label, image in images.items():
              fits_file = get_id_string(metadata) + f"-{label}.fits"
              fits.PrimaryHDU(header=header, data=image).writeto(
                  save_path / fits_file, overwrite=True
              )
          print("Image saved to", save_path / f"{get_id_string(metadata)}-*.fits")


  if __name__ == "__main__":
      typer.run(main)
#+end_src



#+begin_src sh :dir ../data :results verbatim :eval no
python ../scripts/make-all-3wav-maps.py --cube-file n346-muse-2pass-csub-007.fits
#+end_src

#+begin_src sh :dir ../data :results verbatim
python ../scripts/make-all-3wav-maps.py --help 
#+end_src

#+RESULTS:
#+begin_example
                                                                                
 Usage: make-all-3wav-maps.py [OPTIONS]                                         
                                                                                
 Create ABC channel maps of all emission lines from data in YAML files          
                                                                                
╭─ Options ────────────────────────────────────────────────────────────────────╮
│ --cube-file           TEXT  [default: n346-muse-2pass-csub-007.fits]         │
│ --project-root        PATH  [default: ..]                                    │
│ --yaml-folder         TEXT  [default: data/n346-lines/all-lines-orig]        │
│ --maps-folder         TEXT  [default: data/n346-bow-lines]                   │
│ --help                      Show this message and exit.                      │
╰──────────────────────────────────────────────────────────────────────────────╯

#+end_example
** TODO Spectra of each zone
:LOGBOOK:
- State "TODO"       from              [2024-05-09 Thu 10:03] \\
  I need to do this so I can have a panel in my [[id:376C7C7C-FE81-48F2-8D6E-DF06BC2274C5][quality assurance figures]] that shows the spectra around each line
:END:
- For a first pass on this, I will use the same zones as in the H_2 lines project
  - Eventually, we could maybe redo the zones using the new maps for consistency, although I cannot imagine that it will make much difference.
- The zones are defined in [[file:../data/n346-lines/zones.yaml]]
- The map of zone indices is in [[file:../data/n346-lines/zone-indices.fits]]
- Then there are mask files for each zone in [[file:../data/n346-lines/zone-IV-mask.fits]] etc
  - These are what we should use to extract the spectra
- It looks like I used a really space-inefficient method for doing the zones spectra: I first make an entire masked cube for each zone, then extract the spectra from that
  - Never mind, I will do the same - disk space is not a problem
  -
*** DONE Define a background (BG) zone
CLOSED: [2024-05-10 Fri 13:26]
:LOGBOOK:
- State "DONE"       from "TODO"       [2024-05-10 Fri 13:26] \\
  Decided to go for a border of 10 pixels to avoid the noise around the edges
:END:
- It looks like I may be able to improve things by subtracting off a background, so I am next going to define a new zone to the north of the map where there is very little emission apart from some neutral lines
- Looking at the zone-*-bright-map.fits files, it looks like a combination of two criteria will work:
  - III < -0.1
  - S < 0.2
- This will select a couple of regions in the north where nothing is happening


#+begin_src python :tangle ../scripts/make-bg-zone-mask.py 
  from pathlib import Path
  import numpy as np
  from astropy.io import fits
  import yaml
  import typer

  def trim_pixel_border_from_mask(mask: np.ndarray, border: int) -> np.ndarray:
      """Set to False all pixels within certain border of mask array"""
      assert mask.ndim == 2
      mask2 = np.zeros_like(mask)
      # Easier to set the pixels that we do not want to set to FALSE
      mask2[border:-border,  border:-border] = True
      # and just AND it with the original
      return mask & mask2

  BG_THRESHOLDS = [("III", -0.1), ("S", 0.2)]


  def main(
          trim_border: int=5,
  ):
      """Write a fits image file for the BG zone mask"""

      # Initialise the mask to all True
      mask = None
      # For each criterion, set to False any pixels that do not meet it
      for zlabel, threshold in BG_THRESHOLDS:
          zone_bright_map = fits.open(f"zone-{zlabel}-bright-map.fits")[0]
          if mask is None:
              mask = zone_bright_map.data < threshold
          else:
              mask = mask & (zone_bright_map.data < threshold)
      # And trim around the border to avoid noisy pixels
      mask = trim_pixel_border_from_mask(mask, trim_border)
      maskfilename = f"zone-BG-mask.fits"
      fits.PrimaryHDU(
          header=zone_bright_map.header,
          data=mask.astype(int),
      ).writeto(maskfilename, overwrite=True)
      print("Saved mask to", maskfilename)

  if __name__ == "__main__":
      typer.run(main)

  #+end_src

  #+RESULTS:

#+begin_src sh :results output verbatim :dir ../data/n346-lines
  python ../../scripts/make-bg-zone-mask.py --trim-border 10
#+end_src

#+RESULTS:
: Saved mask to zone-BG-mask.fits
*** DONE Generate the masked cube for the BG zone
CLOSED: [2024-05-10 Fri 13:35]
:LOGBOOK:
- State "DONE"       from "TODO"       [2024-05-10 Fri 13:35] \\
  Done for 3 PZ windows and one ESO window
:END:
#+header: :prologue "exec 2>&1" :epilogue ":"
#+begin_src sh :results output verbatim :dir ../data/n346-lines
  z=BG
  time for w in 007 011 101; do
      python ../../scripts/make-masked-cube.py \
       ../../big-data/ngc346new/n346-PZ-2pass-csub-$w.fits \
       zone-$z-mask.fits \
       zone-$z
  done
  echo "Last run:"
  date
#+end_src

#+RESULTS:
: WARNING: UnitsWarning: '1e-20 erg/s/cm  2/Angstrom' contains multiple slashes, which is discouraged by the FITS standard [astropy.units.format.generic]
: WARNING: UnitsWarning: '1e-20 erg/s/cm  2/Angstrom' contains multiple slashes, which is discouraged by the FITS standard [astropy.units.format.generic]
: WARNING: UnitsWarning: '1e-20 erg/s/cm  2/Angstrom' contains multiple slashes, which is discouraged by the FITS standard [astropy.units.format.generic]
: 
: real	1m6.621s
: user	0m31.011s
: sys	0m20.328s
: Last run:
: Fri May 10 13:30:22 CST 2024

Repeat for the ESO cube
#+begin_src sh :results output verbatim :dir ../data/n346-lines
  z=BG
  time for w in 007; do
      python ../../scripts/make-masked-cube.py \
       ../../big-data/ngc346new/n346-muse-2pass-csub-$w.fits \
       zone-$z-mask.fits \
       zone-$z
  done
  echo "Last run:"
  date
#+end_src

#+RESULTS:
: Last run:
: Fri May 10 13:44:59 CST 2024

*** DONE Generate the masked cubes for each zone
CLOSED: [2024-05-09 Thu 11:39]
:LOGBOOK:
- State "DONE"       from "TODO"       [2024-05-09 Thu 11:39] \\
  Done for 007, 011, and 101
:END:
First the 007 window
#+header: :prologue "exec 2>&1" :epilogue ":"
#+begin_src sh :results output verbatim :dir ../data/n346-lines
  time for z in 0 I II III IV MYSO S BG; do
      python ../../scripts/make-masked-cube.py \
       ../../big-data/ngc346new/n346-PZ-2pass-csub-007.fits \
       zone-$z-mask.fits \
       zone-$z
  done
  echo "Last run:"
  date
#+end_src

#+RESULTS:
#+begin_example
WARNING: UnitsWarning: '1e-20 erg/s/cm  2/Angstrom' contains multiple slashes, which is discouraged by the FITS standard [astropy.units.format.generic]
WARNING: UnitsWarning: '1e-20 erg/s/cm  2/Angstrom' contains multiple slashes, which is discouraged by the FITS standard [astropy.units.format.generic]
WARNING: UnitsWarning: '1e-20 erg/s/cm  2/Angstrom' contains multiple slashes, which is discouraged by the FITS standard [astropy.units.format.generic]
WARNING: UnitsWarning: '1e-20 erg/s/cm  2/Angstrom' contains multiple slashes, which is discouraged by the FITS standard [astropy.units.format.generic]
WARNING: UnitsWarning: '1e-20 erg/s/cm  2/Angstrom' contains multiple slashes, which is discouraged by the FITS standard [astropy.units.format.generic]
WARNING: UnitsWarning: '1e-20 erg/s/cm  2/Angstrom' contains multiple slashes, which is discouraged by the FITS standard [astropy.units.format.generic]

real	2m7.901s
user	1m13.664s
sys	0m42.645s
Last run:
Thu May  9 11:27:34 CST 2024
#+end_example

Now the 101 window. This one I run in the terminal so as not to block the notebook. And I do the same for the 011 window

#+header: :prologue "exec 2>&1" :epilogue ":"
#+begin_src sh :results output verbatim :dir ../data/n346-lines :eval no
  time for z in I II III IV MYSO S; do
      python ../../scripts/make-masked-cube.py \
       ../../big-data/ngc346new/n346-PZ-2pass-csub-101.fits \
       zone-$z-mask.fits \
       zone-$z
  done
  echo "Last run:"
  date
#+end_src

Somehow I forgot the Zone 0 case

#+header: :prologue "exec 2>&1" :epilogue ":"
#+begin_src sh :results output verbatim :dir ../data/n346-lines
  z=0
  time for w in 007 011 101; do
      python ../../scripts/make-masked-cube.py \
       ../../big-data/ngc346new/n346-PZ-2pass-csub-$w.fits \
       zone-$z-mask.fits \
       zone-$z
  done
  echo "Last run:"
  date
#+end_src

#+RESULTS:
: WARNING: UnitsWarning: '1e-20 erg/s/cm  2/Angstrom' contains multiple slashes, which is discouraged by the FITS standard [astropy.units.format.generic]
: WARNING: UnitsWarning: '1e-20 erg/s/cm  2/Angstrom' contains multiple slashes, which is discouraged by the FITS standard [astropy.units.format.generic]
: WARNING: UnitsWarning: '1e-20 erg/s/cm  2/Angstrom' contains multiple slashes, which is discouraged by the FITS standard [astropy.units.format.generic]
: 
: real	1m1.540s
: user	0m30.565s
: sys	0m18.825s
: Last run:
: Thu May  9 11:56:20 CST 2024

*** DONE Extract the spectra from each zone
CLOSED: [2024-05-09 Thu 13:06]
:LOGBOOK:
- State "DONE"       from "TODO"       [2024-05-09 Thu 13:06] \\
  Finished the version with mean and without any chopping off for all the PZ windows and the 007 ESO window
:END:
Unlike with the previous project, we do not necessarily want to chop off the south filament, so we will initially try it with the entire cube

#+header: :prologue "exec 2>&1" :epilogue ":"
#+begin_src sh :results output verbatim :dir ../data/n346-bow-lines
  time for z in 0 I II III IV MYSO S; do
      python ../../scripts/extract-zone-spectrum.py \
       ../../big-data/ngc346new/n346-PZ-2pass-csub-007-zone-$z.fits \
       zone-$z-P-007-mean
  done
  echo "Last run:"
  date
#+end_src

#+RESULTS:
: /Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/../../scripts/extract-zone-spectrum.py:14: RuntimeWarning: Mean of empty slice
:   spec = reduction_method(
: 
: real	0m57.864s
: user	0m25.488s
: sys	0m13.890s
: Last run:
: Thu May  9 11:57:26 CST 2024

Also done for the 011 and 101 windows. And for the ESO cube with 007 window

Repeat for the new BG zone

#+header: :prologue "exec 2>&1" :epilogue ":"
#+begin_src sh :results output verbatim :dir ../data/n346-bow-lines
  z=BG
  time python ../../scripts/extract-zone-spectrum.py \
         ../../big-data/ngc346new/n346-PZ-2pass-csub-007-zone-$z.fits \
         zone-$z-P-007-mean
  time python ../../scripts/extract-zone-spectrum.py \
         ../../big-data/ngc346new/n346-PZ-2pass-csub-011-zone-$z.fits \
         zone-$z-P-011-mean
  time python ../../scripts/extract-zone-spectrum.py \
         ../../big-data/ngc346new/n346-PZ-2pass-csub-101-zone-$z.fits \
         zone-$z-P-101-mean
  time python ../../scripts/extract-zone-spectrum.py \
         ../../big-data/ngc346new/n346-muse-2pass-csub-007-zone-$z.fits \
         zone-$z-E-007-mean
  echo "Last run:"
  date
#+end_src

#+RESULTS:
#+begin_example
/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/../../scripts/extract-zone-spectrum.py:14: RuntimeWarning: Mean of empty slice
  spec = reduction_method(

real	0m4.090s
user	0m3.313s
sys	0m1.645s
/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/../../scripts/extract-zone-spectrum.py:14: RuntimeWarning: Mean of empty slice
  spec = reduction_method(

real	0m4.043s
user	0m3.340s
sys	0m1.603s

real	0m4.047s
user	0m3.318s
sys	0m1.601s

real	0m4.100s
user	0m3.355s
sys	0m1.612s
Last run:
Fri May 10 13:45:43 CST 2024
#+end_example

** Initial impressions of the PZ maps
- These are a lot better than I had expected
- Maybe we can just use these, instead of trying to use them to calibrate the ESO ones
- No, they have the same old problem with the weak lines
*** Some lines that may need tweaking
- The [Ar IV] aurora lines are a bit weird
  - I suspect that the central pixel may be off by one in some cases
  - [Ar IV] 7170.5 has no obvious blend
    - actually this one might be well-centered after all
      |         |   A |   B |    C |    m1 |   m2 |
      |---------+-----+-----+------+-------+------|
      | BG      | 3.5 | 4.0 | -2.2 | -1.08 | 0.25 |
      | BS      | 5.5 | 6.7 | -1.3 | -0.62 | 0.39 |
      | BS - BG | 2.0 | 2.7 |  0.9 | -0.20 | 0.52 |
      |         |     |     |      |   0/0 |  0/0 |
      #+TBLFM: $5=($4-$2)/($2 + $3 + $4);f2::$6=($4+$2)/($2 + $3 + $4);f2::@4$2..@4$4=@3-@2;f1
    - 
  - [Ar IV] 7237.4 has a blend with an H_2 line, so is listed under that
  - [Ar IV] 7262.7 has a blend with [Cl IV] 7261.4, but it is not so apparent
** Comparing different versions of the maps
- We have two sorts of comparisons that we want to carry out:
  - Different filter window sizes for the PZ maps
  - Between the PZ and ESO maps
- We will first write a script that does a comparison for a single line
  - Shows the ABC color images of the two lines
  - Shows the 2d histogram of the sum, m1, and m2 values


*** TODO Script to compare two maps
:PROPERTIES:
:ID:       376C7C7C-FE81-48F2-8D6E-DF06BC2274C5
:END:
- This has now expanded into an all singing, all dancing figure, which I am refering to as the Quality Assurance (QA) plot
- [2024-05-10 Fri] Future plans are as follows
  - [X] Define a BG zone to extract a spectrum that we will subtract from all the other zones
    - I am hoping that this will allows us to eliminate all the rubbish that we see in the PZ spectra of the faint lines with an amplitude of about 5
    - Possibly it also might help to fix the oversubtraction in the ESO spectra with bright lines, similar to what I did by hand on a line-by-line basis in the jupyter notebooks
  - [ ] Add a map of the zones as the central panel of the figure
  - [ ] Weight the histograms by the brightness of the pixels
#+begin_src python :tangle ../scripts/compare-two-maps.py
  from astropy.io import fits
  import numpy as np
  import matplotlib.pyplot as plt
  import seaborn as sns
  from pathlib import Path
  import typer
  from astropy.convolution import Gaussian2DKernel, convolve_fft
  from astropy.wcs import WCS

  SAVEPATH = Path("maps-compare")


  def combo_folder(combo: str):
      cubeid, winid = combo.split("-")
      cubename = {"P": "PZ", "E": "muse"}[cubeid]
      return Path(f"maps-n346-{cubename}-2pass-csub-{winid}")


  def line_path(combo: str, line: str):
      candidates = list(combo_folder(combo).glob(f"*/*{line}-ABC.fits"))
      assert len(candidates) == 1
      return candidates[0]


  def get_data(line_path: Path, suffix: str = "ABC", return_header: bool = False):
      """Get the image data from a line path"""
      hdu = fits.open(line_path.with_stem(line_path.stem.replace("ABC", suffix)))[0]
      if return_header:
          return hdu.data, hdu.header
      else:
          return hdu.data


  def get_zone_spectra(
      combo: str,
      zones: list[str] = ["0", "I", "II", "III", "IV", "S", "MYSO", "BG"],
  ):
      """Get the 1-d spectrum of each zone from a given cube"""
      specdict = {}
      for zone in zones:
          spec_file = f"zone_spectra/zone-{zone}-{combo}-mean-spec1d.fits"
          hdu = fits.open(spec_file)[0]
          specdict[zone] = hdu.data
          if not "wave" in specdict:
              specdict["wave"] = (
                  WCS(hdu.header)
                  .array_index_to_world(np.arange(hdu.data.size))
                  .to_value("Angstrom")
              )
      # Add some combination zones
      # Average diffuse
      specdict["I,III"] = (specdict["I"] + specdict["III"]) / 2
      # Average filaments
      specdict["0,II"] = (specdict["0"] + specdict["II"]) / 2
      return specdict


  def rgb_ABC(line_path: Path):
      rgb = []
      for chan in "CBA":
          data = get_data(line_path, suffix=chan)
          rgb.append(data)
      return np.stack(rgb, axis=-1)


  def scale_image(data, vmin, vmax):
      """Linear rescaling from [vmin, vmax] -> [0, 1]"""
      return (data - vmin) / (vmax - vmin)


  def auto_scale_channels(rgb, p=1.0, mask=None):
      """Rescale each channel to the 1-99 percentile range."""
      _rgb = np.empty_like(rgb)
      for i in range(3):
          _rgb[..., i] = scale_image(
              rgb[..., i],
              ,*np.nanpercentile(
                  rgb[..., i] if mask is None else rgb[..., i][mask],
                  [p, 100 - p],
              ),
          )
      return _rgb


  def split_line_string(line: str):
      """Extract the ion and the central wavelength from a line string."""
      parts = line.split("-")
      assert len(parts) in (3, 4)
      species = " ".join(parts[:-3])
      wave0 = float(".".join(parts[-2:]))
      return species, wave0


  def main(
      acombo: str = "P-007",
      bcombo: str = "E-007",
      line: str = "h-i-6562-79",
      histogram_gamma: float = 2.0,
      smooth: float = 0.0,
      mask_out_stars: bool = False,
      star_mask_threshold: float = 10.0,
      star_map_path: Path = Path.cwd().parent / "n346-lines" / "zone-S-bright-map.fits",
      subtract_bg: bool = False,
  ):
      species, wave0 = split_line_string(line)
      line_path_a = line_path(acombo, line)
      line_path_b = line_path(bcombo, line)
      abc_a, hdr = get_data(line_path_a, return_header=True)
      abc_b = get_data(line_path_b)
      rgb_a = rgb_ABC(line_path_a)
      rgb_b = rgb_ABC(line_path_b)
      wave_obs = float(hdr["lambda_obs"])
      index0 = int(hdr["Index"])
      # Optionally smooth the images
      if smooth > 0.0:
          kernel = Gaussian2DKernel(smooth)
          for i in range(3):
              rgb_a[..., i] = convolve_fft(rgb_a[..., i], kernel)
              rgb_b[..., i] = convolve_fft(rgb_b[..., i], kernel)
              abc_a = convolve_fft(abc_a, kernel)
              abc_b = convolve_fft(abc_b, kernel)
      # Optionally mask out the stars
      if mask_out_stars:
          star_map = fits.open(star_map_path)[0].data
          if smooth > 0.0:
              star_map = convolve_fft(star_map, kernel)
          # star_mask is True when when we have no star
          star_mask = star_map < star_mask_threshold
      else:
          star_mask = np.ones_like(abc_a, dtype=bool)
      star_mask_rgb = np.stack([star_mask] * 3, axis=-1)

      # Load the spectra for each zone into dicts
      spec_a = get_zone_spectra(acombo)
      spec_b = get_zone_spectra(bcombo)
      # Optionally subtract the background spectrum from each zone
      if subtract_bg:
          for zone in spec_a.keys():
              if zone not in ("wave", "BG"):
                  spec_a[zone] -= spec_a["BG"]
                  spec_b[zone] -= spec_b["BG"]

      # Optionally apply the BG subtraction to the images
      if subtract_bg:
          # Subtract from each channel of the RGB images
          for i in range(3):
              # index in wave array for the current channel
              wav_index = index0 + 1 - i
              rgb_a[..., i] -= spec_a["BG"][wav_index]
              rgb_b[..., i] -= spec_b["BG"][wav_index]
          # Subtract from the summed ABC images
          abc_a -= np.sum(spec_a["BG"][index0 - 1: index0 + 2])
          abc_b -= np.sum(spec_b["BG"][index0 - 1: index0 + 2])

      # Calculate suitable limits for the plots and histograms
      amin, amax = np.nanpercentile(rgb_a[star_mask_rgb], [1, 99])
      aspan = amax - amin
      amin -= 0.1 * aspan
      amax += 0.1 * aspan
      bmin, bmax = np.nanpercentile(rgb_b[star_mask_rgb], [1, 99])
      bspan = bmax - bmin
      bmin -= 0.1 * bspan
      bmax += 0.1 * bspan
      abmax = max(amax, bmax)
      abmin = min(min(amin, bmin), 0.0)

      # Set up the figure
      sns.set_color_codes("muted")
      fig, ax = plt.subplots(3, 3, figsize=(10, 7))

      # RGB images of the ABC channels from the two cubes
      ax[0, 0].imshow(auto_scale_channels(rgb_a, mask=star_mask), origin="lower")
      ax[0, 1].imshow(auto_scale_channels(rgb_b, mask=star_mask), origin="lower")
      if mask_out_stars:
          ax[0, 0].contour(
              star_map, levels=[star_mask_threshold], colors="r", linewidths=0.5
          )
          ax[0, 1].contour(
              star_map, levels=[star_mask_threshold], colors="r", linewidths=0.5
          )
      ax[0, 0].set_title(f"{acombo} {line}")
      ax[0, 1].set_title(f"{bcombo} {line}")

      ## 1D spectra in right column of plots
      ##
      wslice = slice(index0 - 7, index0 + 8)
      smaxima = []
      sminima = []
      for axx, zone in [
          [ax[0, -1], "IV"],
          [ax[1, -1], "I,III"],
          [ax[2, -1], "0,II"],
          [ax[1, 1], "BG"],
      ]:
          axx.plot(
              spec_a["wave"][wslice],
              spec_a[zone][wslice],
              label=f"{acombo} zone {zone}",
              ds="steps-mid",
          )
          axx.plot(
              spec_b["wave"][wslice],
              spec_b[zone][wslice],
              label=f"{bcombo} zone {zone}",
              ds="steps-mid",
          )
          # Save the highest and lowest values for the y-axis limits
          if zone != "BG":
              smaxima.append(np.nanmax(spec_a[zone][wslice]))
              smaxima.append(np.nanmax(spec_b[zone][wslice]))
              sminima.append(np.nanmin(spec_a[zone][wslice]))
              sminima.append(np.nanmin(spec_b[zone][wslice]))

          # Add the zero line
          axx.axhline(0.0, color="k", lw=0.5)
          # add RGB rectangles for the ABC channels
          dwave = np.diff(spec_a["wave"])[0]
          for i, color in ([index0 - 1, "b"], [index0, "g"], [index0 + 1, "r"]):
              axx.axvspan(
                  spec_a["wave"][i] - dwave / 2,
                  spec_a["wave"][i] + dwave / 2,
                  facecolor=color,
                  alpha=0.2,
                  lw=0,
              )
          axx.set_title(f"Zone {zone} ", loc="right", y=0.8)

      # Set common plot limits for all spectra
      smax = max(smaxima)
      smin = min(sminima)
      sspan = smax - smin
      smin -= 0.1 * sspan
      smax += 0.1 * sspan
      for axx in ax[:, -1]:
          axx.set_ylim(smin, smax)

      ## Correlations in bottom left corner
      # Correlations between the two cubes, channel by channel
      nbins = 100
      H_rgb = np.empty((nbins, nbins, 3))
      for ichan in range(3):
          x = rgb_a[..., ichan]
          y = rgb_b[..., ichan]
          mask = np.isfinite(x) & np.isfinite(y)
          mask &= (x != 0.0) & (y != 0.0)
          if mask_out_stars:
              mask &= star_mask
          H, xedges, yedges = np.histogram2d(
              x[mask],
              y[mask],
              bins=nbins,
              range=[[abmin, abmax], [abmin, abmax]],
          )
          # if ichan == 1:
          #     print(xedges)
          #     print(yedges)
          #     print(H)
          H_rgb[..., ichan] = H.T

      ax[1, 0].imshow(
          auto_scale_channels(H_rgb, p=0) ** (1 / histogram_gamma),
          origin="lower",
          extent=[abmin, abmax, abmin, abmax],
      )
      ax[1, 0].axhline(0.0, color="w", lw=0.5, linestyle="--")
      ax[1, 0].axvline(0.0, color="w", lw=0.5, linestyle="--")
      ax[1, 0].plot([abmin, abmax], [abmin, abmax], color="w", lw=0.5, linestyle="--")
      ax[1, 0].set(
          xlabel=f"{acombo} {line}",
          ylabel=f"{bcombo} {line}",
      )

      # Recalculate the moments, since we may have smoothed the arrays
      m1_a = (rgb_a[..., 0] - rgb_a[..., 2]) / abc_a
      m1_b = (rgb_b[..., 0] - rgb_b[..., 2]) / abc_b
      m2_a = (rgb_a[..., 0] + rgb_a[..., 2]) / abc_a
      m2_b = (rgb_b[..., 0] + rgb_b[..., 2]) / abc_b

      # Correlations between the velocity moments
      for axx, mlabel, mrange, mlines in [
          [ax[2, 0], "m1", (-0.7, 0.7), (-0.5, 0.0, 0.5)],
          [ax[2, 1], "m2", (-0.2, 1.2), (0, 2 / 3)],
      ]:
          # Joint histogram of velocity moments
          if mlabel == "m1":
              m_a = m1_a
              m_b = m1_b
          else:
              m_a = m2_a
              m_b = m2_b
          # m_a = get_data(line_path_a, suffix=mlabel)
          # m_b = get_data(line_path_b, suffix=mlabel)
          mask = np.isfinite(m_a) & np.isfinite(m_b)
          mask &= abc_a > 0.0
          if mask_out_stars:
              mask &= star_mask
          mmin, mmax = mrange
          H, xedges, yedges = np.histogram2d(
              m_a[mask],
              m_b[mask],
              weights=abc_a[mask],
              bins=nbins,
              range=[[mmin, mmax], [mmin, mmax]],
          )
          axx.imshow(
              H.T ** (1 / histogram_gamma),
              origin="lower",
              extent=[mmin, mmax, mmin, mmax],
              cmap="gray_r",
          )
          axx.plot([mmin, mmax], [mmin, mmax], color="r", lw=0.5, linestyle="--")
          for mline in mlines:
              axx.axhline(mline, color="r", lw=0.5, linestyle="--")
              axx.axvline(mline, color="r", lw=0.5, linestyle="--")
              axx.set(
                  xlabel=f"{acombo} {mlabel}",
                  ylabel=f"{bcombo} {mlabel}",
              )

      sns.despine()
      figfile = SAVEPATH / f"{acombo}-{bcombo}-{line}.pdf"
      fig.savefig(figfile, bbox_inches="tight")

      print(figfile, end="")


  if __name__ == "__main__":
      typer.run(main)
#+end_src

#+RESULTS:


#+begin_src sh :dir ../data/n346-bow-lines :results file
python ../../scripts/compare-two-maps.py --line h-i-6562-79 --bcombo E-007 --subtract-bg
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-E-007-h-i-6562-79.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
python ../../scripts/compare-two-maps.py --line h-i-6562-79 --bcombo P-101  --subtract-bg
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-P-101-h-i-6562-79.pdf]]


#+begin_src sh :dir ../data/n346-bow-lines :results file
python ../../scripts/compare-two-maps.py --line he-ii-4685-68 --bcombo E-007 --smooth 3 --mask-out-stars --star-mask-threshold 1.0 --subtract-bg
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-E-007-he-ii-4685-68.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
python ../../scripts/compare-two-maps.py --line he-ii-4685-68 --bcombo P-101 --smooth 3 --mask-out-stars --star-mask-threshold 0.5 --subtract-bg
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-P-101-he-ii-4685-68.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
python ../../scripts/compare-two-maps.py --line ar-iv-4740-17 --bcombo E-007 --smooth 3 --mask-out-stars --subtract-bg
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-E-007-ar-iv-4740-17.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
python ../../scripts/compare-two-maps.py --line ar-iv-4740-17 --bcombo P-101 --smooth 3 --mask-out-stars --subtract-bg
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-P-101-ar-iv-4740-17.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
python ../../scripts/compare-two-maps.py --line ar-iv-4740-17 --bcombo P-011 --smooth 3 --mask-out-stars
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-P-011-ar-iv-4740-17.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
  python ../../scripts/compare-two-maps.py --line k-iv-6101-79 --bcombo E-007 --smooth 5 --mask-out-stars --star-mask-threshold 2.0 --subtract-bg
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-E-007-k-iv-6101-79.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
  python ../../scripts/compare-two-maps.py --line k-iv-6101-79 --bcombo P-101 --smooth 5 --mask-out-stars --star-mask-threshold 2.0 --subtract-bg
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-P-101-k-iv-6101-79.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
  python ../../scripts/compare-two-maps.py --line cl-iv-8045-62 --bcombo E-007 --smooth 5 --mask-out-stars --star-mask-threshold 5.0
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-E-007-cl-iv-8045-62.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
  python ../../scripts/compare-two-maps.py --line cl-iv-8045-62 --bcombo P-101 --smooth 5 --mask-out-stars --star-mask-threshold 5.0
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-P-101-cl-iv-8045-62.pdf]]


#+begin_src sh :dir ../data/n346-bow-lines :results file
  python ../../scripts/compare-two-maps.py --line ar-iv-7262-7 --bcombo E-007 --smooth 9 --mask-out-stars --star-mask-threshold 1.0 --subtract-bg
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-E-007-ar-iv-7262-7.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
  python ../../scripts/compare-two-maps.py --line ar-iv-7262-7 --bcombo P-101 --smooth 9 --mask-out-stars --star-mask-threshold 1.0 --subtract-bg
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-P-101-ar-iv-7262-7.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
  python ../../scripts/compare-two-maps.py --line ar-iv-7170-5 --bcombo E-007 --smooth 9 --mask-out-stars --star-mask-threshold 1.0 --subtract-bg
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-E-007-ar-iv-7170-5.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
  python ../../scripts/compare-two-maps.py --line ar-iv-7170-5 --bcombo P-101 --smooth 9 --mask-out-stars --star-mask-threshold 1.0 --subtract-bg
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-P-101-ar-iv-7170-5.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
python ../../scripts/compare-two-maps.py --line ar-iv-4711-37 --bcombo E-007 --smooth 3 --mask-out-stars --star-mask-threshold 2 --subtract-bg
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-E-007-ar-iv-4711-37.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
python ../../scripts/compare-two-maps.py --line ar-iv-4711-37 --bcombo P-101 --smooth 3 --mask-out-stars --star-mask-threshold 2 --subtract-bg
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-P-101-ar-iv-4711-37.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
python ../../scripts/compare-two-maps.py --line cl-iv-7530-8 --bcombo E-007 --smooth 3 --mask-out-stars --star-mask-threshold 2  --subtract-bg
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-E-007-cl-iv-7530-8.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
python ../../scripts/compare-two-maps.py --line cl-iv-7530-8 --bcombo P-101 --smooth 3 --mask-out-stars --star-mask-threshold 2  --subtract-bg
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-P-101-cl-iv-7530-8.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
python ../../scripts/compare-two-maps.py --line fe-iii-4658-10 --bcombo P-101 --smooth 3 --mask-out-stars --star-mask-threshold 2 --subtract-bg
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-P-101-fe-iii-4658-10.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
python ../../scripts/compare-two-maps.py --line o-i-8446-48 --bcombo E-007 --smooth 3 --mask-out-stars --star-mask-threshold 10 --subtract-bg
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-E-007-o-i-8446-48.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
python ../../scripts/compare-two-maps.py --line o-i-8446-48 --bcombo P-101 --smooth 3 --mask-out-stars --star-mask-threshold 10 --subtract-bg
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-P-101-o-i-8446-48.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
python ../../scripts/compare-two-maps.py --line uil-8150-72 --bcombo E-007 --smooth 3 --mask-out-stars --star-mask-threshold 10 --subtract-bg
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-E-007-uil-8150-72.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
python ../../scripts/compare-two-maps.py --line uil-8150-72 --bcombo P-101 --smooth 3 --mask-out-stars --star-mask-threshold 10 --subtract-bg
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-P-101-uil-8150-72.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
  python ../../scripts/compare-two-maps.py --line o-iii-5006-84 --bcombo E-007 --smooth 0 --mask-out-stars --star-mask-threshold 10
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-E-007-o-iii-5006-84.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
  python ../../scripts/compare-two-maps.py --line s-ii-6730-816 --bcombo E-007 --smooth 0 --mask-out-stars --star-mask-threshold 10
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-E-007-s-ii-6730-816.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
  python ../../scripts/compare-two-maps.py --line s-ii-6730-816 --bcombo P-101 --smooth 0 --mask-out-stars --star-mask-threshold 10
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-P-101-s-ii-6730-816.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
  python ../../scripts/compare-two-maps.py --line o-iii-5006-84 --bcombo P-101 --smooth 0 --mask-out-stars --star-mask-threshold 10
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-P-101-o-iii-5006-84.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
  python ../../scripts/compare-two-maps.py --line h-i-4861-32 --bcombo E-007 --smooth 0 --mask-out-stars --star-mask-threshold 10
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-E-007-h-i-4861-32.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
  python ../../scripts/compare-two-maps.py --line h-i-4861-32 --bcombo P-101 --smooth 0 --mask-out-stars --star-mask-threshold 10
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-P-101-h-i-4861-32.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
  python ../../scripts/compare-two-maps.py --line h-i-8665-02 --bcombo P-101 --smooth 0 --mask-out-stars --star-mask-threshold 10
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-P-101-h-i-8665-02.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
  python ../../scripts/compare-two-maps.py --line h-i-8750-47 --bcombo E-007 --smooth 0 --mask-out-stars --star-mask-threshold 10
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-E-007-h-i-8750-47.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
  python ../../scripts/compare-two-maps.py --line h-i-8750-47 --bcombo P-101 --smooth 0 --mask-out-stars --star-mask-threshold 10
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-P-101-h-i-8750-47.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
  python ../../scripts/compare-two-maps.py --line h-i-8862-79 --bcombo P-101 --smooth 0 --mask-out-stars --star-mask-threshold 10
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-P-101-h-i-8862-79.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
  python ../../scripts/compare-two-maps.py --line h-i-9014-91 --bcombo P-101 --smooth 0 --mask-out-stars --star-mask-threshold 10
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-P-101-h-i-9014-91.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
  python ../../scripts/compare-two-maps.py --line h-i-9229-01 --bcombo E-007 --smooth 0 --mask-out-stars --star-mask-threshold 10
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-E-007-h-i-9229-01.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
  python ../../scripts/compare-two-maps.py --line h-i-9229-01 --bcombo P-101 --smooth 0 --mask-out-stars --star-mask-threshold 10
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-P-101-h-i-9229-01.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
  python ../../scripts/compare-two-maps.py --line ar-iii-7135-78 --bcombo E-007 --smooth 0 --mask-out-stars --star-mask-threshold 10
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-E-007-ar-iii-7135-78.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
  python ../../scripts/compare-two-maps.py --line ar-iii-7135-78 --bcombo P-101 --smooth 0 --mask-out-stars --star-mask-threshold 10
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-P-101-ar-iii-7135-78.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
  python ../../scripts/compare-two-maps.py --line s-iii-6312-06 --bcombo  E-007 --smooth 0 --mask-out-stars --star-mask-threshold 10
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-E-007-s-iii-6312-06.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
  python ../../scripts/compare-two-maps.py --line s-iii-6312-06 --bcombo P-101 --smooth 0 --mask-out-stars --star-mask-threshold 10
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-P-101-s-iii-6312-06.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
  python ../../scripts/compare-two-maps.py --line s-iii-9068-90 --bcombo P-101 --smooth 0 --mask-out-stars --star-mask-threshold 10
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-P-101-s-iii-9068-90.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
  python ../../scripts/compare-two-maps.py --line he-i-6678-15 --bcombo P-101 --smooth 0 --mask-out-stars --star-mask-threshold 10
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-P-101-he-i-6678-15.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
  python ../../scripts/compare-two-maps.py --line he-i-5875-62 --bcombo P-101 --smooth 0 --mask-out-stars --star-mask-threshold 10
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-P-101-he-i-5875-62.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
python ../../scripts/compare-two-maps.py --line si-iii-5739-73 --bcombo E-007 --smooth 9 --mask-out-stars --star-mask-threshold 2
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-E-007-si-iii-5739-73.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results file
python ../../scripts/compare-two-maps.py --line si-iii-5739-73 --bcombo P-101 --smooth 9 --mask-out-stars --star-mask-threshold 2
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-bow-lines/maps-compare/P-007-P-101-si-iii-5739-73.pdf]]

#+begin_src sh :dir ../data/n346-bow-lines :results verbatim
python ../../scripts/compare-two-maps.py --help 
#+end_src

#+RESULTS:
#+begin_example
                                                                                
 Usage: compare-two-maps.py [OPTIONS]                                           
                                                                                
╭─ Options ────────────────────────────────────────────────────────────────────╮
│ --acombo                                        TEXT   [default: P-007]      │
│ --bcombo                                        TEXT   [default: E-007]      │
│ --line                                          TEXT   [default:             │
│                                                        h-i-6562-79]          │
│ --histogram-gamma                               FLOAT  [default: 2.0]        │
│ --smooth                                        FLOAT  [default: 0.0]        │
│ --mask-out-stars         --no-mask-out-stars           [default:             │
│                                                        no-mask-out-stars]    │
│ --star-mask-threshold                           FLOAT  [default: 10.0]       │
│ --star-map-path                                 PATH   [default:             │
│                                                        /Users/will/Dropbox/… │
│ --help                                                 Show this message and │
│                                                        exit.                 │
╰──────────────────────────────────────────────────────────────────────────────╯

#+end_example

