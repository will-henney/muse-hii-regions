* DONE Automatic line finding
CLOSED: [2023-05-27 Sat 20:37]
:PROPERTIES:
:header-args:sh: :results output verbatim :dir ../scripts
:EXPORT_FILE_NAME: ngc-346-drl-analysis-steps
:END:
- Started work on this [2022-10-04 Tue]
  - Early tests and proof of concept in notebook
    - [[file:../notebooks/ngc346-new/02-find-peaks.ipynb]]
    - [[file:../notebooks/ngc346-new/02-find-peaks.py]]
  - Also relevant is all the work on extracting spectra in
    - [[file:../notebooks/ngc346-new/00-check-peter-cube.ipynb]]
    - [[file:../notebooks/ngc346-new/00-check-peter-cube.py]]
- General approach here is to split up functionality from notebook into independent scripts, and make sure that intermediate results are stored
- Scripts should be python files in [[file:../scripts/]], either directly written or tangled from this file
** Overview of tasks to re-run after changes
*** After editing the Google Sheet
:PROPERTIES:
:ID:       6CFEDC5E-0616-426F-8ABD-6C72C5BFC55E
:END:
1. Download as Excel format
2. Copy to the folder [[file:../data/spec1d/]]
3. Rename to use dashes instead of spaces: All-Lines-MUSE-NGC-346.xlsx
4. To be on the safe side, remove the old YAML files from  [[file:../data/n346-lines/all-lines-orig/]]
   - Especially important if indices have changed
5. Regenerate the little YAML files in [[file:../data/n346-lines/all-lines-orig/]]
   - See [[id:BCD6CB93-FC5E-4CFE-81DC-047BDCE13BCF][Run the spreadsheet conversion script]]
6. Regenerate the mask file
   - See [[id:41FC5AA8-E3FD-4379-B839-12CCE0FF8460][Make a mask of all the line pixels and their neighbors, so we can avoid them when finding the BG level]]
7. Now we can calculate the line strengths from the zones that we want, for the spectra that we have generated.
   - This is in [[id:1DC91A25-4620-44FB-90F5-7AE750CE26F3][Step 7: Sum each line for each map zone]]
   - Best to remove the YAML files first if indices have changed
   - For example, [[id:C597528A-4D58-439C-99B3-EA227BAED261][run line-bright-all-zones.py]] on the relevant folder such as [[file:../data/n346-lines/all-lines-c007-chop-mean/][all-lines-c007-chop-mean]]
     - This is the slowest step, which takes just over a minute on my laptop
8. Now we can carry on with calculating the ratios, etc. in steps 8 and onwards
   - [[id:E5A865EF-2A09-4BE9-891B-617EA2E8A6CB][Run make-line-flux-table.py]] to write CSV files like ~line-gauss-fluxes.csv~ that have fluxes normalized to H beta
   - Make figures, in particular ~plot-ratios-vs-ratios-by-zone.py~
     - Done here [[id:16E007EA-F0D2-4AC5-A53E-0CC153767167][More elaborate plot of ratio versus ratio]]
     - There is a version with th gauss fits and with the 3 pixel counting method
   - Then we have to import the raw figure into the annotated version that I do with Affinity Designer
   - Write tables with the ratios
9. Rest wavelengths and velocity shifts
   - Run all the scripts in [[id:046007F7-309C-4517-996C-26013838FB37][Step 9: Calculate the velocity shifts for the known lines, and hence get the rest wavelengths of the UILs]]
10. Redo the 1d spectra figures
11. Redo figure 1 with the line distribution
12. Redo analysis of nearest-neighbor distribution
*** After changing the zones definitions
To be written

** DONE Step -1: Do the continuum subtraction
CLOSED: [2022-10-27 Thu 07:56]
- This is done in a two-pass filtering with intermediate shaving of emission lines
- Uses the program [[file:../lib/median_continuum.py]]
- Run it in  terminal because it can take a long time
- Example
  #+begin_example
    $ time python ../../lib/median_continuum.py --two-pass --out-prefix n346-muse-2pass 501
    python ../../lib/median_continuum.py --two-pass --out-prefix n346-muse-2pass   2091.67s user 36.80s system 99% cpu 35:40.92 total
  #+end_example
- Windows that we have tried:
  - 11
  - 101
  - 501
  - 7
- The smaller windows do best for removing the stellar features, which tend to be broader
- But the 501 window is necessary to see the Raman wings
** DONE [1/1] Step 0: prepare 1D spectra
CLOSED: [2022-10-06 Thu 23:14]
- We can use different samples to get a range of physical conditions
- So far I have
  - The whole cube with masked out stars
  - The region of YSO-C
- I should also do
  - The bow shock
  - One or more samples for the neutral filaments and globules
- Question is, should I background-subtract these or not? Probably not necessary
- It might be easier to just write out spectra once and for all for all the regions
- [X] First, I should combine the regions into one file
  - Actually, there is no need to do this, since the program to make the 1d spectra is accumulatiive
*** Script to extract 1D spectra for each region
:PROPERTIES:
:ID:       7876F071-7C10-45A1-9BE1-3330A523CE6B
:END:


#+begin_src python :tangle ../scripts/extract-region-spectra.py 
  from typing import Union
  from pathlib import Path
  import numpy as np
  from mpdaf.obj import Cube, Spectrum, Image
  import typer
  import regions as rg
  import slugify

  def get_spectrum_from_region(
          cube: Cube,
          region: Union[rg.PixelRegion, rg.SkyRegion],
          reduction_method: callable = np.nanmean,
          extra_image_mask: Union[np.ndarray, None] = None,
          debug: bool = False,
  ) -> Spectrum:
      """Extract 1D spectrum from region in an efficient way"""
      try:
          region_mask = region.to_mask()
      except AttributeError:
          region_mask = region.to_pixel(cube.wcs.wcs).to_mask()
      nv, ny, nx = cube.shape
      if extra_image_mask is not None:
          assert extra_image_mask.shape == (ny, nx)
      # Slices into 2D arrays
      slices_large, slices_small = (
          region_mask
          .get_overlap_slices((ny, nx))
      )
      if debug:
          print('2D slice:', slices_large)
      slices_cube = (slice(None, None),) + slices_large
      image_mask_large = region_mask.to_image((ny, nx))
      if extra_image_mask is not None:
          # extra_image_mask should be true for pixels that we want to
          # include
          image_mask_large[~extra_image_mask] = np.nan

      image_mask_small = image_mask_large[slices_large]
      cube_cutout = cube.data[slices_cube]
      cube_cutout[cube.mask[slices_cube]] = np.nan
      spec = reduction_method(
          cube_cutout * image_mask_small[None, :, :],
          axis=(1, 2),
      )
      return Spectrum(wave=cube.wave, data=spec, unit=cube.unit)


  def main(
          region_file: str,
          cube_file: str,
          out_prefix: str="spec1d/n346",
          exclude_mask_file: Union[str, None]=typer.Option(
              None,
              help=("Optional file with image to mask out data. "
                    "Only pixels with zero will be included.")
          ),
  ):
      """Extract 1D spectra from cube for each region in file"""

      sky_regions = rg.Regions.read(region_file)
      region_dict = {reg.meta["label"]: reg for reg in sky_regions}

      cube = Cube(cube_file)

      # Set the extra image mask to be true where the exclude_mask_file
      # image is zero
      if exclude_mask_file is not None:
          extra_image_mask = np.where(
              Image(exclude_mask_file).data == 0.0,
              True,
              False
          )
      else:
          extra_image_mask = None

      # Now do the work to get the spectra
      spec_dict = {
          label: get_spectrum_from_region(
              cube, reg, extra_image_mask=extra_image_mask)
          for label, reg in region_dict.items()
      }

      # Make sure the output folder exists
      Path(out_prefix).parent.mkdir(parents=True, exist_ok=True)
      # And save each spectrum as a separate FITS file
      for label, spec in spec_dict.items():
          label_string = slugify.slugify(label)
          spec.write(
              str(f"{out_prefix}-{label_string}.fits"))


  if __name__ == "__main__":
      typer.run(main)

#+end_src


**** Usage of script
Note setting of ~COLUMNS~ to make sure output is not too wide
#+header: :prologue "COLUMNS=60 exec 2>&1" :epilogue ":"
#+begin_src sh
  python extract-region-spectra.py --help
#+end_src

#+RESULTS:
#+begin_example
Usage: extract-region-spectra.py [OPTIONS] REGION_FILE
                                 CUBE_FILE

  Extract 1D spectra from cube for each region in file

Arguments:
  REGION_FILE  [required]
  CUBE_FILE    [required]

Options:
  --out-prefix TEXT         [default: spec1d/n346]
  --exclude-mask-file TEXT  Optional file with image to
                            mask out data. Only pixels
                            with zero will be included.

  --install-completion      Install completion for the
                            current shell.

  --show-completion         Show completion for the
                            current shell, to copy it or
                            customize the installation.

  --help                    Show this message and exit.
#+end_example

**** DONE Runs with the star mask
- Note that the original star mask was calculated in [[file:../notebooks/ngc346-new/00-check-peter-cube.py]] and corresponds to
  : ha_frac < 0.04
  where ~ha_frac~ is cont-subtracted Ha line flux divided by continuum. Supposedly, this corresponds to an equivalent width less than about 190 \AA
- We could probably make some better ones, or at least, more flexible
  
CLOSED: [2022-10-06 Thu 23:13]
#+begin_src sh :dir ../data
  time python ../scripts/extract-region-spectra.py \
       ngc346-extra-icrs.reg \
       ../big-data/ngc346new/n346-muse-csub-101.fits \
       --out-prefix spec1d/n346-nostar \
       --exclude-mask-file n346-mask-stars.fits 
#+end_src




**** DONE Runs without any star mask
CLOSED: [2022-10-06 Thu 18:36]
#+begin_src sh :dir ../data
  time python ../scripts/extract-region-spectra.py \
       ngc346-jesus-icrs.reg \
       ../big-data/ngc346new/n346-muse-csub-101.fits \
       --out-prefix spec1d/n346-all
#+end_src

And a similar one for ~ngc346-extra-icrs.reg~. These gave the following:
#+begin_src sh :dir ../data
ls spec1d/n346-all-*.fits
#+end_src

#+RESULTS:
#+begin_example
spec1d/n346-all-bs-bg.fits
spec1d/n346-all-bs.fits
spec1d/n346-all-fil-b-bg.fits
spec1d/n346-all-fil-b.fits
spec1d/n346-all-fil-bg.fits
spec1d/n346-all-fil-c-bg.fits
spec1d/n346-all-fil-c.fits
spec1d/n346-all-fil-d-bg.fits
spec1d/n346-all-fil-d.fits
spec1d/n346-all-fil.fits
spec1d/n346-all-glob-b-bg.fits
spec1d/n346-all-glob-b.fits
spec1d/n346-all-glob-bg.fits
spec1d/n346-all-glob-c-bg.fits
spec1d/n346-all-glob-c.fits
spec1d/n346-all-glob-d-bg.fits
spec1d/n346-all-glob-d.fits
spec1d/n346-all-glob-e-bg.fits
spec1d/n346-all-glob-e.fits
spec1d/n346-all-glob-f-bg.fits
spec1d/n346-all-glob-f.fits
spec1d/n346-all-glob-g-bg.fits
spec1d/n346-all-glob-g.fits
spec1d/n346-all-glob.fits
spec1d/n346-all-mip-b-bg.fits
spec1d/n346-all-mip-b.fits
spec1d/n346-all-mip-bg.fits
spec1d/n346-all-mip.fits
spec1d/n346-all-neut-b-bg.fits
spec1d/n346-all-neut-b.fits
spec1d/n346-all-neut-bg.fits
spec1d/n346-all-neut-c-bg.fits
spec1d/n346-all-neut-c.fits
spec1d/n346-all-neut-d-bg.fits
spec1d/n346-all-neut-d.fits
spec1d/n346-all-neut.fits
spec1d/n346-all-yso-bg.fits
spec1d/n346-all-yso.fits
#+end_example

*** Inspect the 1d spectra results
:PROPERTIES:
:ID:       E860E6DE-06FD-4DC2-AA8E-9869D5112ADB
:END:
- The following script graphs a comparison of the extracted spectrum from a single region, comparing the result with/without (blue/orange) the star mask and then the BG (blue) and BG-subtracted (red) spectra
- I make it a very long strip in the wavelength (x) axis.
- The y-axis is on a ~symlog~ scale, so as to the high peaks but still show the weak emission and absorption  features
  - The parameter ~linthresh~ specifies how much of the range is linear
  - 
#+begin_src python :tangle ../scripts/spec1d-compare.py
  from mpdaf.obj import Spectrum
  from matplotlib import pyplot as plt
  from matplotlib.ticker import MaxNLocator
  import typer

  def main(region: str, linthresh: float=20.0):
      """Comparison plot of with/without stars, plus BG"""
      fig, ax = plt.subplots(figsize=(50, 3))
      figfile = f"spec1d-compare-{region}.pdf"
      spec = Spectrum(f"n346-nostar-{region}.fits")
      spec_nomask = Spectrum(f"n346-all-{region}.fits")
      spec_bg = Spectrum(f"n346-nostar-{region}-bg.fits")
      spec_bgsub = spec - spec_bg
      spec.plot(label="star mask", linewidth=2)
      spec_nomask.plot(label="no mask", linewidth=1)
      spec_bg.plot(label="BG star mask", linewidth=0.5)
      spec_bgsub.plot(label="BG-subtracted", linewidth=0.5)
      ax.legend(ncol=4)
      ax.minorticks_on()
      ax.grid(which="major", linewidth=0.5)
      ax.grid(which="minor", linewidth=0.2)
      ax.set_yscale("symlog", linthresh=linthresh)
      ax.xaxis.set_major_locator(MaxNLocator(100))
      fig.tight_layout()
      fig.savefig(figfile)
      print(figfile, end="")


  if __name__ == "__main__":
      typer.run(main)

#+end_src

#+RESULTS:


#+begin_src sh :dir ../data/spec1d :results output file
python ../../scripts/spec1d-compare.py glob-c
#+end_src


#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/spec1d/spec1d-compare-glob-c.pdf]]

#+begin_src sh :dir ../data/spec1d :results output file
python ../../scripts/spec1d-compare.py bs
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/spec1d/spec1d-compare-bs.pdf]]

#+begin_src sh :dir ../data/spec1d :results output file
python ../../scripts/spec1d-compare.py fil --linthresh=2.0
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/spec1d/spec1d-compare-fil.pdf]]

#+begin_src sh :dir ../data/spec1d :results output file
python ../../scripts/spec1d-compare.py fil-c --linthresh=2.0
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/spec1d/spec1d-compare-fil-c.pdf]]

#+begin_src sh :dir ../data/spec1d :results output file
python ../../scripts/spec1d-compare.py fil-b --linthresh=10.0
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/spec1d/spec1d-compare-fil-b.pdf]]

#+begin_src sh :dir ../data/spec1d :results output file
python ../../scripts/spec1d-compare.py glob --linthresh=10.0
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/spec1d/spec1d-compare-glob.pdf]]

#+begin_src sh :dir ../data/spec1d :results output file
python ../../scripts/spec1d-compare.py neut --linthresh=10.0
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/spec1d/spec1d-compare-neut.pdf]]

#+begin_src sh :dir ../data/spec1d :results output file
python ../../scripts/spec1d-compare.py yso --linthresh=100.0
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/spec1d/spec1d-compare-yso.pdf]]

#+begin_src sh :dir ../data/spec1d :results output file
  python ../../scripts/spec1d-compare.py glob-e --linthresh=10.0
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/spec1d/spec1d-compare-glob-e.pdf]]

** DONE Step 1: identify peaks
CLOSED: [2022-10-08 Sat 22:32]
- This uses ~scipy.signal.find_peaks()~
- Various parameters can be tweaked
  - ~prominence~ is height above local baseline
    - Calculated with respect to the higher of the two bases, which are the minima on each of the two sides
    - The positions of the bases are returned as ~right_bases~, ~left_bases~
  - ~distance~ is minimum horizontal distance between peaks in pixels
  - ~width~ is the full width at half-maximum prominence (by default, but can be changed with ~rel_height~ argument)
    - The interpolated positions of the half-maximum points are returned as ~left_ips~ and ~right_ips~
    - In principal, we could use these to look at the asymmetry of the peak
  - Others, that we haven't used yet:
    - ~height~, ~threshold~, 


*** Script to identify all peaks in spectrum
#+begin_src python :tangle ../scripts/spec1d-find-peaks.py
  from mpdaf.obj import Spectrum
  import numpy as np
  import scipy.signal as si
  from  astropy.table import Table
  import typer

  def fmt_float(x):
      return f"{int(10*x):04d}"


  def main(
          spec_file: str,
          min_prominence: float=3.0,
          min_distance: float=3.0,
  ):
      """Find peaks in a 1D spectrum"""
      assert spec_file.endswith(".fits")
      spec = Spectrum(spec_file)
      # Find pixel positions of peaks
      peaks, props = si.find_peaks(
          spec.data,
          prominence=min_prominence,
          distance=min_distance,
          # FWHM must be between 2 and 10 pixels to allow blends
          width=(1.5, 10.0),
      )
      # Convert to wavelengths
      waves = spec.wave.coord()[peaks]
      # Make a table of the results
      tab = Table(
          {"Wavelength": waves, "Pixel": peaks, **props}
      )
      # Do not use too many decimal places for the float columns
      for col in [
              "Wavelength", "prominences", "widths",
              "width_heights", "left_ips", "right_ips",
      ]:
          tab[col] = np.round(tab[col], 4)
      # And save it as CSV format
      suffix = ("-peaks"
                f"-p{fmt_float(min_prominence)}"
                f"-d{fmt_float(min_distance)}.csv")
      tab_file = spec_file.replace(".fits", suffix)
      tab.write(tab_file, format="ascii.ecsv", overwrite=True)
      print(tab_file)



  if __name__ == "__main__":
      typer.run(main)

#+end_src


**** Usage for spec1d-find-peaks.py script
#+header: :prologue "COLUMNS=60 exec 2>&1" :epilogue ":"
#+begin_src sh 
python spec1d-find-peaks.py --help
#+end_src

#+RESULTS:
#+begin_example
Usage: spec1d-find-peaks.py [OPTIONS] SPEC_FILE

  Find peaks in a 1D spectrum

Arguments:
  SPEC_FILE  [required]

Options:
  --min-prominence FLOAT  [default: 3.0]
  --min-distance FLOAT    [default: 3.0]
  --install-completion    Install completion for the
                          current shell.

  --show-completion       Show completion for the current
                          shell, to copy it or customize
                          the installation.

  --help                  Show this message and exit.
#+end_example

*** Use script to identify lines from different regions

**** Utility function to convert from observed wavelength to rest wavelength
- I set this up as a named source block, so I can call it as a function.
  - The first argument is the observed wavelength.
  - The second argument is the assumed systemic velocity
    - (default of 170 km/s should be close enough for all regions in  NGC 346 field)
      
#+name: rest
#+begin_src python :var wave=6000.0 vsys=170.0 :return rslt
rslt = round(wave / (1.0 + vsys / 3e5), 3)
#+end_src

Example of calling the function inline: call_rest(7000) {{{results(=6996.036=)}}}

Example of calling in block

#+call: rest(4688.69482421875)

#+RESULTS:
: 4686.039

**** Bow shock region
- We use the default parameters, which includes a minimum prominence of 3.0
  - I am hoping that this will be low enough to get all the real lines, but high enough to avoid detecting noise peaks
  - Update [2022-10-08 Sat]: Since we failed to detect a weak [K IV] line I knew should be there, I have run it again with a lower minimum prominence
  - This has now found all the lines I think, but there are also a lot of spurious lines that need to be weeded out
    
#+begin_src sh :dir ../data/spec1d 
python ../../scripts/spec1d-find-peaks.py n346-nostar-bs.fits  --min-prominence 1.0
#+end_src

#+RESULTS:
: n346-nostar-bs-peaks-p0010-d0030.csv

- With minimum prominence of 3, this has found 101 lines in all
  - Fewer than before, now that I have put restrictions on the width
- With minimum prominence of 1.0, it has found 241 lines
- Let's look at the first few and calculate the rest wavelengths
  - call_rest(4643.6948) {{{results(=4641.065=)}}}
    - This is first of several weak lines, which may or may not be real
    - Maybe it is O II 4641.81, but the wavelength is off by nearly an angstrom, although we would have to look at the mean wavelength to get a more precise estimate
    - It is a particularly broad line: 4.4 pixels, presumably because it is a blend with N II and N III, as in Orion. 
    - Note that the bg-subtracted spectrum in this wave range has some spurious lines, which are due to absorption features in the BG spectrum
      - Maybe we could fix this by moving the bg region a bit
  - call_rest(4652.4448) {{{results(=4649.81=)}}}
    - This is certainly O II 4650
  - call_rest(4688.6948) {{{results(=4686.039=)}}}
    - This one is clearly He II
- Now look for some of the lines that we are expecting
  - call_rest(6104.9448) {{{results(=6101.487=)}}}
    - Clearly a [K IV] line
      : LAB-WAVL-ANG-AIR-|-SPC--|TT|-CONFIGURATION-|TERM-|J_i-J_k|--A_ki---|-TPF-|---LVL-EN--CM-1---|-REF---|
      : 6101.79         [K IV] M1 3s2.3p4-3s2.3p4 3P-1D  2 - 2                     0.00 - 16384.10 029,ASD
      : 6795.1          [K IV] M1 3s2.3p4-3s2.3p4 3P-1D  1 - 2  2.010e-01   ASD 1671.70 - 16384.10 029,ASD
      : 7108.9          [K IV] E2 3s2.3p4-3s2.3p4 3P-1D  0 - 2                  2321.20 - 16384.10 ASD
    - However, we do not find the 6795.1 counterpart at this level, so I will try again with a lower minimum prominence
  - call_rest(6798.6948) {{{results(=6794.844=)}}}
    - /Hurray!/ Now we have found the other [K IV] multiplet component
    - Prominence: 1.0637
      - so that is very close to the cut-off
      - still, this is just about the weakest high ionization line that I am expecting
- And other random samples of the lines
  - call_rest(6829.9448) {{{results(=6826.077=)}}}
    - This is the next one after that [K IV] line.
    - I had expected it to be He I 6827.97 but the wavelength is way off.
    - Does not even match [Kr III] 6826.7 very well, but it could be that, given the uncertainties
  - call_rest(6871.1948) {{{results(=6867.303=)}}}
    - This is in a region affected by telluric O_{2} absorption, so probably spurious
  - call_rest(6948.6948) {{{results(=6944.759=)}}}
    - This is outside the telluric range, but is probably a sky emission line
  - call_rest(7174.9448) {{{results(=7170.881=)}}}
    - Looks real, could it really be [Fe II]?
    - NO, this is an [Ar IV] 7170.5 line, which we were expecting
    - Prominence: 3.1
  - call_rest(7241.1948) {{{results(=7237.094=)}}}
    - This is the other [Ar IV] 7237.4 line
    - Prominence: 4.34
  - call_rest(7267.4448) {{{results(=7263.329=)}}}
    - This is the third [Ar IV] 7262.7 line
    - Prominence: 3.21
  - call_rest(7334.9448) {{{results(=7330.791=)}}}
    - Prominence: 41.2
    - This is mainly the [O II] 7330.73 line
    - Which is why we do not see the [Ar IV] 7331.4 line, although it must be contributing at the 10% level
  - call_rest(7246.1948) {{{results(=7242.091=)}}}
    - Prominence: 1.94
    - I am not sure what this is, maybe sky
  - call_rest(7277.4448) {{{results(=7273.323=)}}}
    - Prominence: 5.86
    - Also probably sky
  - call_rest(7284.9448) {{{results(=7280.819=)}}}
    - Prominence: 30.9
    - Certainly He I 7281.35
  - call_rest(7534.9448) {{{results(=7530.677=)}}}
    - Prominence: 6.66
    - Certainly [Cl IV] 7530.80

**** Globule region

- [2022-10-08 Sat] To get most of the interesting neutral lines, it is necessary to reduce the prominence threshold a bit. I will try 1.0
#+begin_src sh :dir ../data/spec1d 
    python ../../scripts/spec1d-find-peaks.py n346-nostar-glob.fits --min-prominence 1.0
#+end_src

#+RESULTS:
: n346-nostar-glob-peaks-p0010-d0030.csv

Let's look at the range around Ha, where I  know there should be some lines

- call_rest(6633.6948) {{{results(=6629.938=)}}}
- call_rest(6641.1948) {{{results(=6637.434=)}}}
  - This and the previous one are the ones that flank the Raman absorption feature
- call_rest(6648.6948) {{{results(=6644.929=)}}}
- call_rest(6659.9448) {{{results(=6656.173=)}}}

#+begin_src sh :dir ../data/spec1d 
    python ../../scripts/spec1d-find-peaks.py n346-nostar-glob-e.fits --min-prominence 0.2
#+end_src

#+RESULTS:
: n346-nostar-glob-e-peaks-p0002-d0030.csv

**** Filament regions
#+begin_src sh :dir ../data/spec1d 
    python ../../scripts/spec1d-find-peaks.py n346-nostar-fil.fits --min-prominence 0.2
#+end_src

#+RESULTS:
: n346-nostar-fil-peaks-p0002-d0030.csv

I had to reduce the minimum prominence to 0.3, but this gave me 372 lines.

#+begin_src sh :dir ../data/spec1d 
    python ../../scripts/spec1d-find-peaks.py n346-nostar-fil-d.fits --min-prominence 0.2
#+end_src

#+RESULTS:
: n346-nostar-fil-d-peaks-p0002-d0030.csv

#+begin_src sh :dir ../data/spec1d 
    python ../../scripts/spec1d-find-peaks.py n346-nostar-fil-b.fits --min-prominence 0.2
#+end_src

#+RESULTS:
: n346-nostar-fil-b-peaks-p0002-d0030.csv

**** Neutral regions


#+begin_src sh :dir ../data/spec1d 
    python ../../scripts/spec1d-find-peaks.py n346-nostar-neut.fits --min-prominence 0.2
#+end_src

#+RESULTS:
: n346-nostar-neut-peaks-p0002-d0030.csv


**** YSO
#+begin_src sh :dir ../data/spec1d 
    python ../../scripts/spec1d-find-peaks.py n346-nostar-yso.fits --min-prominence 1.0
#+end_src

#+RESULTS:
: n346-nostar-yso-peaks-p0010-d0030.csv

*** Plot identified lines on top of the spectrum
:PROPERTIES:
:ID:       BB8006B6-5B0F-487E-B35D-606D26B5C24F
:END:
#+begin_src python :tangle ../scripts/spec1d-plot-peaks.py
  from mpdaf.obj import Spectrum
  from astropy.table import Table
  from matplotlib import pyplot as plt
  from matplotlib.ticker import MaxNLocator
  import typer

  def main(
          region: str,
          peak_suffix: str="p0010-d0030",
          linthresh: float=20.0,
  ):
      """Plot of spectra with identified peaks"""
      fig, ax = plt.subplots(figsize=(50, 3))
      figfile = f"spec1d-peaks-{region}-{peak_suffix}.pdf"


      spec = Spectrum(f"n346-nostar-{region}.fits")
      spec_bg = Spectrum(f"n346-nostar-{region}-bg.fits")
      spec.plot(label=region, linewidth=1)
      spec_bg.plot(label=f"{region} BG", linewidth=0.5)

      tab = Table.read(
          f"n346-nostar-{region}-peaks-{peak_suffix}.csv",
          format="ascii.ecsv",
      )
      ax.scatter("Wavelength", "prominences", data=tab,
                 marker="x", color="r", s=15)
      ax.legend(ncol=4)
      ax.minorticks_on()
      ax.grid(which="major", linewidth=0.5)
      ax.grid(which="minor", linewidth=0.2)
      ax.set_yscale("symlog", linthresh=linthresh)
      ax.xaxis.set_major_locator(MaxNLocator(100))
      fig.tight_layout()
      fig.savefig(figfile)
      print(figfile, end="")


  if __name__ == "__main__":
      typer.run(main)

#+end_src

#+begin_src sh :dir ../data/spec1d :results output file
python ../../scripts/spec1d-plot-peaks.py glob --linthresh=1.0
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/spec1d/spec1d-peaks-glob-p0010-d0030.pdf]]

#+begin_src sh :dir ../data/spec1d :results output file
python ../../scripts/spec1d-plot-peaks.py bs --linthresh=1.0
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/spec1d/spec1d-peaks-bs-p0010-d0030.pdf]]

#+begin_src sh :dir ../data/spec1d :results output file
python ../../scripts/spec1d-plot-peaks.py fil --peak-suffix p0002-d0030 --linthresh=1.0
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/spec1d/spec1d-peaks-fil-p0002-d0030.pdf]]

#+begin_src sh :dir ../data/spec1d :results output file
python ../../scripts/spec1d-plot-peaks.py fil-d --peak-suffix p0002-d0030 --linthresh=1.0
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/spec1d/spec1d-peaks-fil-d-p0002-d0030.pdf]]

#+begin_src sh :dir ../data/spec1d :results output file
python ../../scripts/spec1d-plot-peaks.py glob-e --peak-suffix p0002-d0030 --linthresh=1.0
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/spec1d/spec1d-peaks-glob-e-p0002-d0030.pdf]]

#+begin_src sh :dir ../data/spec1d :results output file
python ../../scripts/spec1d-plot-peaks.py neut --peak-suffix p0002-d0030 --linthresh=1.0
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/spec1d/spec1d-peaks-neut-p0002-d0030.pdf]]

#+begin_src sh :dir ../data/spec1d :results output file
python ../../scripts/spec1d-plot-peaks.py fil-b --peak-suffix p0002-d0030 --linthresh=1.0
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/spec1d/spec1d-peaks-fil-b-p0002-d0030.pdf]]

#+begin_src sh :dir ../data/spec1d :results output file
python ../../scripts/spec1d-plot-peaks.py YSO --peak-suffix p0010-d0030 --linthresh=10.0
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/spec1d/spec1d-peaks-YSO-p0010-d0030.pdf]]


** DONE Step 2: extract line maps
CLOSED: [2022-10-25 Tue 08:20]
- We can extract the 3 pixels around the peak
- Maybe use the 3-wav method that I developed earlier
  - That can give correction to line flux for the missing wings
- At the same time, we can calculate the true mean wavelength for each


*** DONE [1/1] Comments and plans for the line maps
CLOSED: [2022-10-25 Tue 08:20]
- [2022-10-09 Sun] First attempt - works pretty well
- [X] Things to improve
  - [X] Get a better-curated list of lines by combining several of the glob and fil regions, although glob-e is working pretty wellf
    - I have added in some from YSO and some by hand
  - [X] Increase the maximum width allowed, since I think we are missing some lines that might be blends, for instance 7221
  - [X] Better scaling of the image brightness. Currently, we are using the prominence in the particular region, but we could try using the median and mad of the image itself
    - We used percentile instead
  - [X] Maybe try subtracting the hyper-local "continuum" by using the left_bases and right_bases values.
    - Although this might increase the noise
    - But it might improve the weak lines near Ha, which are currently affected by the Raman wings, which makes us see the neutral filaments in negative
    - And the same thing happens around the Paschen jump
    - Yes, this worked
  - [X] Better color scheme. Choose a key color for each plot, based on the wavelength of the line, and then make a seaborn color palette based on that
  - [X] Use a more aggressive star mask, to remove more pixels that might have starlight contamination. And also use a NaN color in keeping with the color scale, so that the masked pixels do not stand out so much
    - /This is postponed for now/ [2022-10-25 Tue]
  - 
*** Sum between bases of each identified line to extract images and plot them
#+begin_src python :tangle ../scripts/peak-image-plot.py
  from  typing import Union
  from mpdaf.obj import Spectrum, Cube, Image
  import numpy as np
  from astropy.table import Table
  from matplotlib import pyplot as plt
  from matplotlib.ticker import MaxNLocator
  from matplotlib.colors import to_hex
  from matplotlib.patches import BoxStyle
  import matplotlib
  import seaborn as sns
  import typer

  def corners_text(
          ax: matplotlib.axes.Axes,
          texts: tuple[str, str, str, str],
          pad: float=0.05,
          ,**kwds,
  ) -> None:
      """Write 4 texts to 4 corners of graph"""
      ax.text(pad, 1 - pad, texts[0],
              ha="left", va="top", transform=ax.transAxes, **kwds)
      ax.text(1 - pad, 1 - pad, texts[1],
              ha="right", va="top", transform=ax.transAxes, **kwds)
      ax.text(pad, pad, texts[2],
              ha="left", va="bottom", transform=ax.transAxes, **kwds)
      ax.text(1 - pad, pad, texts[3],
              ha="right", va="bottom", transform=ax.transAxes, **kwds)


  def main(
          cube_file: str,
          peak_file: str,
          star_mask_file: Union[str, None]=None,
          vsys: float=170.0,
          ncolumns: int=15,
          subtract_base: bool=False,
          wavelength_window_pad: float=1.5,
          scale_by_percentile: bool=True,
          use_rainbow_colors: bool=True,
          rainbow_saturation: float=95.0,
          rainbow_lightness: float=70.0,
          rainbow_blue_red: tuple[float, float]=(270.0, -45.0),
          extra_suffix: Union[str, None]=None,
  ):
      """Plot of images for each peak"""

      tab = Table.read(
          peak_file,
          format="ascii.ecsv",
      )
      cube = Cube(cube_file)
      if star_mask_file is not None:
          star_mask = Image(star_mask_file).data > 0.0

      nlines = len(tab)
      nrows = int(np.ceil(nlines / ncolumns))
      pane_size = 2
      fig, axes = plt.subplots(
          nrows, ncolumns,
          figsize=(ncolumns * pane_size, nrows * pane_size),
      )
      if extra_suffix is not None:
          suffix = peak_file.replace(".csv", f"-{extra_suffix}.pdf")
      else:
          suffix = peak_file.replace(".csv", ".pdf")
      figfile = f"peak-images-{suffix}"

      wavmin, wavmax = cube.wave.get_range()
      for row, ax in zip(tab, axes.flat):
          # Take the half-maximum wave range and expand it by the padding on both sides
          wav1 = cube.wave.coord(row["left_ips"]) - wavelength_window_pad
          wav2 = cube.wave.coord(row["right_ips"]) + wavelength_window_pad
          cube_window = cube.select_lambda(wav1, wav2)
          if subtract_base:
              # Subtract off average of channels from left and right bases
              ib1, ib2 = row["left_bases"], row["right_bases"],
              av_bases_image = 0.5 * (cube.data[ib1, :, :] + cube.data[ib2, :, :])
              cube_window.data -= av_bases_image[None, :, :]
          # Sum the window to get the extracted line image
          im = cube_window.sum(axis=0)
          if star_mask_file is not None:
              im.mask = im.mask | star_mask
          scale = row["prominences"]

          # For weak lines, rebin the pixels to get better s/n
          if scale < 0.5:
              im = im.rebin(8)
          elif scale < 2.0:
              im = im.rebin(4)
          elif scale < 8.0:
              im = im.rebin(2)

          # Brightness scaling
          if scale_by_percentile:
              # First, take 5th to 95th percentile span
              vmin, vmax = np.percentile(im.data[~im.mask], [5, 95])
              vspan = vmax - vmin
              # Then extend to by a certain fraction above and below
              vmin -= 0.0 * vspan
              vmax += 0.5 * vspan
          else:
              # If not using percentiles, just use the prominence data from find_peaks()
              vmin, vmax = -0.5*scale, 5*scale

          # Color map
          if use_rainbow_colors:
              # Fractional distance between blue and red ends of spectrum
              xwav = (row["Wavelength"] - wavmin) /  (wavmax - wavmin)
              # Convert to hue angle
              blue, red = rainbow_blue_red
              rainbow_hue = blue + (red - blue) * xwav
              # Make a nice color map using this Hue as a key color
              cmap = sns.light_palette(
                  (rainbow_hue, rainbow_saturation, 100 - rainbow_lightness),
                  input="husl",
                  as_cmap=True,
              )
          else:
              cmap = "gray_r"

          im.plot(ax=ax, vmin=vmin, vmax=vmax, cmap=cmap.with_extremes(bad="0.5"))
          wav0 = 0.5 * (wav1 + wav2) / (1 + vsys / 300000)
          labels = (
              f"λ{wav0:.2f}",
              f"{vmax:.4g}", 
              f"#{row['Pixel']:04d}",
              f"δλ{row['widths']:.1f}",
          )
          corners_text(ax, labels, pad=0.02,
                       color="k", fontweight="bold",
                       bbox=dict(
                           facecolor="w",
                           boxstyle=BoxStyle.Round(pad=0.1),
                           alpha=0.6,
                       ),
                       )

      for ax in axes.flat:
          ax.set(xticks=[], yticks=[])
      sns.despine(left=True, bottom=True)
      fig.tight_layout(h_pad=0.2, w_pad=0.2)
      fig.savefig(figfile)
      print(figfile, end="")




  if __name__ == "__main__":
      typer.run(main)

#+end_src

#+RESULTS:

Run on the BS region to get the high-ionization lines
#+begin_src sh :dir ../data/spec1d :results output file
  python ../../scripts/peak-image-plot.py \
         ../../big-data/ngc346new/n346-muse-csub-101.fits \
         n346-nostar-bs-peaks-p0010-d0030.csv \
         --star-mask-file ../n346-mask-stars.fits \
         --no-subtract-base
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/spec1d/peak-images-n346-nostar-bs-peaks-p0010-d0030.pdf]]

Run on the GLOB-E region to get the neutral lines
#+begin_src sh :dir ../data/spec1d :results output file
  python ../../scripts/peak-image-plot.py \
         ../../big-data/ngc346new/n346-muse-csub-101.fits \
         n346-nostar-glob-e-peaks-p0002-d0030.csv \
         --star-mask-file ../n346-mask-stars.fits \
         --no-subtract-base \
         --wavelength-window-pad 0.5
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/spec1d/peak-images-n346-nostar-glob-e-peaks-p0002-d0030.pdf]]
**** Multiple versions of the GLOB-E region
I am investigating different options for the line extraction to see which is best:
- Best value for wavelength window padding
  - Larger values capture more of the line flux, but can also bring in neighboring lines
  - For instance UIL 9019 is next to H I 9015, which leaks in when we use padding of 1.5 angstrom, but not when we use 0.5
- Whether or not to subtract hyper-local continuum
  - The utility of this varies a lot between lines
  - This is estimated from the "bases" returned by the find_peaks() function
  - At the blue and infrared ends, most lines are much better without it
  - But around the Ha wings, and for a few other lines in the 7000 and 8000 range, it really helps
    - For instance, the UILs at 6629, 6637, 6646 are quite invisible without it
- Which median filtered cube to use
  - So far I have been using the 101-pixel median
  - But the 11-pixel median might work better and avoid the need to use the hyper-local continuum
- Now I have added the option to use an extra suffix in the saved file, this will be easier to explore
***** GLOB-E, csub 11, pad 0.5
#+begin_src sh :dir ../data/spec1d :results output file
  python ../../scripts/peak-image-plot.py \
         ../../big-data/ngc346new/n346-muse-csub-011.fits \
         n346-nostar-glob-e-peaks-p0002-d0030.csv \
         --star-mask-file ../n346-mask-stars.fits \
         --ncolumns 8 \
         --no-subtract-base \
         --wavelength-window-pad 0.5 \
         --extra-suffix CSUB011-PAD05
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/spec1d/peak-images-n346-nostar-glob-e-peaks-p0002-d0030-CSUB011-PAD05.pdf]]
***** GLOB-E, csub 101, pad 0.5
#+begin_src sh :dir ../data/spec1d :results output file
  python ../../scripts/peak-image-plot.py \
         ../../big-data/ngc346new/n346-muse-csub-101.fits \
         n346-nostar-glob-e-peaks-p0002-d0030.csv \
         --star-mask-file ../n346-mask-stars.fits \
         --ncolumns 8 \
         --no-subtract-base \
         --wavelength-window-pad 0.5 \
         --extra-suffix CSUB101-PAD05
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/spec1d/peak-images-n346-nostar-glob-e-peaks-p0002-d0030-CSUB101-PAD05.pdf]]

***** GLOB-E, csub 101, pad 0.5, subtract base
#+begin_src sh :dir ../data/spec1d :results output file
  python ../../scripts/peak-image-plot.py \
         ../../big-data/ngc346new/n346-muse-csub-101.fits \
         n346-nostar-glob-e-peaks-p0002-d0030.csv \
         --star-mask-file ../n346-mask-stars.fits \
         --ncolumns 8 \
         --subtract-base \
         --wavelength-window-pad 0.5 \
         --extra-suffix CSUB101-PAD05-SUBBASE
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/spec1d/peak-images-n346-nostar-glob-e-peaks-p0002-d0030-CSUB101-PAD05-SUBBASE.pdf]]

***** Earlier tries
Save different versions of figure with different command line options. Do not run this again without changing the prefix to reflect current options.
#+begin_src sh :dir ../data/spec1d :results silent
  SUFFIX=NO-SUB-BASE-PAD05
  cp peak-images-n346-nostar-glob-e-peaks-p0002-d0030.pdf  peak-images-n346-nostar-glob-e-peaks-p0002-d0030-$SUFFIX.pdf
#+end_src

[[file:../data/spec1d/peak-images-n346-nostar-glob-e-peaks-p0002-d0030-SUB-BASE-PAD15.pdf]]
**** Multiple versions for the BS region

***** BS, csub 11, pad 0.5
#+begin_src sh :dir ../data/spec1d :results output file
  python ../../scripts/peak-image-plot.py \
         ../../big-data/ngc346new/n346-muse-csub-011.fits \
         n346-nostar-bs-peaks-p0010-d0030.csv \
         --star-mask-file ../n346-mask-stars.fits \
         --ncolumns 8 \
         --no-subtract-base \
         --wavelength-window-pad 0.5 \
         --extra-suffix CSUB011-PAD05
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/spec1d/peak-images-n346-nostar-bs-peaks-p0010-d0030-CSUB011-PAD05.pdf]]


***** BS, csub 101, pad 0.5
#+begin_src sh :dir ../data/spec1d :results output file
  python ../../scripts/peak-image-plot.py \
         ../../big-data/ngc346new/n346-muse-csub-101.fits \
         n346-nostar-bs-peaks-p0010-d0030.csv \
         --star-mask-file ../n346-mask-stars.fits \
         --ncolumns 8 \
         --no-subtract-base \
         --wavelength-window-pad 0.5 \
         --extra-suffix CSUB101-PAD05
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/spec1d/peak-images-n346-nostar-bs-peaks-p0010-d0030-CSUB101-PAD05.pdf]]

**** Other regions
***** NEUT, csub 101, pad 0.5
#+begin_src sh :dir ../data/spec1d :results output file
  python ../../scripts/peak-image-plot.py \
         ../../big-data/ngc346new/n346-muse-csub-101.fits \
         n346-nostar-neut-peaks-p0002-d0030.csv \
         --star-mask-file ../n346-mask-stars.fits \
         --ncolumns 8 \
         --no-subtract-base \
         --wavelength-window-pad 0.5 \
         --extra-suffix CSUB101-PAD05
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/spec1d/peak-images-n346-nostar-neut-peaks-p0002-d0030-CSUB101-PAD05.pdf]]


***** FIL-B, csub 101, pad 0.5
#+begin_src sh :dir ../data/spec1d :results output file
  python ../../scripts/peak-image-plot.py \
         ../../big-data/ngc346new/n346-muse-csub-101.fits \
         n346-nostar-fil-b-peaks-p0002-d0030.csv \
         --star-mask-file ../n346-mask-stars.fits \
         --ncolumns 8 \
         --no-subtract-base \
         --wavelength-window-pad 0.5 \
         --extra-suffix CSUB101-PAD05
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/spec1d/peak-images-n346-nostar-fil-b-peaks-p0002-d0030-CSUB101-PAD05.pdf]]


***** YSO, csub 101, pad 0.5
#+begin_src sh :dir ../data/spec1d :results output file
  python ../../scripts/peak-image-plot.py \
         ../../big-data/ngc346new/n346-muse-csub-101.fits \
         n346-nostar-yso-peaks-p0010-d0030.csv \
         --star-mask-file ../n346-mask-stars.fits \
         --ncolumns 8 \
         --no-subtract-base \
         --wavelength-window-pad 0.5 \
         --extra-suffix CSUB101-PAD05
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/spec1d/peak-images-n346-nostar-yso-peaks-p0010-d0030-CSUB101-PAD05.pdf]]

**** Help for image extraction script
#+begin_src sh :dir ../scripts
python peak-image-plot.py --help
#+end_src

#+RESULTS:
#+begin_example
Usage: peak-image-plot.py [OPTIONS] CUBE_FILE PEAK_FILE

  Plot of images for each peak

Arguments:
  CUBE_FILE  [required]
  PEAK_FILE  [required]

Options:
  --star-mask-file TEXT
  --vsys FLOAT                    [default: 170.0]
  --subtract-base / --no-subtract-base
                                  [default: False]
  --wavelength-window-pad FLOAT   [default: 1.5]
  --scale-by-percentile / --no-scale-by-percentile
                                  [default: True]
  --use-rainbow-colors / --no-use-rainbow-colors
                                  [default: True]
  --rainbow-saturation FLOAT      [default: 95.0]
  --rainbow-lightness FLOAT       [default: 70.0]
  --rainbow-blue-red <FLOAT FLOAT>...
                                  [default: 270.0, -45.0]
  --extra-suffix TEXT
  --install-completion            Install completion for the current shell.
  --show-completion               Show completion for the current shell, to
                                  copy it or customize the installation.

  --help                          Show this message and exit.
#+end_example

** DONE Step 3: Make spreadsheet of all lines
CLOSED: [2022-10-25 Tue 08:18]


*** Earlier ideas about filtering out false positives
- This is probably best done by visual inspection of the maps
- That should be able to identify the ones that are just
  - sky lines, or
  - noise
- Although, we could maybe have an automated method that looks at correlation with specific templates
  - It woulds probably help to do a re-binning or median filtering first, since the important variation will be on larger scales



*** DONE Classification in a big collaborative spreadsheet
CLOSED: [2022-10-25 Tue 07:55]
- I have made this in Google Sheets and am collaborating with Mabel to fill it in
- [2022-10-13 Thu] Started work on it
- [2022-10-16 Sun] First contributions from Mabel
- [2022-10-18 Tue] Nearly finished
  - I have left the interval 8000 to 9000 for Mabel to do
  - Apart from that, the entire range from 6000 has been done completely in the sense that each peak detected in GLOB-E and BS has been fully investigated and classified
  - At shorter wavelengths there are still some holes, but I think that they are all uninteresting
  - And I have not done a study of the YSO-only lines yet, but I would rather leave those for now since they will just get in the way


*** Read in data from the spreadsheet and write to individual YAML files
- I export it in excel format to [[file:../data/spec1d/All-Lines-MUSE-NGC-346.xlsx]]
- Examples of reading it are in [[file:../notebooks/ngc346-new/test-read-excel-file.py]]
  - Data can be read by pandas
  - Comments and notes require use of the openpyxl library directly
- Plan here is to read in excel file and to write out a bunch of little yaml files, one per emission line
    
#+begin_src python :tangle ../scripts/spreadsheet-convert.py
  import pandas as pd
  import sys
  from pathlib import Path
  import typer
  import openpyxl
  import yaml
  import slugify

  def unpack_notes_from_string(s):
      """Extract list of notes from string

      Filter out the separators and author bylines
      """
      return [
          note for note in s.split("\n")
          if not note.startswith(("----", "\t-"))
      ]


  def main(
          excel_file: str,
          out_folder: str="n346-lines",
  ):
      """Convert excel spreadsheet of emission lines to YAML files, one per row

      Preserves Notes and Comments on each cell
      """
      # Read in the spreadsheet
      workbook = openpyxl.load_workbook(excel_file, data_only=True)
      # And select the first sheet
      sheet = workbook.active

      # Make a list of row data from the sheet
      values_array = list(sheet.values)

      # Make sure the output folder exists
      out_path = Path(out_folder)
      out_path.mkdir(parents=True, exist_ok=True)

      # Column headers are in first row
      kwds = [
          # Try to make sure headers are valid identifiers
          slugify.slugify(str(x), lowercase=False, separator="_", replacements=[["λ", "lambda"]])
          for x in values_array[0]
          # And skip empty columns
          if x
      ]
      #sys.exit(str(kwds))

      # Notes to each cell are called comments in the API
      notes_array = [[x.comment.content if x.comment else None for x in row] for row in sheet.rows]

      # Loop over all the following rows
      for values, notes in zip(values_array[1:], notes_array[1:]):
          if not any(values):
              # Skip any blank rows
              continue
          # Make a dict of the data from this row
          data = dict(zip(kwds, values))
          # Add the notes, but only where they exist
          if any(notes):
              data["Notes"] = {k: unpack_notes_from_string(x) for k, x in zip(kwds, notes) if x}

          # We use the Index column padded to 4 digits to construct the file stem
          index = data["Index"] = int(data["Index"])
          stem = f"{index:04d}"
          # Save the data to a JSON file
          with open(out_path / f"{stem}.yaml", "w") as f:
              yaml.dump(data, f, allow_unicode=True, sort_keys=False, default_flow_style=False)



  if __name__ == "__main__":
      typer.run(main)

#+end_src

#+RESULTS:

**** Run the spreadsheet conversion script
:PROPERTIES:
:ID:       BCD6CB93-FC5E-4CFE-81DC-047BDCE13BCF
:END:
#+begin_src sh :dir ../data :results verbatim
python ../scripts/spreadsheet-convert.py spec1d/All-Lines-MUSE-NGC-346.xlsx --out-folder n346-lines/all-lines-orig
#+end_src

#+RESULTS:

**** Help for spreadsheet conversion script

#+begin_src sh :dir ../scripts :results verbatim
python spreadsheet-convert.py --help
#+end_src

#+RESULTS:
#+begin_example
Usage: spreadsheet-convert.py [OPTIONS] EXCEL_FILE

  Convert excel spreadsheet of emission lines to YAML files, one per row

  Preserves Notes and Comments on each cell

Arguments:
  EXCEL_FILE  [required]

Options:
  --out-folder TEXT     [default: n346-lines]
  --install-completion  Install completion for the current shell.
  --show-completion     Show completion for the current shell, to copy it or
                        customize the installation.

  --help                Show this message and exit.
#+end_example

** DONE Step 4: Maps of different lines
CLOSED: [2022-10-25 Tue 08:21]
- Classification could be a natural by-product of the correlations
- [ ] But we could also make diagnostic plots, based on ratios of intensities in different regions
  - For instance, for the ionized lines and i-front lines:
    - Ratio between BS and MIP regions to distinguish IV from III
    - Ratio between MIP and NEUT/FIL regions to distinguish III from II and possibly I
  - For the neutral lines
    - Ratio between NEUT and FIL/GLOB to distinguish shallow from deep 


*** Do map of a single line 
:PROPERTIES:
:ID:       41A1CAB9-5D31-437B-9D67-B34EB234BB5B
:END:
#+begin_src python :tangle ../scripts/make-one-map.py
  import numpy as np
  import sys
  from pathlib import Path
  import typer
  import openpyxl
  import yaml
  import slugify
  from text_unidecode import unidecode
  from astropy.io import fits
  from astropy.wcs import WCS

  unwanted_types = ["sky",  "telluric", "noise", "nan"]

  def get_line_type(s):
      ltype = slugify.slugify(str(s).rstrip("?"))
      if ltype in unwanted_types:
          return None
      else:
          return ltype


  def load_cube_hdu(
          cwindow: int,
          prefix: str="n346-muse-csub",
          big_data_folder: Path=Path("../../big-data/ngc346new"),
  ):
      cube_path = big_data_folder / f"{prefix}-{cwindow:03d}.fits"
      return fits.open(cube_path)[0]

  def get_id_string(data):
      s = f"{data['Index']:04d}-"
      s += slugify.slugify(data["ID"])
      if "UIL" in data["ID"]:
          s += "-" + slugify.slugify(f"{data['lambda_HM']:.2f}")
      return s

  def choose_cont_window(data: dict) -> tuple[int, bool]:
      """Decide which type of continuum subtraction is preferred

      Returns tuple: width of window, and whether to subtract baseline
      """

      # Case of no preference given
      if not data["Cont_method"]:
          # Just use the wide window
          return 101, False

      try:
          # Case of only one method listed and it is an integer
          return int(data["Cont_method"]), False
      except ValueError:
          # Case of various methods listed, or one that contains letters. Take the first
          cont_methods = data["Cont_method"].split(",")
          first_cont_method = cont_methods[0]
          if first_cont_method.endswith("B"):
              # Case that we want to subtract the baseline
              return int(first_cont_method.rstrip("B")), True
          else:
              # Case that we do not
              return int(first_cont_method), False



  def main(
          yaml_file : str,
  ):
      """Create map of a single emission line from data in YAML file
      """
      if not yaml_file.endswith(".yaml"):
          yaml_file = yaml_file + ".yaml"
      with open(yaml_file) as f:
          metadata = yaml.load(f)

      # Group all lines of same type into their own folder
      line_type = get_line_type(metadata["Type"])
      save_path = Path("type-" + line_type)
      save_path.mkdir(exist_ok=True)

      cwindow, yes_sub_base = choose_cont_window(metadata)
      cube = load_cube_hdu(cwindow)
      ipeak = metadata["Index"]
      # First try: just use 3 pixels along wave axis
      cube_window = cube.data[ipeak-1:ipeak+2, ...]
      if yes_sub_base:
          # This will fail if the line is broad
          base = 0.5 * (cube.data[ipeak-2, ...] + cube.data[ipeak+2, ...])
          cube_window -= base
      image = np.sum(cube_window, axis=0)
      header = WCS(cube.header).celestial.to_header()
      # FITS headers allow only ASCII strings
      header.update({k: unidecode(str(v)) for k, v in metadata.items()})

      fits_file = get_id_string(metadata) + ".fits"
      fits.PrimaryHDU(header=header, data=image).writeto(save_path / fits_file, overwrite=True)
      print("Image saved to", save_path / fits_file)

  if __name__ == "__main__":
      typer.run(main)

#+end_src

#+begin_src sh :dir ../data/n346-lines :results verbatim
  python ../../scripts/make-one-map.py all-lines-orig/3711.yaml
#+end_src

#+RESULTS:
: Image saved to type-deep-neutral/3711-uil-9233-46.fits


#+begin_src sh :dir ../data/n346-lines :results verbatim
python ../../scripts/make-one-map.py all-lines-orig/1547.yaml
#+end_src

#+RESULTS:
: Image saved to type-low-neb/1547-uil-6529-50.fits



#+begin_src sh :dir ../data/n346-lines :results verbaatim
python ../../scripts/make-one-map.py --help 
#+end_src

#+RESULTS:
#+begin_example
Usage: make-one-map.py [OPTIONS] YAML_FILE

  Create map of a single emission line from data in YAML file

Arguments:
  YAML_FILE  [required]

Options:
  --install-completion  Install completion for the current shell.
  --show-completion     Show completion for the current shell, to copy it or
                        customize the installation.

  --help                Show this message and exit.
#+end_example


*** Combine some maps of the same ion


**** Script to combine the maps

#+begin_src python :tangle ../scripts/combine-maps.py
  from pathlib import Path
  import numpy as np
  from astropy.io import fits
  import typer

  def combine_maps(
          pattern: str="*-uil-*",
          prefix: str="all-uil",
          min_strength: float=0.0,
  ):
      """Make sum and median images by combining several maps"""
    
      fits_paths = sorted(Path.cwd().glob(f"{pattern}.fits"))

      hdus = [fits.open(p)[0] for p in fits_paths]

      data_stack = np.stack(
          [
              hdu.data for hdu in hdus
              if (float(hdu.header["STRENGTH"]) if hdu.header["STRENGTH"] != "None" else 0.0) >= min_strength
          ],
          axis=0,
      )

      print(f"Combining {len(data_stack)} images")

      fits.PrimaryHDU(
          header=hdus[-1].header,
          data=np.nansum(data_stack, axis=0),
      ).writeto(
          f"{prefix}-sum.fits",
          overwrite=True,
      )
      fits.PrimaryHDU(
          header=hdus[-1].header,
          data=np.nanmedian(data_stack, axis=0),
      ).writeto(
          f"{prefix}-median.fits",
          overwrite=True,
      )


  if __name__ == "__main__":
      typer.run(combine_maps)
#+end_src

#+begin_src sh :dir ../data/n346-lines/type-deep-neutral :results verbatim
python ../../../scripts/combine-maps.py --help
#+end_src

#+RESULTS:
#+begin_example
Usage: combine-maps.py [OPTIONS]

  Make sum and median images by combining several maps

Options:
  --pattern TEXT        [default: *-uil-*]
  --prefix TEXT         [default: all-uil]
  --min-strength FLOAT  [default: 0.0]
  --install-completion  Install completion for the current shell.
  --show-completion     Show completion for the current shell, to copy it or
                        customize the installation.

  --help                Show this message and exit.
#+end_example

**** Combine all of the deep neutral maps

Minimum strength 5

#+begin_src sh :dir ../data/n346-lines/type-deep-neutral :results verbatim
python ../../../scripts/combine-maps.py --pattern "*-uil-*" --prefix uil-s05 --min-strength 5.0
#+end_src

#+RESULTS:
: Combining 29 images

Minimum strength 2

#+begin_src sh :dir ../data/n346-lines/type-deep-neutral :results verbatim
python ../../../scripts/combine-maps.py --pattern "*-uil-*" --prefix uil-s02 --min-strength 2.0
#+end_src

#+RESULTS:
: Combining 60 images

Minimum strength 9

#+begin_src sh :dir ../data/n346-lines/type-deep-neutral :results verbatim
python ../../../scripts/combine-maps.py --pattern "*-uil-*" --prefix uil-s09 --min-strength 9.0
#+end_src

#+RESULTS:
: Combining 9 images

**** Combine all the [Fe III] maps
#+begin_src sh :dir ../data/n346-lines/type-fe-ni :results verbatim
python ../../../scripts/combine-maps.py --pattern "*-fe-iii-*" --prefix fe-iii-all
#+end_src

#+RESULTS:
: Combining 9 images

**** Combine all the [Fe II] maps
#+begin_src sh :dir ../data/n346-lines/type-fe-ni :results verbatim
python ../../../scripts/combine-maps.py --pattern "*-fe-ii-*" --prefix fe-ii-all
#+end_src

#+RESULTS:
: Combining 7 images

**** Combine some of the Si II maps
#+begin_src sh :dir ../data/n346-lines/type-med-perm :results verbatim
python ../../../scripts/combine-maps.py --pattern "*-si-ii-*" --prefix si-ii-all
#+end_src

#+RESULTS:
: Combining 7 images

**** Combine some of the O I maps
#+begin_src sh :dir ../data/n346-lines/type-neutral :results verbatim
python ../../../scripts/combine-maps.py --pattern "*-o-i-[67]*" --prefix o-i-short
#+end_src

#+RESULTS:
: Combining 3 images

**** Combine different sets of the N I maps
#+begin_src sh :dir ../data/n346-lines/type-neutral :results verbatim
python ../../../scripts/combine-maps.py --pattern "*-n-i-7*" --prefix n-i-7000
#+end_src

#+RESULTS:
: Combining 2 images

#+begin_src sh :dir ../data/n346-lines/type-neutral :results verbatim
python ../../../scripts/combine-maps.py --pattern "*-n-i-8*" --prefix n-i-8000
#+end_src

#+RESULTS:
: Combining 8 images


**** Combine groups of H I lines
#+begin_src sh :dir ../data/n346-lines/type-med-neb :results verbatim
python ../../../scripts/combine-maps.py --pattern "*-h-i-83*" --prefix h-i-8300
#+end_src

#+RESULTS:
: Combining 5 images

#+begin_src sh :dir ../data/n346-lines/type-med-neb :results verbatim
python ../../../scripts/combine-maps.py --pattern "*-h-i-84*" --prefix h-i-8400
#+end_src

#+RESULTS:
: Combining 3 images

#+begin_src sh :dir ../data/n346-lines/type-med-neb :results verbatim
python ../../../scripts/combine-maps.py --pattern "*-h-i-85*" --prefix h-i-8500
#+end_src

#+RESULTS:
: Combining 3 images

#+begin_src sh :dir ../data/n346-lines/type-med-neb :results verbatim
python ../../../scripts/combine-maps.py --pattern "*-h-i-8[67]*" --prefix h-i-86-87
#+end_src

#+RESULTS:
: Combining 2 images

** DONE Step 5: Partition the map into different zones by predominant line type
CLOSED: [2022-10-25 Tue 19:22]
- Have different zones, according to which Type dominates:
  - 0 :: Deep Neutral
  - I :: Neutral
  - II :: Low Neb
  - III :: Med Neb
  - IV :: High Neb
  - S :: stars
  - MYSO :: MYSO-C
- Proceed via following algorithm:
  1. Choose a representative map for each zone, either a single line or the sum over several lines
     - Optionally, smooth the map if it is noisy
  2. For each of the maps, rescale a suitable brightness range to the interval [0, 1]
     - The brightness range might be min-max, or maybe 5-95 percentile, or whatever works best
     - This yields a normalized brightness map for each zone
  3. Each pixel gets tagged with the zone with the largest normalized brightness for that pixel
  4. Finally, we can mask out the stars according to some criterion


*** Make a continuum image
- [2022-10-28 Fri] I am trying something new: make the stars a fully-fledged zone, which means we can finesse what counts as a star pixel by tweaking the percentiles
#+begin_src python :eval no :tangle ../scripts/make-cont-image.py
  from typing import Union
  from pathlib import Path
  import numpy as np
  from mpdaf.obj import Cube, Spectrum, Image
  from astropy.io import fits
  import typer
  import slugify

  def main(
          cube_file: str,
          output_id: str,
          wave_range: tuple[float, float]=(4600.0, 9300.0),
          percentiles: tuple[float, float]=(5.0, 95.0),
  ):
      """Write a continuum image scaled between percentiles"""

      # Read the spectral cube
      cube = Cube(cube_file)
      image = cube.get_image(wave_range)
      vmin, vmax = np.nanpercentile(image.data, percentiles)
      image = (image - vmin) / (vmax - vmin)
      image.write(f"cont-image-{output_id}.fits")

  if __name__ == "__main__":
      typer.run(main)


#+end_src

#+begin_src sh :dir ../data/n346-lines :results verbatim
  python ../../scripts/make-cont-image.py \
       ../../big-data/ngc346new/n346-muse-2pass-cont-007.fits \
       full-c007
#+end_src

#+RESULTS:

*** Script to partition the map
- New addition [2022-10-28 Fri]: save the normalized brightness maps, so we can use them later as an additional criterion for deciding which pixels to include in the mask
- [2022-10-28 Fri 20:44] Also adding MYSO as a zone
  - I have changed Zone I to use the [N I] 5200 line, while MYSO uses the O I 8446 line
  - They are both similar brightness in the diffuse nebula, but in the MYSO the O I line is 10 times brighter
#+begin_src python :tangle ../scripts/partition-by-zone.py
  import numpy as np
  from astropy.io import fits
  from astropy.convolution import Gaussian2DKernel, convolve
  import yaml
  import typer

  def main(
          zone_file: str="zones.yaml",
          output_file: str="zone_indices.fits",
          smooth: float=1.5,
  ):
      """Divide map into different zones according to which line type predominates"""
      with open(zone_file) as f:
          zones = yaml.safe_load(f)

      bright_maps = []
      for zone in zones:
          # Load typical brightness map for this zone
          hdu = fits.open(zone["fits_file"])[0]
          if hdu.data is None:
              hdu = fits.open(zone["fits_file"])[1]
          # Smooth it a bit
          hdu.data = convolve(hdu.data, Gaussian2DKernel(smooth))
          # Find brightness limits corresponding to per-zone specified percentiles
          vmin, vmax = np.nanpercentile(hdu.data, zone["percentiles"])
          # Linear rescaling of limits to range [0, 1]
          bright_map = (hdu.data - vmin) / (vmax - vmin)
          # Construct file name to save normalized brightness of this zone
          bright_file = f"{zone['label']}-bright-map.fits"
          # Save the normalized brightness map
          fits.PrimaryHDU(header=hdu.header, data=bright_map).writeto(bright_file, overwrite=True)
          # And add to the list
          bright_maps.append(bright_map)

      # Make three-dimensional stack of maps
      bright_map_stack = np.stack(bright_maps, axis=0)
      # Find which map in the stack is brightest for each pixel
      izone_map = np.argmax(bright_map_stack, axis=0).astype(float)
      # Make a combined map of all these maximum values
      bmax_map = np.max(bright_map_stack, axis=0)
      # And use it to eliminate pixels that are very faint in ALL maps
      izone_map[bmax_map < 0.0] = np.nan
      # Save the map of zone indices
      fits.PrimaryHDU(header=hdu.header, data=izone_map).writeto(output_file, overwrite=True)



  if __name__ == "__main__":
      typer.run(main)
#+end_src

#+begin_src sh :dir ../data/n346-lines :results verbatim
python ../../scripts/partition-by-zone.py --smooth 2.0
#+end_src

#+RESULTS:




*** DONE Make an image of the zones
CLOSED: [2022-10-28 Fri 10:50]
- [2022-10-29 Sat] This is now superseded by a better version below
  - See [[id:CFE3C7CC-0F22-4AFC-800F-5EF9AECA8F72][Make a better image of the zones]]

#+begin_src python :eval no :tangle ../scripts/make-image-figure.py
  from matplotlib import pyplot as plt
  import matplotlib as mpl
  from astropy.io import fits
  import numpy as np
  from typing import Union
  import typer

  DPI = 150

  def main(
          fits_file: str,
          min_value: float=0.0,
          max_value: float=6.0,
          cmap: str="RdBu",
          nan_color: str="0.5",
          fig_file: str="",
  ):
      hdu = fits.open(fits_file)[0]
      ny, nx = hdu.data.shape
      fig, ax = plt.subplots(figsize=(nx/DPI, ny/DPI))
      ax.imshow(
          hdu.data,
          origin="lower",
          interpolation="none",
          vmin=min_value,
          vmax=max_value,
          cmap=mpl.colormaps[cmap].with_extremes(bad=nan_color),
      )
      ax.set(xticks=[], yticks=[])
      fig.subplots_adjust(0.0, 0.0, 1.0, 1.0)
      if not fig_file:
          fig_file = fits_file.replace(".fits", ".png")
      fig.savefig(fig_file, dpi=DPI)
      print(fig_file, end="")


  if __name__ == "__main__":
      typer.run(main)



#+end_src

#+RESULTS:

#+begin_src sh :dir ../data/n346-lines :results output file
python ../../scripts/make-image-figure.py zone_indices.fits --cmap magma --nan-color c
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-lines/zone_indices.png]]



*** Complicated version that was not necessary
3. Loop over a sequence of normalized brightness thresholds, in ascending order: e.g., 0.1, 0.5, 0.9
4. For each threshold, tag pixels for each zone whose normalized brightness exceeds the threshold
   - Do this in descending order of number of pixels that would be tagged

** DONE Step 6: Create per-zone spectra
CLOSED: [2022-10-29 Sat 23:07]
- This can be like the previous versions of 1D spectra
  - [[id:E860E6DE-06FD-4DC2-AA8E-9869D5112ADB][Inspect the 1d spectra results]]
  - [[id:BB8006B6-5B0F-487E-B35D-606D26B5C24F][Plot identified lines on top of the spectrum]]
- But adding in the info from all the YAML files
  - For example, [[id:41A1CAB9-5D31-437B-9D67-B34EB234BB5B][Do map of a single line]]
- And maybe also drawing inspiration from the stacking that I did in the notebook work
  - Although I am not sure if this can easily be combined with the ~symlog~ scale
- I have now had an idea for a two-pass median filter, with a scything (or shaving) step in between: filter-shave-filter
- Original try did not work right, so split it up into parts that can be individually tested
  - Make masks for each zone
  - Make a separate cube for each zone, with NaNs replacing all voxels outside the zone
    - This seems very wasteful of space, but it is the most flexible way
  - Finally, do the mean or sum to get the 1D spectrum


*** DONE Script to write mask files for each zone
CLOSED: [2022-10-27 Thu 18:25]
- Update [2022-10-28 Fri]: add an additional criterion that the normalized brightness in the zone's key line should exceed a certain threshold
- And also maybe trim off pixels around the edges that are particularly noisy
- Second update [2022-10-28 Fri 17:53]: remove the extra image mask, since we are now including stars as first-class mask citizens
- Third update [2022-10-29 Sat]: ~bright_threshold~ is now set per zone, which requires reading in the YAML file
#+begin_src python :tangle ../scripts/make-zone-masks.py 
  from pathlib import Path
  import numpy as np
  from astropy.io import fits
  import yaml
  import typer

  def trim_pixel_border_from_mask(mask: np.ndarray, border: int) -> np.ndarray:
      """Set to False all pixels within certain border of mask array"""
      assert mask.ndim == 2
      mask2 = np.zeros_like(mask)
      # Easier to set the pixels that we do not want to set to FALSE
      mask2[border:-border,  border:-border] = True
      # and just AND it with the original
      return mask & mask2



  def main(
          zone_indices_file: str,
          zone_file: str="zones.yaml",
          trim_border: int=5,
  ):
      """Write a fits image file for each zone mask"""

      # Read in the map of zone indices
      zone_index_hdu = fits.open(zone_indices_file)[0]
      # And erad in the zone metadata
      with open(zone_file) as f:
          zones = yaml.safe_load(f)

      # For each zone, make a mask that selects only that zone's pixels,
      # then write it to a file
      for izone, zone in enumerate(zones):
          _, label = zone["label"].split("-")
          mask = (zone_index_hdu.data == izone)
          zone_bright_map = fits.open(f"zone-{label}-bright-map.fits")[0].data
          # Additionally require brightness to exceed some threshold
          mask = mask & (zone_bright_map > zone["min_bright"])
          # And trim around the border to avoid noisy pixels
          mask = trim_pixel_border_from_mask(mask, trim_border)
          maskfilename = f"zone-{label}-mask.fits"
          fits.PrimaryHDU(
              header=zone_index_hdu.header,
              data=mask.astype(int),
          ).writeto(maskfilename, overwrite=True)
          print("Saved mask to", maskfilename)

  if __name__ == "__main__":
      typer.run(main)

  #+end_src

  #+RESULTS:

#+begin_src sh :results output verbatim :dir ../data/n346-lines
  python ../../scripts/make-zone-masks.py \
       zone_indices.fits \
       --trim-border 5
#+end_src

#+RESULTS:
: Saved mask to zone-0-mask.fits
: Saved mask to zone-I-mask.fits
: Saved mask to zone-II-mask.fits
: Saved mask to zone-III-mask.fits
: Saved mask to zone-IV-mask.fits
: Saved mask to zone-MYSO-mask.fits
: Saved mask to zone-S-mask.fits

*** DONE Make a better image of the zones
CLOSED: [2022-10-29 Sat 16:42]
:PROPERTIES:
:ID:       CFE3C7CC-0F22-4AFC-800F-5EF9AECA8F72
:END:
- The idea with this is to use the normalized key brightness images for each zone that we used earlier
- I will add key colors for each zone to the YAML file, and use these to make a color map for each zone
- But only use it within that zone's mask, so that they do not overlap

#+begin_src python :eval no :tangle ../scripts/make-zone-color-image.py
  from matplotlib import pyplot as plt
  import matplotlib as mpl
  import seaborn as sns
  from astropy.io import fits
  import numpy as np
  import yaml
  from typing import Union
  import typer

  DPI = 150

  def main(
          zone_file: str="zones.yaml",
          saturation: int=95,
          lightness: int=30,
  ):
      with open(zone_file) as f:
          zones = yaml.safe_load(f)

      fig = None
      for zone in zones:
          # Load key brightness map for this zone
          hdu = fits.open(f"{zone['label']}-bright-map.fits")[0]
          # Load zone mask
          mhdu = fits.open(f"{zone['label']}-mask.fits")[0]
          # Set pixels outside the mask to NaN
          image = np.where(mhdu.data, hdu.data, np.nan)
          if fig is None:
              ny, nx = hdu.data.shape
              fig, ax = plt.subplots(figsize=(nx/DPI, ny/DPI))

          cmap = sns.light_palette(
              tuple(zone["husl"]),
              input="husl",
              as_cmap=True,
          )
          ax.imshow( image, origin="lower", interpolation="none",
                     vmin=-1.0, vmax=zone["max_bright"], cmap=cmap, )
      ax.set(xticks=[], yticks=[])
      fig.subplots_adjust(0.0, 0.0, 1.0, 1.0)
      fig_file = "zone-color-image.png"
      fig.savefig(fig_file, dpi=DPI)
      print(fig_file, end="")


  if __name__ == "__main__":
      typer.run(main)



#+end_src

#+RESULTS:

#+begin_src sh :dir ../data/n346-lines :results output file
python ../../scripts/make-zone-color-image.py
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-lines/zone-color-image.png]]

*** DONE Script to write masked cube for a single zone
CLOSED: [2022-10-27 Thu 19:47]
#+begin_src python :tangle ../scripts/make-masked-cube.py
  from typing import Union
  from pathlib import Path
  import numpy as np
  from mpdaf.obj import Cube, Spectrum, Image
  from astropy.io import fits
  import typer
  import slugify

  def main(
          cube_file: str,
          mask_file: str,
          output_id: str,
  ):
      """Apply an image mask to a cube. Set voxels to NaN where mask is zero/False"""

      # Read the spectral cube
      cube = Cube(cube_file)

      # Read the spaxel mask
      mask_image = Image(mask_file)

      # Extend cube mask to include everywhere that the spaxel mask is
      # false
      cube.mask = cube.mask | ~mask_image.data.astype(bool)[:, ...]
      # Also, mask out strange values from cube
      cube.mask = cube.mask | (cube.data == 0.0) | (cube.data == -1.0)

      # Write the result to the same dir that the cube came from
      cube.write(cube_file.replace(".fits", f"-{output_id}.fits"), savemask="nan")

  if __name__ == "__main__":
      typer.run(main)

#+end_src

#+header: :prologue "exec 2>&1" :epilogue ":"
#+begin_src sh :results output verbatim :dir ../data/n346-lines
  time python ../../scripts/make-masked-cube.py \
       ../../big-data/ngc346new/n346-muse-2pass-csub-007.fits \
       zone-0-mask.fits \
       zone-0
#+end_src

#+RESULTS:
: WARNING: UnitsWarning: '1e-20 erg/s/cm  2/Angstrom' contains multiple slashes, which is discouraged by the FITS standard [astropy.units.format.generic]
: 
: real	0m16.479s
: user	0m9.607s
: sys	0m7.680s

#+header: :prologue "exec 2>&1" :epilogue ":"
#+begin_src sh :results output verbatim :dir ../data/n346-lines
  time for z in I II III IV MYSO S; do
      python ../../scripts/make-masked-cube.py \
       ../../big-data/ngc346new/n346-muse-2pass-csub-007.fits \
       zone-$z-mask.fits \
       zone-$z
  done
  echo "Last run:"
  date
#+end_src

#+RESULTS:
#+begin_example
WARNING: UnitsWarning: '1e-20 erg/s/cm  2/Angstrom' contains multiple slashes, which is discouraged by the FITS standard [astropy.units.format.generic]
WARNING: UnitsWarning: '1e-20 erg/s/cm  2/Angstrom' contains multiple slashes, which is discouraged by the FITS standard [astropy.units.format.generic]
WARNING: UnitsWarning: '1e-20 erg/s/cm  2/Angstrom' contains multiple slashes, which is discouraged by the FITS standard [astropy.units.format.generic]
WARNING: UnitsWarning: '1e-20 erg/s/cm  2/Angstrom' contains multiple slashes, which is discouraged by the FITS standard [astropy.units.format.generic]
WARNING: UnitsWarning: '1e-20 erg/s/cm  2/Angstrom' contains multiple slashes, which is discouraged by the FITS standard [astropy.units.format.generic]
WARNING: UnitsWarning: '1e-20 erg/s/cm  2/Angstrom' contains multiple slashes, which is discouraged by the FITS standard [astropy.units.format.generic]

real	1m42.259s
user	0m58.168s
sys	0m48.097s
Last run:
Sat Oct 29 18:02:11 CDT 2022
#+end_example

*** DONE Script to extract 1D spectrum from a single cube
CLOSED: [2022-10-27 Thu 20:52]
- This version completely dispenses with MPDAF, using only vanilla astropy
- Update [2022-10-29 Sat]: adds ~--jmin~ option to chop off the lower part of the map. This is to avoid including the southern filament for two reasons
  1. The S filament has a significantly bluer velocity
  2. The sky subtraction is significantly different (as in worse) there, which was particularlty affecting Zone II
#+begin_src python :tangle ../scripts/extract-zone-spectrum.py 
  from pathlib import Path
  import numpy as np
  from astropy.io import fits
  from astropy.wcs import WCS
  import typer
  import sys

  def get_spectrum_from_cube(
          cube: np.ndarray,
          reduction_method: callable = np.nanmean,
  ) -> np.ndarray:
      """Extract 1D spectrum from cube"""
      assert len(cube.shape) == 3
      spec = reduction_method(
          cube,
          axis=(1, 2),
      )
      assert len(spec.shape) == 1 and len(spec) == cube.shape[0]
      return spec


  def main(
          cube_file: str,
          output_id: str,
          output_dir: str="zone_spectra",
          method: str="mean",
          jmin: int=0,
  ):
      """Extract 1D spectra from cube for each region in file"""

      reduction_method_options = {
          "mean": np.nanmean,
          "median": np.nanmedian,
      }
      assert method in reduction_method_options

      # Read the spectral cube
      hdu = fits.open(cube_file)[1]
      yslice = slice(jmin, None)
      spec = get_spectrum_from_cube(
          hdu.data[:, yslice, :],
          reduction_method=reduction_method_options[method],
      )

      # Make sure the output folder exists
      Path(output_dir).mkdir(parents=True, exist_ok=True)
      # And save spectrum as a FITS file
      fits.PrimaryHDU(
          header=WCS(hdu.header).spectral.to_header(),
          data=spec,
      ).writeto(f"{output_dir}/{output_id}-spec1d.fits", overwrite=True)


  if __name__ == "__main__":
      typer.run(main)

#+end_src

Test on Zone 0
#+header: :prologue "exec 2>&1" :epilogue ":"
#+begin_src sh :results output verbatim :dir ../data/n346-lines
  time python ../../scripts/extract-zone-spectrum.py \
       ../../big-data/ngc346new/n346-muse-2pass-csub-007-zone-0.fits \
       zone-0-c007-chop-median \
       --method median \
       --jmin 70
#+end_src

#+RESULTS:
: 
: real	0m7.800s
: user	0m3.524s
: sys	0m1.062s

Now loop over the all of the zones
#+header: :prologue "exec 2>&1" :epilogue ":"
#+begin_src sh :results output verbatim :dir ../data/n346-lines
  time for z in 0 I II III IV MYSO S; do
      python ../../scripts/extract-zone-spectrum.py \
       ../../big-data/ngc346new/n346-muse-2pass-csub-007-zone-$z.fits \
       zone-$z-c007-chop-mean \
       --jmin 70
  done
  echo "Last run:"
  date
#+end_src

#+RESULTS:
: 
: real	0m25.800s
: user	0m19.286s
: sys	0m8.720s
: Last run:
: Sat Oct 29 18:18:33 CDT 2022

And again, but for the median
#+header: :prologue "exec 2>&1" :epilogue ":"
#+begin_src sh :results output verbatim :dir ../data/n346-lines
  time for z in 0 I II III IV MYSO S; do
      python ../../scripts/extract-zone-spectrum.py \
       ../../big-data/ngc346new/n346-muse-2pass-csub-007-zone-$z.fits \
       zone-$z-c007-chop-median \
       --method median \
       --jmin 70
  done
  echo "Last run:"
  date
#+end_src

#+RESULTS:
: 
: real	1m11.479s
: user	0m21.193s
: sys	0m10.566s
: Last run:
: Sat Oct 29 18:25:45 CDT 2022

*** OLD Script to extract per-zone spectra from cubes and write FITS files
- *Warning* [2022-10-28 Fri] This is not used any more
- This is a lightly modified version of [[file:../scripts/extract-region-spectra.py]]
  - See [[id:7876F071-7C10-45A1-9BE1-3330A523CE6B][Script to extract 1D spectra for each region]] in Step 0 above

#+begin_src python :tangle ../scripts/extract-zone-spectra.py 
  from typing import Union
  from pathlib import Path
  import numpy as np
  from mpdaf.obj import Cube, Spectrum, Image
  from astropy.io import fits
  import typer
  import regions as rg
  import slugify

  def get_spectrum_from_masked_cube(
          cube: Cube,
          spaxel_mask: np.ndarray,
          reduction_method: callable = np.nanmean,
          debug: bool = False,
  ) -> Spectrum:
      """Extract 1D spectrum from cube, but only spaxels where mask is True"""
      nv, ny, nx = cube.shape
      # Check that mask is 2D and the right size
      assert spaxel_mask.shape == (ny, nx)
      spec = reduction_method(
          # If we index by the mask over last two axes, then we get a 1d
          # array of spectra, which we can combine
          cube.data[:, spaxel_mask],
          axis=-1,
      )
      return Spectrum(wave=cube.wave, data=spec, unit=cube.unit)


  def main(
          zone_indices_file: str,
          cube_file: str,
          exclude_mask_file: str,
          output_id: str,
          output_dir: str="zone_spectra",
          zone_list: str="0 I II III IV",
  ):
      """Extract 1D spectra from cube for each region in file"""

      # Read in the map of zone indices
      zone_index_map = fits.open(zone_indices_file)[0].data
      # What zones do we have?
      zone_labels = zone_list.split(" ")
      # For each zone, make a mask that selects only that zone's pixels
      zone_masks = [zone_index_map == izone for izone in range(len(zone_labels))]

      # Read the spectral cube
      cube = Cube(cube_file)
      # Nan-ify the data array, since we do not use the mask array again later
      cube.data[cube.mask] = np.nan

      # Set the extra image mask to be true where the exclude_mask_file
      # image is zero
      extra_image_mask = np.where(
          Image(exclude_mask_file).data == 0.0,
          True,
          False
      )

      # Now do the get the 1D spectrum for each zoen
      spec_dict = {
          label: get_spectrum_from_masked_cube(
              cube,
              zone_mask | extra_image_mask
          )
          for label, zone_mask in zip(zone_labels, zone_masks)
      }

      # Make sure the output folder exists
      Path(output_dir).mkdir(parents=True, exist_ok=True)
      # And save each spectrum as a separate FITS file
      for label, spec in spec_dict.items():
          spec.write(f"{output_dir}/zone-{label}-{output_id}-spec1d.fits")


  if __name__ == "__main__":
      typer.run(main)

#+end_src

#+RESULTS:



**** Runs of extract-zone-spectra.py
Try it with different filter widths
#+begin_src sh :results output verbatim :dir ../data/n346-lines
  time python ../../scripts/extract-zone-spectra.py \
       zone_indices.fits \
       ../../big-data/ngc346new/n346-muse-2pass-csub-007.fits \
       ../n346-mask-stars.fits \
       c007
#+end_src

#+RESULTS:

**** Help for extract-zone-spectra.py
#+begin_src sh :results output verbatim :dir ../data/n346-lines
python ../../scripts/extract-zone-spectra.py --help
#+end_src

#+RESULTS:
#+begin_example
Usage: extract-zone-spectra.py [OPTIONS] ZONE_INDICES_FILE CUBE_FILE
                               EXCLUDE_MASK_FILE OUTPUT_ID

  Extract 1D spectra from cube for each region in file

Arguments:
  ZONE_INDICES_FILE  [required]
  CUBE_FILE          [required]
  EXCLUDE_MASK_FILE  [required]
  OUTPUT_ID          [required]

Options:
  --output-dir TEXT     [default: zone_spectra]
  --zone-list TEXT      [default: 0 I II III IV]
  --install-completion  Install completion for the current shell.
  --show-completion     Show completion for the current shell, to copy it or
                        customize the installation.

  --help                Show this message and exit.
#+end_example

*** DONE Plot the per-zone spectra
CLOSED: [2022-10-29 Sat 23:07]
:PROPERTIES:
:ID:       765997A8-764F-46E3-89EE-FC2E42F88EBB
:END:
#+begin_src python :tangle ../scripts/spec1d-plot-all-zones.py
  from mpdaf.obj import Spectrum
  from astropy.table import Table
  from matplotlib import pyplot as plt
  from matplotlib.ticker import MaxNLocator
  import seaborn as sns
  from pathlib import Path
  import yaml
  import typer

  def main(
          id_label: str,
          linthresh: float=20.0,
          star_scale: float=5.0,
          zone_file: str="../zones.yaml",
  ):
      """Plot of spectra from zones"""
      fig, ax = plt.subplots(figsize=(100, 3))
      figfile = f"spec1d-all-zones-{id_label}.pdf"

      with open(zone_file) as f:
          zones = yaml.safe_load(f)

      nzones = len(zones)
      yspan = 1.5 * linthresh
      dy = yspan / (nzones - 1)
      offset = yspan / 2
      for zone in zones:
          specfile = f"{zone['label']}-{id_label}-spec1d.fits"
          spec = Spectrum(str(specfile))
          scale = star_scale if zone["label"].endswith(("S", "MYSO")) else 1.0
          color = sns.dark_palette(
              tuple(zone["husl"]),
              input="husl",
          )[-1]
          (spec / scale + offset).plot(label=zone["label"], linewidth=1, color=color)
          ax.axhline(offset, linewidth=0.5, color=color)
          offset -= dy

      ax.legend(ncol=nzones)
      ax.minorticks_on()
      ax.grid(which="major", linewidth=0.5)
      ax.grid(which="minor", linewidth=0.2)
      ax.set_yscale("symlog", linthresh=linthresh, linscale=2.0)
      ax.xaxis.set_major_locator(MaxNLocator(100))
      fig.tight_layout()
      fig.savefig(figfile)
      print(figfile, end="")


  if __name__ == "__main__":
      typer.run(main)

#+end_src

#+RESULTS:

#+begin_src sh :dir ../data/n346-lines/zone_spectra :results output file
python ../../../scripts/spec1d-plot-all-zones.py c007-chop-mean --linthresh=30.0
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-lines/zone_spectra/spec1d-all-zones-c007-chop-mean.pdf]]

#+begin_src sh :dir ../data/n346-lines/zone_spectra :results output file
python ../../../scripts/spec1d-plot-all-zones.py c007-chop-median --linthresh=10.0 --star-scale 3.0
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-lines/zone_spectra/spec1d-all-zones-c007-chop-median.pdf]]


** DONE Step 7: Sum each line for each map zone
CLOSED: [2022-11-08 Tue 13:48]
:PROPERTIES:
:ID:       1DC91A25-4620-44FB-90F5-7AE750CE26F3
:END:
- We could use various different approaches for doing this
  1. Sum the 3 pixels, with or without the correction for the missing wing flux
  2. Or we could use the strength and width from find_peaks
  3. We can use the variations in the pixels just outside the 3 in order to estimate the uncertainty in the baseline
- Important thing is to get started on something, we can always refine it later!
- [2022-11-01 Tue] Spot checks on some lines from the 7



*** DONE Make a mask of all the line pixels and their neighbors, so we can avoid them when finding the BG level
CLOSED: [2022-11-01 Tue 11:50]
:PROPERTIES:
:ID:       41FC5AA8-E3FD-4379-B839-12CCE0FF8460
:END:

- [2023-01-16 Mon] Add a separate mask that just includes the central pixel of each line, which we will use in the case that the main mask leaves no valid BG pixels for a particular line
#+begin_src python :eval no :tangle ../scripts/find-all-line-pixels.py
  import numpy as np
  import yaml
  from pathlib import Path
  import typer

  INDEX_PATTERN = "[0-9]" * 4
  IGNORED_TYPES = ["noise", "stellar"]

  def main(
          data_dir: str="all-lines-orig",
  ):
      # Get all the lines
      line_files = sorted(Path(data_dir).glob(f"{INDEX_PATTERN}.yaml"))
      data = [
          yaml.safe_load(path.open()) for path in line_files
      ]
      # Make a list of all indices that we wish to exclude from BG
      # estimation
      indices = []
      indices_core = []
      for line in data:
          if not line["Type"]:
              # Skip case that Type is null
              continue
          if line["Type"].lower().lstrip("?") in IGNORED_TYPES:
              # Skip other Types that we do not want, e.g., Noise
              continue                
          idx = line["Index"]
          # Use a 3-pixel window around each line
          indices.extend([idx - 1, idx, idx + 1])
          indices_core.append(idx)

      # Save to a file as a list of integers
      np.savetxt(
          Path(data_dir) / "line-indices.txt",
          indices,
          fmt="%04d",
      )
      np.savetxt(
          Path(data_dir) / "line-indices-core.txt",
          indices_core,
          fmt="%04d",
      )

  if __name__ == "__main__":
      typer.run(main)
#+end_src

#+begin_src sh :dir ../data/n346-lines :results output verbatim
python ../../scripts/find-all-line-pixels.py
#+end_src

#+RESULTS:

*** Fitting a discrete Gaussian profile
#+begin_src python :eval no :tangle ../lib/discrete_gaussian_model.py
  import numpy as np
  import scipy.stats
  import astropy.modeling

  def _E_cdf(x, x0, sig):
      "General case of any profile via the CDF"
      return scipy.stats.norm.cdf(x, loc=x0, scale=sig)

  @astropy.modeling.custom_model
  def DiscreteGaussianModel(x, amplitude=1.0, mean=0.0, stddev=1.0, bin_width=1.0):
      """
      A Gaussian profile, but integrated over bins of width bin_width (in units of x)

      """
      return  amplitude * (
          _E_cdf(x + bin_width/2, mean, stddev) - _E_cdf(x - bin_width/2, mean, stddev)
      )

#+end_src


#+begin_src python :return plotfile :results file
  import sys
  import numpy as np
  sys.path.append("../lib")
  from discrete_gaussian_model import DiscreteGaussianModel
  from astropy.modeling import models, fitting
  from matplotlib import pyplot as plt
  import seaborn as sns

  plotfile = "discrete-gaussian-test.pdf"
  FITTER = fitting.LevMarLSQFitter()
  g0 = DiscreteGaussianModel(
      amplitude=1.0,
      mean=2.0,
      std_dev=1.0,
      bin_width=1.25,
  )
#+end_src
*** DONE Find strength of a each line in all zones
CLOSED: [2022-11-08 Tue 13:47]
:PROPERTIES:
:ID:       C597528A-4D58-439C-99B3-EA227BAED261
:END:
- Original version [2022-10-30 Sun 21:18]
  - This does just one line, but it is very slow when run repeatedly for each line
- Revised version  [2022-10-30 Sun 21:40]
  - Now do all the lines at once. Works much faster
- Second revised version [2022-11-01 Tue]
  - Mask out the lines so that blends work better
- Third revised version [2022-11-05 Sat]
  - Do Gaussian fits
- Methods:
  - Only method so far is seven-pixel window. Outermost 4 pixels are used to estimate the hyper-local base level, and its uncertainty. Innermost 3 pixels are summed to give the line flux
- [4/4] Future improvements:
  - [X] Eliminate neighboring line pixels from the BG estimation
    - This should be easy to do by setting a mask
    - We currently have 4 pixels that are used in the BG estimation, so even if both pixels on one side are masked out, we still have enough
  - [X] Use the 3-wav method to estimate the central wavelength and correct the flux for the missing wings
    - POSTPONED for now [2022-11-08 Tue] since the gaussian fits are good enough
  - [X] Maybe some kind of Gaussian fit. Here is a possible plan:
    - CANCELLED, see next item
    - Take a big enough window around the central pixel to include all possible blends: 15 pixels would probably be enough
    - Run ~find_peaks()~ to get an idea of how many lines there are. Use a minimum  strength of say 0.3 times the peak from the 3-pixel method
    - Use those as Gaussian components in a fit (plus constant)
    - This is starting to sound way to complicated, and it would still not be able to capture underlying absorption features easily.
  - [X] A simpler Gaussian plan
    - Use the same 7-point window, and unmask the central line
    - Still have any other nearby lines masked out
    - Fit a single Gaussian plus continuum
#+begin_src python :tangle ../scripts/line-bright-all-zones.py
  from mpdaf.obj import Spectrum
  import numpy as np
  from pathlib import Path
  import sys
  import yaml
  import typer
  import slugify
  from astropy.modeling import models, fitting
  from discrete_gaussian_model import DiscreteGaussianModel

  INDEX_PATTERN = "[0-9]" * 4
  FITTER = fitting.LevMarLSQFitter()

  ZONES_TO_FIX_SKY = ["0", "I", "II", "III", "MYSO"]
  SKY_SPECIES = ["OH", "O_2"]

  def get_id_string(data):
      s = f"{data['Index']:04d}-{str(data['Type']).rstrip('?')}"
      if data["ID"]:
          s += "-" + data["ID"]
          if "UIL" in data["ID"]:
              s += "-" + f"{int(np.round(data['lambda_HM']))}"
      return slugify.slugify(s)

  def sanitize(x):
      return float(np.round(x, 4))

  def sanitize_array(x: np.ndarray) -> list:
      return [sanitize(_) for _ in x.tolist()]


  def fit_gauss7(wave: np.ndarray, spec: np.ndarray, mask: np.ndarray):
      assert wave.shape == spec.shape == mask.shape == (7,)
      assert mask.dtype == bool
      # Make a copy so that we do not affect the global array
      _mask = mask.copy()
      # Unmask the central pixels for this line, so we can fit them
      _mask[2:5] = True
      # Initial guess for Gaussian
      g0 = DiscreteGaussianModel(
          amplitude=spec[3],
          mean=wave[3],
          stddev=1.0,
          bin_width=wave[1] - wave[0],
          fixed={"bin_width": True},
      )
      # Try and fit it
      return FITTER(g0, wave[_mask], spec[_mask])
      # return g0

  def is_sky_blend(d: dict):
      """Check if this line is a UIL or similar that is blended with sky"""
      if d.get("ID", "") and d.get("ID", "").endswith("+"):
          # Case where we have a blended line: check that it is with
          # a sky line by looking at the note to the ID column
          try:
              # We need to look in first element of list inside dict inside dict
              is_blend = any(s in d["Notes"]["ID"][0] for s in SKY_SPECIES)
          except (KeyError, IndexError):
              # But either of the dicts may be absent
              is_blend = False
          if d["Type"].startswith(("Med", "High")):
              # Also, do not try this with Medium or higher
              # ionization lines, since they will have real emission
              # in Zone IV
              is_blend = False
      else:
          # Or, not even a blended line
          is_blend = False
      return is_blend


  def main(
          spec_id_label: str="c007-chop-mean",
          orig_data_dir: str="all-lines-orig",
          zone_file: str="zones.yaml",
          zone_spectra_dir: str="zone_spectra",
          debug: bool=False,
  ):
      """Find line strength of all lines from all zones"""

      # First, get the zones
      with open(zone_file) as f:
          zones = yaml.safe_load(f)
      # And load the corresponding spectra
      nwave = None
      for zone in zones:
          specfile = f"{zone_spectra_dir}/{zone['label']}-{spec_id_label}-spec1d.fits"
          zone["spec"] = Spectrum(str(specfile))
          # Save the Zone IV spec when we find it, since we will use it later to fix the sky
          if zone["label"] == "zone-IV":
              spec_IV = zone["spec"]
          if nwave is None:
              nwave = len(zone["spec"].data)
          else:
              assert len(zone["spec"].data) == nwave

      # Next, get all the lines
      line_files = sorted(Path(orig_data_dir).glob(f"{INDEX_PATTERN}.yaml"))

      # And the list of indices to avoid when calculating the BG
      avoid_indices = np.loadtxt(
          Path(orig_data_dir) / "line-indices.txt",
          dtype=int,
      )
      # Make a 1D mask of acceptable BG pixels
      bg_mask = np.ones((nwave,), bool)
      bg_mask[avoid_indices] = False

      # Repeat but for the restricted map that only includes central pixel of each line
      avoid_indices = np.loadtxt(
          Path(orig_data_dir) / "line-indices-core.txt",
          dtype=int,
      )
      # Make a 1D mask of acceptable BG pixels
      bg_mask_core = np.ones((nwave,), bool)
      bg_mask_core[avoid_indices] = False

      # And an array of the wave pixel indices
      indices = np.arange(nwave)

      # Now loop over all lines
      for line_file in line_files:
          with open(line_file) as f:
              metadata = yaml.safe_load(f)
          ipeak = metadata["Index"]
          # Check if we are blended with sky
          metadata["sky_blend"] = is_sky_blend(metadata)
          # Get the strength for each zone
          for zone in zones:
              spec = zone["spec"].copy()
              # Case where we have a sky blend
              sub_iv = metadata["sky_blend"] and zone["label"].split("-")[-1] in ZONES_TO_FIX_SKY
              if sub_iv:
                  # Use Zone IV to model the sky
                  orig_spec = spec
                  spec = spec - spec_IV

              # Wide window includes BG and line
              win7 = spec.data[ipeak-3:ipeak+4]
              # Corresponding wavelengths, converted from m to Angstrom
              wave7 = 1.0e10 * spec.wave.coord(indices[ipeak-3:ipeak+4])
              # Corresponding mask
              m7 = bg_mask[ipeak-3:ipeak+4]
              # Narrow window includes only line
              win3 = spec.data[ipeak-1:ipeak+2]
              bg_npix = np.sum(m7)
              if bg_npix == 0:
                  # Use a more restrictive mask for neighboring lines in
                  # cases there were no valid BG pixels
                  m7 = bg_mask_core[ipeak-3:ipeak+4].copy()
                  # But this line still needs its 3 pixels to be blocked out
                  m7[2:5] = False
                  bg_npix = np.sum(m7)

              bg_mean = np.mean(win7[m7])
              bg_sig = np.std(win7[m7])

              line_sum = np.sum(win3 - bg_mean)
              gfit = fit_gauss7(wave7, win7 - bg_mean, m7)

              # Add extra uncertainty from difference between the
              # Gaussian fit and the direct measure of the strength
              bg_sig = np.hypot(bg_sig, np.abs(gfit.amplitude.value - line_sum))

              metadata[zone["label"]] = {
                  "Strength": sanitize(line_sum),
                  "Sigma": sanitize(bg_sig),
                  "BG npix": int(bg_npix),
                  "BG mean": sanitize(bg_mean),
                  "Pixel Wave": sanitize(wave7[3]),
                  "Zone IV subtracted": sub_iv,
              }
              metadata[zone["label"]]["Gauss Fit"] = {
                  "Amplitude": sanitize(gfit.amplitude.value),
                  "Mean Wave": sanitize(gfit.mean.value),
                  "RMS Width": sanitize(gfit.stddev.value),
              }
              if debug:
                  metadata[zone["label"]]["Window"] = {
                      "Wave": sanitize_array(wave7),
                      "Spectrum": sanitize_array(win7 - bg_mean),
                      "Fit":  sanitize_array(gfit(wave7)),
                      "BG Mask": m7.tolist(),
                  }
                  if sub_iv:
                      metadata[zone["label"]]["Window"]["Before zone IV subtraction"] = sanitize_array(
                          orig_spec.data[ipeak-3:ipeak+4] - bg_mean
                      )

                  metadata[zone["label"]]["Fit Info"] = str(FITTER.fit_info["message"])
          # Another loop over zones to increase the uncertainty estimate
          # for cases where we have corrected for a sky blend
          for zone in zones:
              if metadata[zone["label"]]["Zone IV subtracted"]:
                  # Add contributions in quadrature
                  metadata[zone["label"]]["Sigma"] = sanitize(np.sqrt(
                      # The original uncertainty for this zone
                      metadata[zone["label"]]["Sigma"] ** 2
                      # The uncertainty for zone IV
                      + metadata["zone-IV"]["Sigma"] ** 2
                      # The difference in base levels
                      + (metadata["zone-IV"]["BG mean"] - metadata[zone["label"]]["BG mean"]) ** 2
                  ))

          out_dir = Path(f"all-lines-{spec_id_label}")
          out_dir.mkdir(parents=True, exist_ok=True)
          out_path = out_dir / (get_id_string(metadata) + ".yaml")
          with open(out_path, "w") as f:
              yaml.dump(metadata, f)

  if __name__ == "__main__":
      typer.run(main)

#+end_src

#+header: :prologue "exec 2>&1" :epilogue ":"
#+begin_src sh :dir ../data/n346-lines :results verbatim
  time PYTHONPATH=../../lib python ../../scripts/line-bright-all-zones.py --debug
  echo "Last run:"
  date
#+end_src

#+RESULTS:
#+begin_example
WARNING: MpdafUnitsWarning: No physical unit in the FITS header: missing BUNIT keyword. [mpdaf.obj.data]
WARNING: MpdafUnitsWarning: No physical unit in the FITS header: missing BUNIT keyword. [mpdaf.obj.data]
WARNING: MpdafUnitsWarning: No physical unit in the FITS header: missing BUNIT keyword. [mpdaf.obj.data]
WARNING: MpdafUnitsWarning: No physical unit in the FITS header: missing BUNIT keyword. [mpdaf.obj.data]
WARNING: MpdafUnitsWarning: No physical unit in the FITS header: missing BUNIT keyword. [mpdaf.obj.data]
WARNING: MpdafUnitsWarning: No physical unit in the FITS header: missing BUNIT keyword. [mpdaf.obj.data]
WARNING: MpdafUnitsWarning: No physical unit in the FITS header: missing BUNIT keyword. [mpdaf.obj.data]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]

real	1m25.866s
user	1m25.352s
sys	0m0.928s
Last run:
Mon Jan 16 14:36:49 CST 2023
#+end_example



#+begin_src sh :dir ../data/n346-lines :results verbatim
python ../../scripts/line-bright-all-zones.py --help
#+end_src

#+RESULTS:
#+begin_example
Usage: line-bright-all-zones.py [OPTIONS]

  Find line strength of a single line from all zones

Options:
  --spec-id-label TEXT     [default: c007-chop-mean]
  --orig-data-dir TEXT     [default: all-lines-orig]
  --zone-file TEXT         [default: zones.yaml]
  --zone-spectra-dir TEXT  [default: zone_spectra]
  --debug / --no-debug     [default: False]
  --install-completion     Install completion for the current shell.
  --show-completion        Show completion for the current shell, to copy it
                           or customize the installation.

  --help                   Show this message and exit.
#+end_example



*** DONE Attempt to fix up lines that have negative fluxes
CLOSED: [2022-11-06 Sun 19:13]
- [2022-11-01 Tue] Spot checks on some lines from the 7 pixel method to see if anything can be done about negative net fluxes
- I already fixed one line (previously 1935, now 1936) by nudging its index up one, which seems more in line with its appearance in the Zone 0 spectrum
- Now I am looking at all the lines that have negative fluxes in Zone 0
  - I have loaded the table line-fluxes.csv in DataSpell and can sort on different columns


**** Deep Neutral lines with negative flux in Zone 0
Initially, there are 10 of these, out of about 120. So even if none can be fixed, it still will not affect my claim to have more than 100 lines. Look at them in order of negative flux:
  
1. 3711 at 9233 \AA
   - This is in the wing of H I 9229, so probably nothing can be done without a lot of effort
   - Verdict: Leave it
   - SECOND UPDATE [2022-11-06 Sun 19:04]: This remains problematic, even with the gaussian fits
2. 3539 at 9019 \AA
   - A similar story: in the wings of H I 9015
   - This could probably be fixed by using baseline on one side only, but leave it for now
   - UPDATE [2022-11-01 Tue 17:01]: This now has positive flux after using the line mask approach
3. 3412 at 8860 \AA
   - Once again, the same story: in the blue wing of H I 8863
   - This would be the hardest of the 3 to extract, so definitely leave it
   - UPDATE [2022-11-01 Tue 17:01]: Also now fixed
4. 3397 at 8841 \AA
   - This has a stronger sky line close by
   - But it should not be too hard to measure. I have had an idea, we will see if it works
   - UPDATE [2022-11-01 Tue]: Still negative after fix. Oh well
   - SECOND UPDATE [2022-11-06 Sun 19:04]: Now gets a positive amplitude for the Gaussian fit, hurray
5. 2614 at 7823 \AA
   - Now positive, so yay
6. 2082 at 7499 \AA
   - Also, now positive
7. That is enough, cannot be bothered with any more. I have solved at least 5 out of the 6 worst. 
8. 
9. 

*** Do something with all the lines at once
- [2022-10-30 Sun] This line of thinking shelved for now. Maybe come back to it later when I do the plots of the ratios. For the moment, I will work on doing a single line at a time.
- [2022-10-30 Sun 21:51] Actually, I did go back to treating all the lines at once, but I still worked with the individual YAML files. I will leave this here as an example of converting those little files to a big pandas dataframe
#+begin_src python :eval no :tangle ../scripts/extract-lines-by-zone.py
  from matplotlib import pyplot as plt
  from astropy.io import fits
  import numpy as np
  import yaml
  from pathlib import Path
  import pandas as pd
  import typer

  INDEX_PATTERN = "[0-9]" * 4

  def main(
          zone_file: str="zones.yaml",
          data_dir: str="all-lines-c007-chop-mean",
  ):
      # First, get the zones
      with open(zone_file) as f:
          zones = yaml.safe_load(f)

      # Next, get all the lines
      line_files = sorted(Path(data_dir).glob(f"{INDEX_PATTERN}-*.yaml"))
      data = [
          yaml.safe_load(path.open()) for path in line_files
      ]
      print(pd.DataFrame(
          {**{k: row[k] for k in ("Index", "ID")}, **row["Zones Strength"]}
          for row in data if row["Type"] and "Deep" in row["Type"]
      ))


  if __name__ == "__main__":
      typer.run(main)
#+end_src

#+begin_src sh :dir ../data/n346-lines :results output verbatim
COLUMNS=100 python ../../scripts/extract-lines-by-zone.py
#+end_src

#+RESULTS:
#+begin_example
     Index    ID   zone-0  zone-I  zone-II  zone-III  zone-IV  zone-MYSO   zone-S
0      809   UIL   5.1494  4.8073   4.7287    4.3605   4.1077     9.6405   8.3744
1     1146   UIL   4.3953  3.4410   3.4123    3.1135   2.5559     7.3462   7.1130
2     1153   UIL   4.3742  3.0831   3.2290    2.7541   3.1434     5.7033   3.8505
3     1268   UIL   3.5797  2.8320   3.1258    2.7901   2.3934     4.5156   6.1575
4     1300   UIL   4.7802  2.5236   3.3479    2.6018   2.4650     9.2132   6.1158
..     ...   ...      ...     ...      ...       ...      ...        ...      ...
115   3649   UIL   6.5941  2.8811   4.1904    2.3319   2.3899    11.0754   5.4106
116   3654   UIL   3.9402  2.0889   3.0218    2.2850   2.0370     5.0585   3.7059
117   3711  UIL+  -2.5618  4.0243  -2.1790   -5.0012  -2.5422    -7.4650  -8.0434
118   3736   UIL   3.7476  2.4520   3.0255    2.2911   2.1809     6.8280   5.4082
119   3762   UIL  14.2620  3.4208   4.5903    5.3720   2.0096    40.5786  16.5563

[120 rows x 9 columns]
#+end_example
  
** DONE Step 8: Inter-zone ratios
CLOSED: [2022-11-12 Sat 19:17]
- Do diagnostic plots for the different lines
- One possibility would be to take the ratio of each zone to the sum of the zones
  - This would keep the dimensionality to a minimum, since we have only 5 ratios
  - Or maybe 6 if we want to separate out the YSO
- Alternatively, we can normalize the strengths to H beta and plot then plot them directly
- UPDATE [2022-11-08 Tue] Still need to [[id:F7004917-496C-473F-8256-7821C94B7417][Write tables with the ratios]]
- ANOTHER UPDATE [2022-11-23 Wed] We want to improve the sky subtraction


*** DONE Line strengths normalized to H beta
CLOSED: [2022-10-31 Mon 13:13]
:PROPERTIES:
:ID:       E5A865EF-2A09-4BE9-891B-617EA2E8A6CB
:END:

- We write out to CSV tables
  - ~line-fluxes.csv~
  - ~line-uncertainties.csv~
  - ~line-gauss-{fluxes,waves,widths}.csv~
#+begin_src python :eval no :tangle ../scripts/make-line-flux-table.py
  from matplotlib import pyplot as plt
  from astropy.io import fits
  import numpy as np
  import yaml
  from pathlib import Path
  import pandas as pd
  import typer
  import sys

  INDEX_PATTERN = "[0-9]" * 4

  def main(
          zone_file: str="zones.yaml",
          data_dir: str="all-lines-c007-chop-mean",
  ):
      # First, get the zones
      with open(zone_file) as f:
          zones = yaml.safe_load(f)
      zone_labels = [z["label"] for z in zones]

      # Next, get all the lines into a big list of dicts
      line_files = sorted(Path(data_dir).glob(f"{INDEX_PATTERN}-*.yaml"))
      data = [
          yaml.safe_load(path.open()) for path in line_files
      ]

      # # Now make some dataframes, trying different techniques

      # This one gives a flat dataframe with columns for all the nested
      # dicts, but with some long column names like 'zone-III.Strength'
      df0 = pd.json_normalize(data).set_index("Index")
      unwanted_types = ["sky",  "telluric", "noise", "nan"]
      # Filter out unwanted rows. Note use of fancy .str accessor to use
      # regular string methods elementwise on a Series. Also use of @
      # inside the query string to reference python variables
      df0 = df0.query('Type.str.rstrip("?").str.lower() not in @unwanted_types')
      df0 = df0.fillna(value={"Type": "None", "ID": "None"})
      print(df0)
    
      # Make a separate frame for Strength, renaming the columns to just the zone labels
      df = df0[
          ["Type", "ID"] + [f"{zlabel}.Strength" for zlabel in zone_labels]
      ].rename(columns=lambda c: c.split(".")[0])
      # And do the same for Sigma
      df_sig = df0[
          ["Type", "ID"] + [f"{zlabel}.Sigma" for zlabel in zone_labels]
      ].rename(columns=lambda c: c.split(".")[0])
      # And the same for Gaussian fit amplitude
      df_g = df0[
          ["Type", "ID"] + [f"{zlabel}.Gauss Fit.Amplitude" for zlabel in zone_labels]
      ].rename(columns=lambda c: c.split(".")[0])
      # And for the mean wavelength
      df_wave = df0[
          ["Type", "ID"] + [f"{zlabel}.Gauss Fit.Mean Wave" for zlabel in zone_labels]
      ].rename(columns=lambda c: c.split(".")[0])
      # And for the line width
      df_width = df0[
          ["Type", "ID"] + [f"{zlabel}.Gauss Fit.RMS Width" for zlabel in zone_labels]
      ].rename(columns=lambda c: c.split(".")[0])



      # And put on scale of H beta = 100 (H beta has Index = 211)
      # We have to do the uncertainties first, otherwise Hb has already changed!
      df_sig.loc[:, zone_labels] *= 100 / df.loc[211, zone_labels]
      df.loc[:, zone_labels] *= 100 / df.loc[211, zone_labels]
      # For the gaussian amplitudes, we use Hb from the same. Note that
      # we do not multiply by the widths, since they have much larger
      # uncertainties than the amplitudes.  It makes more sense to
      # assume that all lines have approximately the same width
      df_g.loc[:, zone_labels] *= 100 / df_g.loc[211, zone_labels]

      print(df_g)

      print(df[df0.sky_blend])

      df.to_csv(Path(data_dir) / "line-fluxes.csv")
      df_sig.to_csv(Path(data_dir) / "line-uncertainties.csv")
      df_g.to_csv(Path(data_dir) / "line-gauss-fluxes.csv")
      df_wave.to_csv(Path(data_dir) / "line-gauss-waves.csv")
      df_width.to_csv(Path(data_dir) / "line-gauss-widths.csv")

  if __name__ == "__main__":
      typer.run(main)
#+end_src

#+begin_src sh :dir ../data/n346-lines :results output verbatim
COLUMNS=3000 python ../../scripts/make-line-flux-table.py
#+end_src

#+RESULTS:
#+begin_example
                                                Comments Cont_method                 ID   Region  Strength            Type    lambda_HM   lambda_obs  sky_blend  zone-0.BG mean  zone-0.BG npix                                    zone-0.Fit Info  zone-0.Gauss Fit.Amplitude  zone-0.Gauss Fit.Mean Wave  zone-0.Gauss Fit.RMS Width  zone-0.Pixel Wave  zone-0.Sigma  zone-0.Strength                           zone-0.Window.BG Mask                                  zone-0.Window.Fit                             zone-0.Window.Spectrum                                 zone-0.Window.Wave  zone-0.Zone IV subtracted  zone-I.BG mean  zone-I.BG npix                                    zone-I.Fit Info  zone-I.Gauss Fit.Amplitude  zone-I.Gauss Fit.Mean Wave  zone-I.Gauss Fit.RMS Width  zone-I.Pixel Wave  zone-I.Sigma  zone-I.Strength                           zone-I.Window.BG Mask                                  zone-I.Window.Fit                             zone-I.Window.Spectrum                                 zone-I.Window.Wave  zone-I.Zone IV subtracted  zone-II.BG mean  zone-II.BG npix                                   zone-II.Fit Info  zone-II.Gauss Fit.Amplitude  zone-II.Gauss Fit.Mean Wave  zone-II.Gauss Fit.RMS Width  zone-II.Pixel Wave  zone-II.Sigma  zone-II.Strength                          zone-II.Window.BG Mask  ...                                   zone-IV.Fit Info zone-IV.Gauss Fit.Amplitude zone-IV.Gauss Fit.Mean Wave  zone-IV.Gauss Fit.RMS Width  zone-IV.Pixel Wave  zone-IV.Sigma zone-IV.Strength                          zone-IV.Window.BG Mask                                 zone-IV.Window.Fit                            zone-IV.Window.Spectrum                                zone-IV.Window.Wave  zone-IV.Zone IV subtracted  zone-MYSO.BG mean zone-MYSO.BG npix                                 zone-MYSO.Fit Info zone-MYSO.Gauss Fit.Amplitude zone-MYSO.Gauss Fit.Mean Wave  zone-MYSO.Gauss Fit.RMS Width  zone-MYSO.Pixel Wave  zone-MYSO.Sigma zone-MYSO.Strength                        zone-MYSO.Window.BG Mask                               zone-MYSO.Window.Fit                          zone-MYSO.Window.Spectrum                              zone-MYSO.Window.Wave  zone-MYSO.Zone IV subtracted  zone-S.BG mean zone-S.BG npix                                    zone-S.Fit Info zone-S.Gauss Fit.Amplitude zone-S.Gauss Fit.Mean Wave  zone-S.Gauss Fit.RMS Width  zone-S.Pixel Wave  zone-S.Sigma zone-S.Strength                           zone-S.Window.BG Mask                                  zone-S.Window.Fit                             zone-S.Window.Spectrum                                 zone-S.Window.Wave  zone-S.Zone IV subtracted                                           Notes.ID zone-0.Window.Before zone IV subtraction zone-I.Window.Before zone IV subtraction zone-II.Window.Before zone IV subtraction zone-III.Window.Before zone IV subtraction  zone-MYSO.Window.Before zone IV subtraction  Notes.Type
Index
7      Must be blend because more widely distributed ...        11.0  [Fe III] 4607.12+   GLOB-E       NaN          Fe, Ni  4607.250000  4608.694824      False          3.6232               4  The relative error between two consecutive ite...                      1.5432                   4608.9970                      0.7783          4608.6948        0.1417           1.5112   [True, True, False, False, False, True, True]  [0.0, 0.004, 0.1762, 0.8396, 0.49, 0.0332, 0.0...  [0.1605, -0.2151, 0.1876, 0.8407, 0.4829, 0.06...  [4604.9448, 4606.1948, 4607.4448, 4608.6948, 4...                      False          3.9019               4  The relative error between two consecutive ite...                      0.5607                   4608.3596                      0.7349          4608.6948        0.1581           0.6002   [True, True, False, False, False, True, True]  [0.0, 0.0101, 0.1843, 0.3127, 0.0529, 0.0007, ...  [0.0606, -0.2224, 0.2337, 0.2862, 0.0804, 0.19...  [4604.9448, 4606.1948, 4607.4448, 4608.6948, 4...                      False           4.2489                4  Both actual and predicted relative reductions ...                       0.2264                    4608.2914                       0.0233           4608.6948         0.7917           -0.4672   [True, True, False, False, False, True, True]  ...  The relative error between two consecutive ite...                      5.1581                   4608.7136                       1.1712           4608.6948         0.2819           4.9440   [True, True, False, False, False, True, True]  [0.0183, 0.2544, 1.2294, 2.0961, 1.2682, 0.270...  [0.1339, -0.3128, 1.6215, 1.8168, 1.5057, 0.05...  [4604.9448, 4606.1948, 4607.4448, 4608.6948, 4...                       False             4.3030                 4  The relative error between two consecutive ite...                       16.1841                     4609.1234                         0.4645             4608.6948           1.6916            16.1728   [True, True, False, False, False, True, True]   [0.0, 0.0, 0.1886, 10.5542, 5.4263, 0.0149, 0.0]  [2.7138, -1.9219, 0.1894, 10.5438, 5.4396, -0....  [4604.9448, 4606.1948, 4607.4448, 4608.6948, 4...                         False          1.2619              4  The relative error between two consecutive ite...                    26.7869                  4610.2433                      1.3284          4608.6948       13.1343         14.9487   [True, True, False, False, False, True, True]  [0.0057, 0.1276, 1.2302, 5.1583, 9.4719, 7.641...  [-4.2568, -6.7116, -1.2339, 7.5162, 8.6664, 7....  [4604.9448, 4606.1948, 4607.4448, 4608.6948, 4...                      False                                [plus N II 4607.16]                                      NaN                                      NaN                                       NaN                                        NaN                                          NaN         NaN
35                     Very broad due to multiple blends        11.0      O II 4641.81+       BS       5.2       High Perm  4640.310000  4643.694824      False          3.0696               4  The relative error between two consecutive ite...                      3.7053                   4643.3533                      1.6082          4643.6948        1.0516           2.8398   [True, True, False, False, False, True, True]  [0.1322, 0.4758, 0.9629, 1.0969, 0.7035, 0.253...  [-0.2586, 0.781, 0.9548, 0.8246, 1.0603, 0.292...  [4639.9448, 4641.1948, 4642.4448, 4643.6948, 4...                      False          3.1396               4  The relative error between two consecutive ite...                      2.7929                   4643.4405                      1.5151          4643.6948        0.5772           2.3332   [True, True, False, False, False, True, True]  [0.0721, 0.3165, 0.7289, 0.882, 0.561, 0.1874,...  [0.2302, 0.2972, 0.763, 0.7041, 0.8661, 0.0576...  [4639.9448, 4641.1948, 4642.4448, 4643.6948, 4...                      False           3.8303                4  The relative error between two consecutive ite...                      -1.0877                    4643.1854                       0.1786           4643.6948         0.5955           -0.5320   [True, True, False, False, False, True, True]  ...  Number of calls to function has reached maxfev...                      2.8888                   4641.7636                       0.2506           4643.6948         1.1715           2.5913   [True, True, False, False, False, True, True]          [0.0, 1.7009, 1.1879, 0.0, 0.0, 0.0, 0.0]  [-0.3383, 1.7014, 1.1873, 0.3239, 1.0801, 0.09...  [4639.9448, 4641.1948, 4642.4448, 4643.6948, 4...                       False             4.4603                 4  The relative error between two consecutive ite...                       10.8858                     4645.0846                         1.4555             4643.6948           4.5349             6.8716   [True, True, False, False, False, True, True]  [0.0101, 0.125, 0.7696, 2.3567, 3.6025, 2.7523...  [-2.8277, -1.1786, 0.5232, 2.9318, 3.4167, 2.4...  [4639.9448, 4641.1948, 4642.4448, 4643.6948, 4...                         False          5.7540              4  The relative error between two consecutive ite...                    25.4870                  4643.6542                      1.2336          4643.6948        4.3870         22.3902   [True, True, False, False, False, True, True]  [0.1525, 1.5878, 6.3551, 9.874, 5.9771, 1.4038...  [-4.8378, -0.2107, 7.9351, 9.516, 4.9392, 3.62...  [4639.9448, 4641.1948, 4642.4448, 4643.6948, 4...                      False  [plus 4638.86 plus N II 4643.06 plus N III 464...                                      NaN                                      NaN                                       NaN                                        NaN                                          NaN         NaN
42                          Morphology similar to Si III        11.0      O II 4649.13+       BS       3.5       High Perm  4649.650000  4652.444824      False          2.4815               4  The relative error between two consecutive ite...                      3.6042                   4652.4410                      0.9254          4652.4448        0.3594           3.4218   [True, True, False, False, False, True, True]  [0.0013, 0.0765, 0.8269, 1.8041, 0.819, 0.075,...  [0.0225, 0.4921, 0.7237, 1.8249, 0.8732, -0.19...  [4648.6948, 4649.9448, 4651.1948, 4652.4448, 4...                      False          3.0978               4  The relative error between two consecutive ite...                      2.7602                   4651.9806                      1.2033          4652.4448        0.5851           2.2677   [True, True, False, False, False, True, True]  [0.0357, 0.2954, 0.9007, 1.0226, 0.4327, 0.067...  [-0.2346, 0.5078, 0.7558, 1.1181, 0.3938, 0.01...  [4648.6948, 4649.9448, 4651.1948, 4652.4448, 4...                      False           3.3852                4  The relative error between two consecutive ite...                       2.7684                    4651.7438                       1.2266           4652.4448         0.9289            1.9812   [True, True, False, False, False, True, True]  ...  The relative error between two consecutive ite...                      7.3599                   4652.3470                       0.9671           4652.4448         0.5681           7.0506   [True, True, False, False, False, True, True]  [0.0064, 0.2369, 1.9119, 3.5309, 1.5216, 0.149...  [0.0591, 0.6242, 1.7996, 3.5014, 1.7495, -0.71...  [4648.6948, 4649.9448, 4651.1948, 4652.4448, 4...                       False             1.9815                 4  The relative error between two consecutive ite...                      -13.3829                     4651.9495                         1.1485             4652.4448           1.6795           -12.3987   [True, True, False, False, False, True, True]  [-0.1426, -1.3891, -4.5532, -5.0894, -1.9426, ...  [2.308, -0.8691, -5.5704, -4.0767, -2.7517, -0...  [4648.6948, 4649.9448, 4651.1948, 4652.4448, 4...                         False          3.6862              4  The relative error between two consecutive ite...                   -17.2870                  4651.7782                      1.2115          4652.4448        3.5640        -14.3756   [True, True, False, False, False, True, True]  [-0.3477, -2.3865, -6.1269, -5.9316, -2.1648, ...  [-1.6176, -2.2817, -5.8258, -6.217, -2.3329, 1...  [4648.6948, 4649.9448, 4651.1948, 4652.4448, 4...                      False                                     [plus 4650.84]                                      NaN                                      NaN                                       NaN                                        NaN                                          NaN         NaN
49     Shows diffuse emission, particularly in SE and NE        101B   [Fe III] 4658.10   GLOB-E       0.6          Fe, Ni  4657.930000  4661.194824      False          3.3398               4  The relative error between two consecutive ite...                      5.1656                   4660.5449                      0.5761          4661.1948        0.6911           5.4176   [True, True, False, False, False, True, True]    [0.0, 0.0864, 2.5854, 2.4242, 0.0695, 0.0, 0.0]  [-0.9636, -0.2011, 2.6483, 2.3649, 0.4044, 0.6...  [4657.4448, 4658.6948, 4659.9448, 4661.1948, 4...                      False          3.4324               4  The relative error between two consecutive ite...                      1.7243                   4663.9481                      2.0458          4661.1948        0.9625           0.8285   [True, True, False, False, False, True, True]  [0.0031, 0.0169, 0.0647, 0.172, 0.3186, 0.4108...  [-0.3572, -0.3365, 0.3091, 0.0336, 0.4859, 0.2...  [4657.4448, 4658.6948, 4659.9448, 4661.1948, 4...                      False           3.1534                4  The relative error between two consecutive ite...                       6.6072                    4660.7091                       0.9641           4661.1948         0.2420            6.3688   [True, True, False, False, False, True, True]  ...  The relative error between two consecutive ite...                     -4.3001                   4661.3764                       0.9480           4661.1948         0.8774          -4.1348   [True, True, False, False, False, True, True]  [-0.001, -0.0636, -0.7844, -2.0751, -1.2168, -...  [-1.1958, -0.0243, -0.8192, -2.0185, -1.2972, ...  [4657.4448, 4658.6948, 4659.9448, 4661.1948, 4...                       False             4.8264                 4  The relative error between two consecutive ite...                      187.6942                     4660.4396                         0.7893             4661.1948          21.3397           168.8996   [True, True, False, False, False, True, True]  [0.2511, 14.3884, 91.5006, 74.0106, 7.4622, 0....  [-8.9683, 16.9501, 90.0081, 75.6406, 3.2509, -...  [4657.4448, 4658.6948, 4659.9448, 4661.1948, 4...                         False          6.6081              4  The relative error between two consecutive ite...                    13.0082                  4660.1106                      1.0259          4661.1948        4.5580          8.9574   [True, True, False, False, False, True, True]  [0.2948, 2.5636, 5.8848, 3.634, 0.5969, 0.0252...  [0.8032, 2.7862, 5.4231, 4.4807, -0.9464, -2.9...  [4657.4448, 4658.6948, 4659.9448, 4661.1948, 4...                      False                                                NaN                                      NaN                                      NaN                                       NaN                                        NaN                                          NaN         NaN
71                                                  None        11.0     He II  4685.68       BS      44.0        High Neb  4685.550000  4688.694824      False          3.2183               4  The relative error between two consecutive ite...                     -4.1716                   4688.4446                      1.2610          4688.6948        0.5724          -3.6597   [True, True, False, False, False, True, True]  [-0.0449, -0.3649, -1.1862, -1.5562, -0.8254, ...  [0.1942, -0.3071, -1.3076, -1.4381, -0.9139, -...  [4684.9448, 4686.1948, 4687.4448, 4688.6948, 4...                      False          3.1563               4  The relative error between two consecutive ite...                      0.9884                   4686.8494                      0.8762          4688.6948        0.6403           0.4110   [True, True, False, False, False, True, True]  [0.0693, 0.4096, 0.4266, 0.0785, 0.0024, 0.0, ...  [0.0512, 0.4206, 0.4148, 0.1052, -0.1089, -0.1...  [4684.9448, 4686.1948, 4687.4448, 4688.6948, 4...                      False           3.5134                4  Both actual and predicted relative reductions ...                       0.3836                    4688.4292                       0.0374           4688.6948         0.8276           -0.3761   [True, True, False, False, False, True, True]  ...  The relative error between two consecutive ite...                     10.6735                   4688.0969                       0.6721           4688.6948         0.4660          10.4544   [True, True, False, False, False, True, True]  [0.0009, 0.3055, 4.859, 5.1408, 0.366, 0.0012,...  [-0.0372, 0.2084, 4.8877, 5.1139, 0.4528, -0.6...  [4684.9448, 4686.1948, 4687.4448, 4688.6948, 4...                       False             3.9683                 4  The relative error between two consecutive ite...                      -31.1214                     4688.7758                         1.1948             4688.6948           4.0413           -27.6147   [True, True, False, False, False, True, True]  [-0.1105, -1.4677, -7.0487, -12.3943, -8.0241,...  [1.1167, -0.6956, -7.5836, -12.2051, -7.8261, ...  [4684.9448, 4686.1948, 4687.4448, 4688.6948, 4...                         False          8.7537              4  The relative error between two consecutive ite...                  -231.2460                  4688.3235                      1.0036          4688.6948       14.2747       -217.8395   [True, True, False, False, False, True, True]  [-0.6947, -14.7998, -77.0508, -101.5975, -34.1...  [0.9002, -8.0838, -81.4856, -97.9764, -38.3775...  [4684.9448, 4686.1948, 4687.4448, 4688.6948, 4...                      False                                                NaN                                      NaN                                      NaN                                       NaN                                        NaN                                          NaN         NaN

3707                                                None     11, 101        H I 9229.01   GLOB-E      92.0         Med Neb  9228.820000  9233.694824      False         -0.5235               3  The relative error between two consecutive ite...                    168.2004                   9234.1019                      0.8904          9233.6948        7.0350         161.7562  [True, True, False, False, False, True, False]  [0.0061, 0.8663, 19.8486, 79.641, 59.495, 8.15...  [-1.6235, -2.3456, 21.7177, 77.3989, 62.6396, ...  [9229.9448, 9231.1948, 9232.4448, 9233.6948, 9...                      False          0.1762               3  The relative error between two consecutive ite...                     33.4341                   9233.6929                      0.9165          9233.6948        1.3803          32.5337  [True, True, False, False, False, True, False]  [0.0109, 0.674, 7.6164, 16.8752, 7.5793, 0.667...  [0.7769, 0.7021, 7.6027, 16.492, 8.439, -1.478...  [9229.9448, 9231.1948, 9232.4448, 9233.6948, 9...                      False          -0.3030                3  The relative error between two consecutive ite...                     126.2316                    9234.2028                       0.7970           9233.6948         5.0062          121.8144  [True, True, False, False, False, True, False]  ...  The relative error between two consecutive ite...                    105.5433                   9234.1543                       0.8863           9233.6948         5.8784         100.4537  [True, True, False, False, False, True, False]  [0.0028, 0.4425, 11.222, 48.9219, 39.1366, 5.6...  [-1.2833, -2.785, 12.2847, 47.7099, 40.459, 4....  [9229.9448, 9231.1948, 9232.4448, 9233.6948, 9...                       False            -0.0936                 3  The relative error between two consecutive ite...                      845.7387                     9233.9258                         0.9686             9233.6948          38.3417           807.5090  [True, True, False, False, False, True, False]  [0.2236, 12.3306, 146.8049, 397.065, 251.4055,...  [-3.1116, -0.8112, 150.3067, 384.7492, 272.453...  [9229.9448, 9231.1948, 9232.4448, 9233.6948, 9...                         False         -1.9528              3  The relative error between two consecutive ite...                    99.5781                  9234.2831                      0.7510          9233.6948        4.7016         95.7906  [True, True, False, False, False, True, False]  [0.0, 0.0517, 5.2357, 46.4427, 43.5333, 4.2783...  [-0.8549, -2.9031, 5.7492, 46.069, 43.9724, 3....  [9229.9448, 9231.1948, 9232.4448, 9233.6948, 9...                      False                                                NaN                                      NaN                                      NaN                                       NaN                                        NaN                                          NaN         NaN
3711   Severe blend with red wing of H I line. Streng...       101.0               UIL+  BY-HAND       5.0    Deep Neutral  9233.457707  9238.694824      False          1.2112               3  The relative error between two consecutive ite...                     -7.2963                   9239.5083                      1.8293          9238.6948        1.9353          -6.1954  [False, True, False, False, False, True, True]  [-0.0976, -0.4025, -1.058, -1.774, -1.8983, -1...  [60.9048, 2.2343, -3.4788, -1.0637, -1.6529, -...  [9234.9448, 9236.1948, 9237.4448, 9238.6948, 9...                      False          0.2995               3  The relative error between two consecutive ite...                      4.2906                   9240.0234                      1.5888          9238.6948        1.6290           3.1257  [False, True, False, False, False, True, True]  [0.0101, 0.083, 0.3756, 0.9419, 1.3113, 1.0141...  [8.3157, -1.6022, 0.8297, 1.2205, 1.0755, 0.93...  [9234.9448, 9236.1948, 9237.4448, 9238.6948, 9...                      False           1.4074                3  Number of calls to function has reached maxfev...                      -5.8446                    9238.1946                       0.8110           9238.6948         1.1429           -6.4012  [False, True, False, False, False, True, True]  ...  The relative error between two consecutive ite...                     -8.4685                   9238.7686                       1.2164           9238.6948         1.6785          -8.2472  [False, True, False, False, False, True, True]  [-0.0351, -0.4259, -1.933, -3.3194, -2.1669, -...  [38.7409, 2.3503, -3.7717, -2.7873, -1.6882, -...  [9234.9448, 9236.1948, 9237.4448, 9238.6948, 9...                       False             2.1306                 3  The relative error between two consecutive ite...                      -13.9716                     9238.4542                         1.0353             9238.6948           1.2125           -13.8570  [False, True, False, False, False, True, True]  [-0.0368, -0.762, -4.1638, -6.1927, -2.5294, -...  [270.2289, 1.6986, -5.7775, -5.2602, -2.8193, ...  [9234.9448, 9236.1948, 9237.4448, 9238.6948, 9...                         False          2.7124              3  The relative error between two consecutive ite...                   -17.3690                  9238.0776                      1.0258          9238.6948        1.3614        -16.1805  [False, True, False, False, False, True, True]  [-0.1238, -1.7861, -6.7202, -6.7749, -1.8305, ...  [39.3072, -0.9072, -7.6387, -5.8625, -2.6793, ...  [9234.9448, 9236.1948, 9237.4448, 9238.6948, 9...                      False                         [plus wing of H I 9229.01]                                      NaN                                      NaN                                       NaN                                        NaN                                          NaN         NaN
3720       Has diffuse emission like other neutral lines        11.0      Ca I] 9244.31   GLOB-E       1.4         Neutral  9244.400000  9249.944824      False          0.7786               4  The relative error between two consecutive ite...                      1.4077                   9248.8169                      0.9035          9249.9448        0.5012           0.9947   [True, True, False, False, False, True, True]  [0.0188, 0.2683, 0.7137, 0.3698, 0.0362, 0.000...  [-0.3312, 0.3435, 0.6476, 0.478, -0.1308, -0.2...  [9246.1948, 9247.4448, 9248.6948, 9249.9448, 9...                      False          0.6992               4  The relative error between two consecutive ite...                      0.8197                   9249.2088                      1.0288          9249.9448        0.2259           0.6341   [True, True, False, False, False, True, True]  [0.0081, 0.1017, 0.3351, 0.2984, 0.0716, 0.004...  [-0.1651, 0.1876, 0.2468, 0.391, -0.0037, -0.0...  [9246.1948, 9247.4448, 9248.6948, 9249.9448, 9...                      False           1.0859                4  Number of calls to function has reached maxfev...                       0.4888                    9248.0496                       0.2227           9249.9448         0.4722            0.0596   [True, True, False, False, False, True, True]  ...  The relative error between two consecutive ite...                     -0.5237                   9249.3149                       0.2258           9249.9448         0.1694          -0.4624   [True, True, False, False, False, True, True]   [-0.0, -0.0, -0.2664, -0.2573, -0.0, -0.0, -0.0]  [-0.2381, 0.1698, -0.2694, -0.2652, 0.0723, 0....  [9246.1948, 9247.4448, 9248.6948, 9249.9448, 9...                       False            -0.0408                 4  The relative error between two consecutive ite...                       50.1959                     9249.1502                         0.7992             9249.9448           7.2010            43.9944   [True, True, False, False, False, True, True]  [0.0888, 4.3393, 24.8879, 18.98, 1.8787, 0.021...  [-4.9342, 5.3234, 23.9389, 20.1395, -0.084, -0...  [9246.1948, 9247.4448, 9248.6948, 9249.9448, 9...                         False          1.7108              4  The relative error between two consecutive ite...                    -2.8274                  9250.7494                      0.1279          9249.9448        3.4133          0.3172   [True, True, False, False, False, True, True]   [-0.0, -0.0, -0.0, -0.2267, -2.6006, -0.0, -0.0]  [-1.6839, 1.9546, 3.814, -0.8257, -2.6711, -0....  [9246.1948, 9247.4448, 9248.6948, 9249.9448, 9...                      False                                                NaN                                      NaN                                      NaN                                       NaN                                        NaN                                          NaN         NaN
3736                        Diffuse emission is marginal        101B                UIL   GLOB-E       1.0  Deep Neutral??  9262.160000  9269.944824      False          0.6153               4  The relative error between two consecutive ite...                      2.1653                   9269.6641                      1.2316          9269.9448        0.3511           1.9015   [True, True, False, False, False, True, True]  [0.0217, 0.189, 0.6326, 0.8207, 0.4136, 0.0805...  [0.2476, 0.2081, 0.5516, 0.8161, 0.5339, -0.17...  [9266.1948, 9267.4448, 9268.6948, 9269.9448, 9...                      False          0.7495               4  The relative error between two consecutive ite...                      0.3947                   9267.7845                      1.8198          9269.9448        0.2209           0.2035   [True, True, False, False, False, True, True]  [0.0735, 0.1043, 0.0941, 0.0539, 0.0196, 0.004...  [0.0534, 0.1517, 0.0327, 0.0862, 0.0845, -0.13...  [9266.1948, 9267.4448, 9268.6948, 9269.9448, 9...                      False           0.8909                4  The relative error between two consecutive ite...                       0.4014                    9270.7524                       0.7236           9269.9448         0.0807            0.3529   [True, True, False, False, False, True, True]  ...  The relative error between two consecutive ite...                      0.5151                   9268.4092                       1.8209           9269.9448         0.2275           0.3106   [True, True, False, False, False, True, True]  [0.0679, 0.1209, 0.1367, 0.0983, 0.0449, 0.013...  [0.0973, 0.0967, 0.095, 0.1855, 0.03, -0.0646,...  [9266.1948, 9267.4448, 9268.6948, 9269.9448, 9...                       False             0.9923                 4  The relative error between two consecutive ite...                        6.1748                     9268.1400                         2.2124             9269.9448           2.6238             3.8511   [True, True, False, False, False, True, True]  [0.9427, 1.3091, 1.3321, 0.9934, 0.5428, 0.217...  [1.3064, 1.0771, 0.7778, 1.5724, 1.5009, -0.85...  [9266.1948, 9267.4448, 9268.6948, 9269.9448, 9...                         False          0.8114              4  The relative error between two consecutive ite...                     9.5650                  9265.8853                      2.6456          9269.9448        6.7926          2.9740   [True, True, False, False, False, True, True]  [1.7743, 1.5062, 1.027, 0.5625, 0.2474, 0.0874...  [1.8626, 1.4025, 0.6521, 1.2057, 1.1162, -1.51...  [9266.1948, 9267.4448, 9268.6948, 9269.9448, 9...                      False                                                NaN                                      NaN                                      NaN                                       NaN                                        NaN                                          NaN         NaN
3762                                                None     11, 101                UIL   GLOB-E      10.2   Deep Neutral?  9297.640000  9302.444824      False          0.4444               4  The relative error between two consecutive ite...                     13.1954                   9302.6743                      0.8388          9302.4448        0.3949          12.9288   [True, True, False, False, False, True, True]  [0.0004, 0.0795, 1.9545, 6.9565, 3.876, 0.3248...  [-0.1385, -0.2325, 1.9822, 6.837, 4.1095, -0.1...  [9298.6948, 9299.9448, 9301.1948, 9302.4448, 9...                      False          1.7823               4  The relative error between two consecutive ite...                     -1.8028                   9303.6285                      0.5933          9302.4448        0.7964          -1.9261   [True, True, False, False, False, True, True]  [-0.0, -0.0, -0.0021, -0.3102, -1.2707, -0.218...  [-0.6093, -0.4296, -0.3854, -0.2525, -1.2882, ...  [9298.6948, 9299.9448, 9301.1948, 9302.4448, 9...                      False           2.3871                4  The relative error between two consecutive ite...                      -2.0752                    9303.4528                       0.0347           9302.4448         1.0881           -2.5710   [True, True, False, False, False, True, True]  ...  Both actual and predicted relative reductions ...                     -0.6755                   9245.5186                       6.8853           9302.4448         1.1194          -0.3459   [True, True, False, False, False, True, True]         [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]  [0.5977, 1.3543, 0.8048, 0.1429, -1.2936, -1.4...  [9298.6948, 9299.9448, 9301.1948, 9302.4448, 9...                       False            -1.8799                 4  The relative error between two consecutive ite...                       48.1377                     9302.4899                         0.9579             9302.4448           3.8404            46.2184   [True, True, False, False, False, True, True]  [0.0224, 1.0609, 10.5712, 23.3687, 11.7648, 1....  [2.8803, 3.5275, 9.4936, 23.2649, 13.46, -1.98...  [9298.6948, 9299.9448, 9301.1948, 9302.4448, 9...                         False         -0.5654              4  The relative error between two consecutive ite...                    18.6931                  9302.4314                      0.8820          9302.4448        3.3325         18.2524   [True, True, False, False, False, True, True]  [0.0039, 0.3213, 4.2365, 9.7467, 4.0832, 0.298...  [3.6049, 2.7645, 3.3633, 9.9299, 4.9592, -2.01...  [9298.6948, 9299.9448, 9301.1948, 9302.4448, 9...                      False                                                NaN                                      NaN                                      NaN                                       NaN                                        NaN                                          NaN         NaN

[262 rows x 114 columns]
                 Type                 ID    zone-0    zone-I   zone-II  zone-III   zone-IV zone-MYSO    zone-S
Index                                                                                                         
7              Fe, Ni  [Fe III] 4607.12+  0.028772  0.043522   0.00533  0.007463  0.110371  0.066075  0.598223
35          High Perm      O II 4641.81+  0.069084  0.216787 -0.025609  0.017965  0.061813  0.044443  0.569193
42          High Perm      O II 4649.13+  0.067199  0.214249  0.065181  0.098565  0.157484 -0.054638 -0.386065
49             Fe, Ni   [Fe III] 4658.10  0.096311  0.133842  0.155563  0.070989 -0.092012    0.7663  0.290508
71           High Neb     He II  4685.68 -0.077778  0.076721  0.009032 -0.024033  0.228387 -0.127059 -5.164343
...               ...                ...       ...       ...       ...       ...       ...       ...       ...
3707          Med Neb        H I 9229.01  3.136035  2.595186  2.972065  2.734892  2.258372  3.452899  2.223846
3711     Deep Neutral               UIL+ -0.136037   0.33304 -0.137608 -0.174917 -0.181205 -0.057042 -0.387896
3720          Neutral      Ca I] 9244.31  0.026246  0.063626  0.011509 -0.007199 -0.011206  0.204935 -0.063143
3736   Deep Neutral??                UIL  0.040371  0.030637  0.009451  0.002212  0.011022   0.02521  0.213612
3762    Deep Neutral?                UIL  0.246023 -0.139935  -0.04886  0.120681 -0.014454  0.196532  0.417467

[262 rows x 9 columns]
                 Type               ID    zone-0    zone-I   zone-II  zone-III   zone-IV zone-MYSO    zone-S
Index                                                                                                       
1626    Deep Neutral?             UIL+  0.070244  0.050464   0.02663  0.010725 -0.005092  0.094575  0.040042
2298          Neutral     N I 7468.31+  0.066475  0.170162  0.023887 -0.009513  0.017954  0.438438  0.046019
2489     Deep Neutral             UIL+  0.211095  0.202595  0.108054 -0.024534  0.010785  0.004177 -0.057341
2501    Deep Neutral?             UIL+  0.028732 -0.017291 -0.006461  0.006612  0.018839  0.008031  0.019453
2556     Deep Neutral             UIL+  0.116111 -0.062161 -0.048611  0.011297  0.177901  0.078723  0.278521
2602     Deep Neutral             UIL+  0.207817  0.197192  0.085212 -0.054733  0.053502  0.051335  0.079519
2614    Deep Neutral?             UIL+  0.068443   0.01772  0.042065   0.00054 -0.039919  0.029631  0.001795
2623        Low Neb??  [P II] 7875.99+   0.02529  0.005459  0.015842 -0.004799 -0.008136   0.01381  0.028694
2657    Deep Neutral?             UIL+  0.062798 -0.005618 -0.016739 -0.008993   0.07556  0.035756  0.099946
2692     Deep Neutral             UIL+  0.199958  0.013615 -0.000622 -0.015851  0.208141  0.121246  0.391108
2731     Deep Neutral             UIL+  0.163917  0.081846  0.040541 -0.008499  0.015344  0.029083 -0.060777
2951     Deep Neutral             UIL+  0.165447  0.116301 -0.018051 -0.041408   0.06895 -0.044535  -0.32309
3091     Deep Neutral             UIL+  0.619314  0.347382  0.287153 -0.076709 -0.023134  0.275467  0.142772
3244     Deep Neutral             UIL+  0.243174  0.088156  0.108271  0.023296  0.044592  0.071913  0.099822
3263     Deep Neutral             UIL+  0.061839  0.056408   0.01309 -0.021893  -0.03291  0.039112   -0.1173
3561   Deep Neutral??             UIL+ -0.027033 -0.234734 -0.110024  0.070822  0.014775 -0.017986 -0.165421
#+end_example


Saved the previous version 
#+begin_example
                 Type               ID    zone-0    zone-I   zone-II  zone-III   zone-IV zone-MYSO    zone-S
Index                                                                                                       
2298          Neutral     N I 7468.31+  0.066475  0.170154  0.023887 -0.009513  0.017954  0.438438  0.046019
2489     Deep Neutral             UIL+  0.211095  0.202603  0.108056 -0.024532  0.010785  0.004177 -0.057341
2501    Deep Neutral?             UIL+  0.028732 -0.017299 -0.006461  0.006612  0.018839  0.008031  0.019453
2556     Deep Neutral             UIL+  0.116113 -0.062161 -0.048611  0.011297  0.177901  0.078723  0.278521
2602     Deep Neutral             UIL+  0.207817  0.197192  0.085212 -0.054731  0.053502  0.051335  0.079519
2614    Deep Neutral?             UIL+  0.033598 -0.125754 -0.001894 -0.031892 -0.039919  0.021968  0.001795
2623        Low Neb??  [P II] 7875.99+  0.018189 -0.023784  0.006885 -0.011409 -0.008136  0.012248  0.028694
2657    Deep Neutral?             UIL+  0.062798 -0.005618 -0.016739 -0.008993   0.07556  0.035757  0.099946
2692     Deep Neutral             UIL+  0.199958  0.013615 -0.000622 -0.015851  0.208141  0.121246  0.391108
2731     Deep Neutral             UIL+  0.163917  0.081846  0.040541 -0.008499  0.015344  0.029083 -0.060777
2951     Deep Neutral             UIL+  0.165445  0.116301 -0.018053  -0.04141   0.06895 -0.044535  -0.32309
3091     Deep Neutral             UIL+  0.599119  0.264239  0.261679 -0.095505 -0.023134  0.271026  0.142772
3244     Deep Neutral             UIL+  0.243174  0.088156  0.108271  0.023296  0.044592  0.071913  0.099822
3263     Deep Neutral             UIL+  0.033111 -0.061882 -0.023154 -0.048632  -0.03291  0.032795   -0.1173
3561   Deep Neutral??             UIL+ -0.027033 -0.234734 -0.110026  0.070822  0.014775 -0.017986 -0.165421
#+end_example



*** DONE Figures showing the line fluxes
CLOSED: [2022-11-08 Tue 13:48]
:PROPERTIES:
:ID:       1DCB8F2F-FC0E-4042-99B0-1E57C35413C7
:END:

**** Simple plots of fluxes by zone and ratio vs flux
#+begin_src python :eval no :tangle ../scripts/plot-fluxes-by-zone.py
  from matplotlib import pyplot as plt
  import seaborn as sns
  from pathlib import Path
  import pandas as pd
  import yaml
  import typer

  def main(
          id_label: str,
  ):
      """Plot of line fluxes from zones 0 and I"""
      fig, axes = plt.subplots(2,  2, figsize=(10, 10))
      figfile = f"fluxes-by-zone-{id_label}.pdf"

      df = pd.read_csv(f"all-lines-{id_label}/line-fluxes.csv")
      df_sig = pd.read_csv(f"all-lines-{id_label}/line-uncertainties.csv")

      # m_deep = df.Type.str.startswith("Deep")
      m_deep = df.ID.str.startswith("UIL")
      m_neut = df.Type.str.startswith("Neutral")
      m_low = df.Type.str.startswith("Low")
      m_med = df.Type.str.startswith("Med Neb")
      m_high = df.Type.str.startswith("High")

      xmin, xmax = 5e-4, 2000.0
      for ax, [zone_A,  zone_B] in zip(
              axes.flat,
              [
                  ["0", "I"],
                  ["0", "II"],
                  ["0", "MYSO"],
                  ["III", "IV"],
              ]
      ):

          ax.scatter(f"zone-{zone_A}", f"zone-{zone_B}", alpha=0.4, data=df[m_deep], label="Deep")
          ax.scatter(f"zone-{zone_A}", f"zone-{zone_B}", alpha=0.4, data=df[m_neut], label="Neutral")
          ax.scatter(f"zone-{zone_A}", f"zone-{zone_B}", alpha=0.4, data=df[m_low], label="Low Neb")
          ax.scatter(f"zone-{zone_A}", f"zone-{zone_B}", alpha=0.4, data=df[m_med], label="Medium Neb")
          ax.scatter(f"zone-{zone_A}", f"zone-{zone_B}", alpha=0.4, data=df[m_high], label="High Neb")
          ax.set_xscale("log")
          ax.set_yscale("log")
          ax.axhline(0.0,  color="k")
          ax.axvline(0.0,  color="k")
          ax.plot([xmin, xmax], [xmin, xmax], color="k")
          ax.set(
              xlabel=f"Zone {zone_A} Intensity",
              ylabel=f"Zone {zone_B} Intensity",
              xlim=[xmin, xmax],
              ylim=[xmin, xmax],
          )
          ax.set_aspect("equal")
      ax.legend()
      fig.tight_layout()
      fig.savefig(figfile)
      print(figfile, end="")


  if __name__ == "__main__":
      typer.run(main)

#+end_src
#+begin_src sh :dir ../data/n346-lines :results output file
  python ../../scripts/plot-fluxes-by-zone.py c007-chop-mean
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-lines/fluxes-by-zone-c007-chop-mean.pdf]]

#+begin_src python :eval no :tangle ../scripts/plot-ratios-by-zone.py
  from matplotlib import pyplot as plt
  import seaborn as sns
  from pathlib import Path
  import pandas as pd
  import yaml
  import typer

  def main(
          id_label: str,
          use_gauss: bool=False,
  ):
      """Plot of line fluxes from zones 0 and I"""
      fig, axes = plt.subplots(2,  2, figsize=(7, 6))
      figfile = f"ratios-by-zone-{id_label}.pdf"

      if use_gauss:
          df = pd.read_csv(f"all-lines-{id_label}/line-gauss-fluxes.csv")
          figfile = figfile.replace(".pdf", "-gauss.pdf")
      else:
          df = pd.read_csv(f"all-lines-{id_label}/line-fluxes.csv")
      df_sig = pd.read_csv(f"all-lines-{id_label}/line-uncertainties.csv")

      m_deep = df.Type.str.startswith("Deep") & (df["zone-0"] > 0.0)
      m_neut = df.Type.str.startswith("Neutral")
      m_low = df.Type.str.startswith("Low")
      m_med = df.Type.str.startswith("Med Neb")
      m_high = df.Type.str.startswith("High")
      m_fe = df.Type.str.startswith("Fe")
      m_si = df.Type.str.startswith("Med Perm")

      xmin, xmax = 1e-4, 2000.0
      for ax, [zone_A,  zone_B] in zip(
              axes.flat,
              [
                  ["0", "I"],
                  ["0", "II"],
                  ["0", "MYSO"],
                  ["III", "IV"],
              ]
      ):

          for data, label, size in [
                  [df[m_deep], "Deep", 10],
                  [df[m_neut], "Neutral", 15],
                  [df[m_low], "Low Neb", 30],
                  [df[m_med], "Medium Neb", 8],
                  [df[m_high], "High Neb", 25],
                  [df[m_fe], "Fe, Ni", 8],
                  [df[m_si], "Si II", 20],
          ]:
              A = data[f"zone-{zone_A}"]
              B = data[f"zone-{zone_B}"]
              ax.scatter(A, B / A, alpha=1.0, s=size, label=label)

          ax.set_xscale("log")
          ax.set_yscale("log")
          ax.axhline(1.0,  color="k", linestyle="dashed", zorder=-100)
          ax.set(
              xlabel=f"Zone {zone_A} Intensity (Hβ = 100)",
              ylabel=f"Intensity Ratio: Zone {zone_B} / Zone {zone_A}",
              xlim=[xmin, xmax],
              ylim=[2e-3, 5e2],
          )
          ax.set_aspect("equal")
      ax.legend(ncol=2, fontsize="xx-small")
      fig.tight_layout()
      fig.savefig(figfile)
      print(figfile, end="")


  if __name__ == "__main__":
      typer.run(main)

#+end_src
#+begin_src sh :dir ../data/n346-lines :results output file
  python ../../scripts/plot-ratios-by-zone.py c007-chop-mean --use-gauss
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-lines/ratios-by-zone-c007-chop-mean-gauss.pdf]]


**** More elaborate plot of ratio versus ratio
:PROPERTIES:
:ID:       16E007EA-F0D2-4AC5-A53E-0CC153767167
:END:
- This one is the best
- I have an annotated version for the paper
#+begin_src python :eval no :tangle ../scripts/plot-ratios-vs-ratios-by-zone.py
  from matplotlib import pyplot as plt
  import matplotlib
  import seaborn as sns
  from pathlib import Path
  import pandas as pd
  import numpy as np
  import yaml
  import typer
  import sys

  def plot_one_ratio_ratio_point(
          ax: matplotlib.axes.Axes,
          data: pd.Series,
          species_data: dict,
          type_data: dict,
          cmap: matplotlib.colors.Colormap,
          x_zone_ratio: str="II / 0",
          y_zone_ratio: str="I / 0",
  ):
      """Plot the zone ratio vs zone ratio for a single emission line

        Deal with the error bars and possible upper limits in any of the
        4 zones.
      """
      assert " / " in x_zone_ratio and " / " in y_zone_ratio
      assert type(data) == pd.Series, f"{type(data)}: {data}"

      # Fluxes in each zone, assuming ratio is B / A
      xB, xA  = [data[f"zone-{zone}"] for zone in x_zone_ratio.split(" / ")]
      yB, yA  = [data[f"zone-{zone}"] for zone in y_zone_ratio.split(" / ")]

      # Corresponding uncertainties
      xBe, xAe  = [data[f"zone-{zone}_sig"] for zone in x_zone_ratio.split(" / ")]
      yBe, yAe  = [data[f"zone-{zone}_sig"] for zone in y_zone_ratio.split(" / ")]

      size = species_data["size"]
      marker = species_data["marker"]
      # Log brightness in this line's most favorable zone
      log_f = np.log10(data[type_data["zone"]])
      # Remap to range [0, 1]
      norm_value = (log_f - type_data["log_min"]) / (type_data["log_max"] - type_data["log_min"])

      # Fluxes that are negative or smaller than the uncertainty are
      # replaced with 2-sigma upper limits
      x_upper = x_lower = y_lower = y_upper = False
      if yB < yBe:
          y_upper = True
          yB = max(yB, 0.0) + 2 * yBe
      if yA < yAe:
          y_lower = True
          yA = max(yA, 0.0) + 2 * yAe
      if y_upper and y_lower:
          # If both A and B fluxes are upper limits, then the ratio is indeterminate
          return

      if xB < xBe:
          x_upper = True
          xB = max(xB, 0.0) + 2 * xBe
      if xA < xAe:
          x_lower = True
          xA = max(xA, 0.0) + 2 * xAe
      if x_upper and x_lower:
          # If both A and B fluxes are upper limits, then the ratio is indeterminate
          return

      try: 
          xratio = xB / xA
          yratio = yB / yA
      except ZeroDivisionError:
          return

      # For the upper/lower limits, use a fixed fraction of the ratio to
      # give a constant length on a log scale. Also, make sure
      # upper/lower limits are penalized in brightness
      if x_upper or x_lower:
          xerr = 0.3 * xratio
          if species_data["name"] not in ["[C I]"]:
              norm_value /= 2
      else:
          xerr = np.hypot(xBe / xB, xAe / xA) * xratio
      if y_upper or y_lower:
          yerr = 0.3 * yratio
          if species_data["name"] not in ["[C I]"]:
              norm_value /= 2
      else:
          yerr = np.hypot(yBe / yB, yAe / yA) * yratio

      # Get the color for this point from the color map and normalized brightness
      color = cmap(norm_value)
      # Edge color is white or black, whichever gives best contrast with the key color
      if type_data["husl"][2] <= 50:
          edgecolor = "w"
      else:
          # In the black case, make it fade along with the face color
          edgecolor = matplotlib.colormaps["gray_r"](norm_value)

      ax.scatter(
          xratio, yratio,
          alpha=1.0, s=size, color=color, edgecolors=edgecolor,
          linewidths=0.1, marker=marker,
      )

      ax.errorbar(
          xratio,
          yratio,
          xerr=xerr,
          yerr=yerr,
          lolims=y_lower,
          uplims=y_upper,
          xlolims=x_lower,
          xuplims=x_upper,
          ecolor=color,
          fmt="none",
          elinewidth=0.3,
          alpha=1.0,
          zorder=0,
          errorevery=1,
          capsize=2.0,
          capthick=0.0,
      )


  def main(
          id_label: str,
          species_file: str="species.yaml",
          use_gauss: bool=False,
  ):
      """Plot of line fluxes from zones 0 and I"""

      with open(species_file) as f:
          info = yaml.safe_load(f)

      fig, axes = plt.subplots(2,  2, figsize=(8, 7))
      figfile = f"ratios-vs-ratios-by-zone-{id_label}.pdf"

      if use_gauss:
          df = pd.read_csv(f"all-lines-{id_label}/line-gauss-fluxes.csv")
          figfile = figfile.replace(".pdf", "-gauss.pdf")
      else:
          df = pd.read_csv(f"all-lines-{id_label}/line-fluxes.csv")
      df = df.set_index("Index")
      df_sig = pd.read_csv(f"all-lines-{id_label}/line-uncertainties.csv").set_index("Index")
      df = df.join(df_sig, rsuffix="_sig")

      xmin, xmax = 0.01, 100.0
      xticks = [0.01, 0.1, 1.0, 10.0, 100.0]
      xticklabels = ["0.01", "0.1", "1", "10", "100"]

      for ax, [x_zone_ratio, y_zone_ratio], exclude in zip(
              axes.flat,
              [
                  ["II / 0", "I / 0"],
                  ["II / 0", "MYSO / 0"],
                  ["II / I", "III / II"],
                  ["III / II", "IV / III"],
              ],
              [
                  ["IV"],
                  ["IV"],
                  ["0", "IV"],
                  ["0", "I"],                
              ],
      ):
          for species in reversed(info["species"]):
              label = species["name"]
              type_data = info["types"][species["type"]]
              if type_data["zone"].split("-")[-1] in exclude:
                  continue
              mask = df.ID.str.startswith(label) & (df[type_data["zone"]] > 0.0)
              data = df[mask].sort_values(by=type_data["zone"])
              cmap = sns.light_palette(
                  tuple(type_data["husl"]),
                  input="husl",
                  as_cmap=True,
              )
              for idx, row in data.iterrows():
                  plot_one_ratio_ratio_point(
                      ax, row, species, type_data, cmap,
                      x_zone_ratio, y_zone_ratio
                  )

          ax.set_xscale("log")
          ax.set_yscale("log")
          ax.axhline(1.0,  color="k", linestyle="dashed", linewidth=0.5, zorder=-100)
          ax.axvline(1.0,  color="k", linestyle="dashed", linewidth=0.5, zorder=-100)
          ax.set(
              xlabel=x_zone_ratio,
              ylabel=y_zone_ratio,
              xlim=[xmin, xmax],
              ylim=[xmin, xmax],
          )
          ax.set_aspect("equal")
          ax.set_xticks(xticks)
          ax.set_yticks(xticks)
          ax.set_xticklabels(xticklabels)
          ax.set_yticklabels(xticklabels)
      # Now do one more loop over the species to make the legend
      handles = []
      for species in info["species"]:
          label = species["name"]
          size = species["size"]
          marker = species["marker"]
          type_data = info["types"][species["type"]]
          cmap = sns.light_palette(
              tuple(type_data["husl"]),
              input="husl",
              as_cmap=True,
          )
          # Get darkest color from the color map
          color = cmap(1.0)
          # Edge color is white or black, whichever gives best contrast with the key color
          if type_data["husl"][2] <= 50:
              edgecolor = "w"
          else:
              edgecolor = "k"
          handles.append(
              matplotlib.lines.Line2D(
                  [], [],
                  linestyle="none",
                  label=label,
                  marker=marker,
                  markersize=np.sqrt(size),
                  color=color,
                  markeredgecolor=edgecolor,
                  markeredgewidth=0.1,
              )
          )

      fig.legend(handles=handles, title="Line Type", fontsize="small", loc="center right")
      #fig.tight_layout()
      #fig.subplots_adjust(right=0.8)
      fig.savefig(figfile, bbox_inches="tight")
      print(figfile, end="")


  if __name__ == "__main__":
      typer.run(main)

#+end_src
#+Begin_src sh :dir ../data/n346-lines :results output file
  python ../../scripts/plot-ratios-vs-ratios-by-zone.py c007-chop-mean --no-use-gauss
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-lines/ratios-vs-ratios-by-zone-c007-chop-mean.pdf]]

#+Begin_src sh :dir ../data/n346-lines :results output file
  python ../../scripts/plot-ratios-vs-ratios-by-zone.py c007-chop-mean --use-gauss
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-lines/ratios-vs-ratios-by-zone-c007-chop-mean-gauss.pdf]]


**** Debug version
Check that the table join is working
#+begin_src sh :dir ../data/n346-lines :results output verbatim
  COLUMNS=1000 python ../../scripts/plot-ratios-vs-ratios-by-zone.py c007-chop-mean
#+end_src

#+RESULTS:
#+begin_example
Type              Deep Neutral
ID               [C I] 8727.13
zone-0                 0.25615
zone-I               -0.012922
zone-II               0.036816
zone-III              0.004804
zone-IV              -0.004186
zone-MYSO             0.291271
zone-S                0.057892
Type_sig          Deep Neutral
ID_sig           [C I] 8727.13
zone-0_sig             0.01282
zone-I_sig            0.005148
zone-II_sig           0.004759
zone-III_sig          0.001426
zone-IV_sig           0.001288
zone-MYSO_sig         0.006494
zone-S_sig            0.003233
Name: 3306, dtype: object
II / I 0.010296454335583 0.0368160192031341 3.5756016589034405 1.072680497671032 False True
III / II 0.0368160192031341 0.0048041895266617 0.13049182477210153 0.04225479623588432 False False
#+end_example

It duplicates Type and ID columns unnecessarily, but works fine


*** Repeat the steps 7 and 8 with the median instead of the mean
First, from [[id:C597528A-4D58-439C-99B3-EA227BAED261][Find strength of a each line in all zones]]
#+header: :prologue "exec 2>&1" :epilogue ":"
#+begin_src sh :dir ../data/n346-lines :results verbatim
  PYTHONPATH=../../lib time python ../../scripts/line-bright-all-zones.py --spec-id-label c007-chop-median --debug
  echo "Last run:"
  date
#+end_src

#+RESULTS:
#+begin_example
WARNING: MpdafUnitsWarning: No physical unit in the FITS header: missing BUNIT keyword. [mpdaf.obj.data]
WARNING: MpdafUnitsWarning: No physical unit in the FITS header: missing BUNIT keyword. [mpdaf.obj.data]
WARNING: MpdafUnitsWarning: No physical unit in the FITS header: missing BUNIT keyword. [mpdaf.obj.data]
WARNING: MpdafUnitsWarning: No physical unit in the FITS header: missing BUNIT keyword. [mpdaf.obj.data]
WARNING: MpdafUnitsWarning: No physical unit in the FITS header: missing BUNIT keyword. [mpdaf.obj.data]
WARNING: MpdafUnitsWarning: No physical unit in the FITS header: missing BUNIT keyword. [mpdaf.obj.data]
WARNING: MpdafUnitsWarning: No physical unit in the FITS header: missing BUNIT keyword. [mpdaf.obj.data]
WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]
       91.45 real        88.26 user         1.92 sys
Last run:
Sun Nov  6 21:54:00 CST 2022
#+end_example


Second, from [[id:E5A865EF-2A09-4BE9-891B-617EA2E8A6CB][Line strengths normalized to H beta]]
#+begin_src sh :dir ../data/n346-lines :results output verbatim
python ../../scripts/make-line-flux-table.py --data-dir all-lines-c007-chop-median
#+end_src

#+RESULTS:
#+begin_example
                                                Comments  ... Notes.Type
Index                                                     ...           
7      Must be blend because more widely distributed ...  ...        NaN
35                     Very broad due to multiple blends  ...        NaN
42                          Morphology similar to Si III  ...        NaN
49     Shows diffuse emission, particularly in SE and NE  ...        NaN
71                                                  None  ...        NaN
...                                                  ...  ...        ...
3707                                                None  ...        NaN
3711   Severe blend with red wing of H I line. Streng...  ...        NaN
3720       Has diffuse emission like other neutral lines  ...        NaN
3736                        Diffuse emission is marginal  ...        NaN
3762                                                None  ...        NaN

[268 rows x 94 columns]
                 Type                 ID  ... zone-MYSO    zone-S
Index                                     ...                    
7              Fe, Ni  [Fe III] 4607.12+  ...  0.096716  0.196526
35          High Perm      O II 4641.81+  ...  0.089606  0.208609
42          High Perm      O II 4649.13+  ... -0.051995 -0.158558
49             Fe, Ni   [Fe III] 4658.10  ...  0.691166  0.217234
71           High Neb     He II  4685.68  ... -0.178157 -1.017789
...               ...                ...  ...       ...       ...
3707          Med Neb        H I 9229.01  ...  3.491716  2.102456
3711     Deep Neutral               UIL+  ... -0.114512  -0.31643
3720          Neutral      Ca I] 9244.31  ...  0.151306 -0.038189
3736   Deep Neutral??                UIL  ...  0.019053  0.133952
3762    Deep Neutral?                UIL  ...  0.327281   0.44389

[268 rows x 9 columns]
#+end_example

Third, the plot from [[id:1DCB8F2F-FC0E-4042-99B0-1E57C35413C7][Figures showing the line fluxes]]
#+Begin_src sh :dir ../data/n346-lines :results output file
  python ../../scripts/plot-ratios-vs-ratios-by-zone.py c007-chop-median --use-gauss
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-lines/ratios-vs-ratios-by-zone-c007-chop-median-gauss.pdf]]

*** Comments on the ratios
- All ratios are higher/lower: I/0, II/0, II/I, III/II, IV/III, MYSO/0
- The UIL consistently have low ratios in every combination (on average)
- They do not always agree with the C I line
  - In I/0 vs II/0, they loo like a progression towards [C I]
  - But [C I] has II/I around 8, whereas most UIL have less than 1
    - *no,  this is not right* It is a non-detection in zone I, so pointless to calculate II/I


*** DONE Write tables with the ratios
CLOSED: [2022-11-12 Sat 13:16]
:PROPERTIES:
:ID:       F7004917-496C-473F-8256-7821C94B7417
:END:
- This will allow us to easily identify which line corresponds to which point on the graph
  - Would be useful if we want to label particular lines in the ratio-vs-ratio figure
- Also, we will use some of the ratios in the final table for the UILs


#+begin_src python :eval no :tangle ../scripts/make-ratio-tables.py
  from matplotlib import pyplot as plt
  import matplotlib
  from pathlib import Path
  import pandas as pd
  import numpy as np
  import yaml
  import typer
  import sys

  def find_ratios_with_errors(
          df: pd.DataFrame,
          zone_ratio: str="II / 0",
  ) -> pd.DataFrame:
      """
      Find the zone ratios and errors for all emission lines

      Returns new dataframe with added columns.  This uses vector
      version of the same logic as in the plotting program, but is in
      some ways simpler since it only deals with one ratio, not two.
      """
      assert " / " in zone_ratio
      assert type(df) == pd.DataFrame

      # Fluxes in each zone, assuming ratio is B / A
      xB, xA  = [df[f"zone-{zone}"].to_numpy(copy=True) for zone in zone_ratio.split(" / ")]
      # Corresponding uncertainties
      xBe, xAe  = [df[f"zone-{zone}_sig"].to_numpy(copy=True) for zone in zone_ratio.split(" / ")]

      # Fluxes that are negative or smaller than the uncertainty are
      # replaced with 2-sigma upper limits
      #
      # For the numerator B, this gives upper limit to the ratio
      m_upper = xB < xBe
      xB = np.where(
          m_upper,
          np.maximum(xB, 0.0) + 2 * xBe,
          xB
      )
      # For the denominator A, it gives lower limit to the ratio
      m_lower = xA < xAe
      xA = np.where(
          m_lower,
          np.maximum(xA, 0.0) + 2 * xAe,
          xA
      )
      # Then calculate the ratio
      xratio = np.where(
          # Ratio is undefined if both fluxes are upper limits
          m_upper & m_lower,
          np.nan,
          xB / xA
      )
      # And the error
      xerr = np.hypot(xBe / xB, xAe / xA) * xratio
      e_zone_ratio = f"E({zone_ratio})"
      _df = pd.DataFrame(
          {
              zone_ratio: xratio,
              e_zone_ratio: xerr,
          },
          index=df.index,
      )
      # Patch in indicators of upper and lower limits in err column
      _df.loc[m_upper, e_zone_ratio] = "<"
      _df.loc[m_lower, e_zone_ratio] = ">"
      return _df

  def main(
          id_label: str,
          species_file: str="species.yaml",
          use_gauss: bool=False,
  ):
      """Write table of ratios between the zones"""

      outfile = f"all-lines-{id_label}/ratios-vs-ratios-by-zone.csv"

      if use_gauss:
          df = pd.read_csv(f"all-lines-{id_label}/line-gauss-fluxes.csv")
          outfile = outfile.replace(".csv", "-gauss.csv")
      else:
          df = pd.read_csv(f"all-lines-{id_label}/line-fluxes.csv")
      df = df.set_index("Index")
      df_sig = pd.read_csv(f"all-lines-{id_label}/line-uncertainties.csv").set_index("Index")
      df = df.join(df_sig, rsuffix="_sig")

      dfr = df[["ID"]]
      ratio_frames = [
          find_ratios_with_errors(df, zone_ratio)
          for zone_ratio in [
                  "I / 0", "II / 0", "MYSO / 0", "III / II", "IV / III",
          ]
      ]
      dfr = pd.concat([dfr] + ratio_frames, axis="columns")

      dfr.to_csv(outfile)



  if __name__ == "__main__":
      typer.run(main)

#+end_src
#+Begin_src sh :dir ../data/n346-lines :results output verbatim
  python ../../scripts/make-ratio-tables.py c007-chop-mean --use-gauss
#+end_src

#+RESULTS:

#+Begin_src sh :dir ../data/n346-lines :results output verbatim
  python ../../scripts/make-ratio-tables.py c007-chop-mean --no-use-gauss
#+end_src

#+RESULTS:

** Step 9: Calculate the velocity shifts for the known lines, and hence get the rest wavelengths of the UILs
:PROPERTIES:
:ID:       046007F7-309C-4517-996C-26013838FB37
:END:
*** DONE Write file for each zone with table of velocities
CLOSED: [2022-11-07 Mon 17:25]
:PROPERTIES:
:ID:       F75E4620-F16F-4F6F-932D-4BB897436B0C
:END:
- [1/1] Read in the fluxes and the wavelengths and uncertainties, and widths
  - [X] Do a join on the tables
  - [2/2] For each line, do the following
    - [X] Get the rest wavelength from the ID string if possible
    - [X] Also get a flag for possible blends from the "+" suffix
    - [4/4] For each zone:
      - [X] Check whether we have a significant detection, otherwise skip
      - [X] Calculate an error on the observed wavelength from the relative flux uncertainty
      - [X] Check whether we have a rest wavelength, otherwise skip the remaining
      - [X] Calculate the velocity and velocity width
- [X] Write out a new table with velocities for the known lines and the waves and uncertainties for all

#+begin_src python :eval no :tangle ../scripts/find-velocities.py
  from pathlib import Path
  import pandas as pd
  import numpy as np
  import yaml
  import typer
  import sys
  import astropy.constants as const  # type: ignore
  import astropy.units as u  # type: ignore

  LIGHT_SPEED_KMS = const.c.to(u.km / u.s).value
  DWAVE = 1.25                    # Wavelength pixel size in angstrom

  def extract_wave(s: str):
      """Extract rest wavelength from the ID field if possible"""
      wave_string = s.rstrip("+").split(" ")[-1]
      try:
          wave = float(wave_string)
      except ValueError:
          wave = np.nan
      return wave


  def main(
          id_label: str,
          species_file: str="species.yaml",
          zones_file: str="zones.yaml",
  ):
      """Find Doppler velocities for all identified lines"""

      with open(species_file) as f:
          info = yaml.safe_load(f)
      with open(zones_file) as f:
          zones = yaml.safe_load(f)

      common_cols = ["Type", "ID"]
      df_f = pd.read_csv(f"all-lines-{id_label}/line-fluxes.csv").set_index("Index")
      df_g = pd.read_csv(f"all-lines-{id_label}/line-gauss-fluxes.csv").set_index("Index")
      df_wave = pd.read_csv(f"all-lines-{id_label}/line-gauss-waves.csv").set_index("Index")
      df_width = pd.read_csv(f"all-lines-{id_label}/line-gauss-widths.csv").set_index("Index")
      df_err = pd.read_csv(f"all-lines-{id_label}/line-uncertainties.csv").set_index("Index")

      df0 = df_f[common_cols]

      df1 = pd.concat(
          [df.drop(columns=common_cols) for df in [df_f, df_g, df_wave, df_width, df_err]],
          axis=1,
          keys=["flux", "gflux", "wave", "width", "err"],
      )
      df = pd.concat([df0, df1], axis=1)

      # Get rest wavelengths and blend status
      df = df.assign(
          blend=df.ID.str.endswith("+"),
          wave0=[extract_wave(_) for _ in df.ID],
      )

      print(df[common_cols + ["blend", "wave0"]])

      for zone in zones:
          zlabel = zone["label"]
          # Use greater of Gaussian fit and 3-pixel flux
          flux = np.maximum(df[("flux", zlabel)], df[("gflux", zlabel)])
          # Signal to noise
          s_n = flux / df[("err", zlabel)]
          # Is it a significant measurement?
          msig = s_n > 1.0
          # Estimate error on wavelength
          e_wave = DWAVE / s_n
          wave = np.where(msig, df[("wave", zlabel)], np.nan)
          d_wave = np.where(msig, df[("width", zlabel)], np.nan)
          vel = LIGHT_SPEED_KMS * (wave - df.wave0) / df.wave0
          d_vel = LIGHT_SPEED_KMS * d_wave / df.wave0

          dfz = df[common_cols + ["blend", "wave0"]].assign(
              wave=wave,
              e_wave=e_wave,
              d_wave=d_wave,
              vel=vel,
              d_vel=d_vel,
              flux=flux,
              s_n=s_n,
          )
          dfz.to_csv(f"all-lines-{id_label}/{zlabel}-velocities.csv")

  if __name__ == "__main__":
      typer.run(main)

#+end_src
#+Begin_src sh :dir ../data/n346-lines :results output verbatim
  COLUMNS=1000 python ../../scripts/find-velocities.py c007-chop-mean
#+end_src

#+RESULTS:
#+begin_example
                 Type                 ID  blend    wave0
Index                                                   
7              Fe, Ni  [Fe III] 4607.12+   True  4607.12
35          High Perm      O II 4641.81+   True  4641.81
42          High Perm      O II 4649.13+   True  4649.13
49             Fe, Ni   [Fe III] 4658.10  False  4658.10
71           High Neb     He II  4685.68  False  4685.68
...               ...                ...    ...      ...
3707          Med Neb        H I 9229.01  False  9229.01
3711     Deep Neutral               UIL+   True      NaN
3720          Neutral      Ca I] 9244.31  False  9244.31
3736   Deep Neutral??                UIL  False      NaN
3762    Deep Neutral?                UIL  False      NaN

[262 rows x 4 columns]
#+end_example
*** DONE Make a plot of the velocities
CLOSED: [2022-11-08 Tue 13:50]
- Vision of how this should look
  - Each row of plots is for a single zone
  - Each column of plots is for a particular line type
    - Same symbols as in the ratio plots
  - Only include lines in each zone with sufficient s/n
  - Each plot is
    - x axis: flux (Hb = 100)
    - y axis: velocity
      
#+begin_src python :eval no :tangle ../scripts/plot-velocity-vs-flux-by-zone.py
  from matplotlib import pyplot as plt
  import matplotlib
  import seaborn as sns
  from pathlib import Path
  import pandas as pd
  import numpy as np
  import yaml
  import typer
  import sys


  # UNWANTED_ZONES = ["zone-S"]
  UNWANTED_ZONES = []
  UNWANTED_TYPES = ["Unidentified"]

  REPLACEMENTS = {
      "Deep": "Deep Neutral",
      "Fe": "Fe-Ni-Ca-Si",
  }
  BEST_TYPES = {
      "zone-0": ["Deep", "Neutral", "Low", "Medium"],
      "zone-I": ["Neutral", "Low", "Medium"],
      "zone-II": ["Low", "Medium"],
      "zone-III": ["Medium"],
      "zone-IV": ["Medium", "High"],
      "zone-MYSO": ["Deep", "Neutral", "Low", "Medium", "Fe"],
      "zone-S": ["Medium"],
  }
  def main(
          id_label: str,
          minimum_signal_noise: float=3.0,
          signal_noise_log_range: tuple[float, float]=(0.0, 2.0),
          species_file: str="species.yaml",
          zone_file: str="zones.yaml",
          v_sys: float=171.1,
          d_v_sys: float=2.7,
  ):
      """Plot of line velocity versus flux for all zones"""

      # Load the species and line type database
      with open(species_file) as f:
          info = yaml.safe_load(f)
      # Load the zone database
      with open(zone_file) as f:
          # But drop zones we do not want
          zones = [_ for _ in yaml.safe_load(f) if _["label"] not in UNWANTED_ZONES]

      # The zones will correspond to the rows
      n_rows = len(zones)
      # And the line types to the columns (but miss out unwanted ones)
      line_types = [_ for _ in info["types"] if _ not in UNWANTED_TYPES]
      n_cols = len(line_types)
      # Reverse mapping from line type to index in the list
      line_type_index = {line_types[i]: i for i in range(n_cols)}

      fig, axes = plt.subplots(
          n_rows, n_cols,
          sharex=True, sharey=True,
          figsize=(8, 7),
      )


      figfile = f"velocity-vs-flux-by-zone-{id_label}.pdf"

      # Iterate over the zones
      for jzone, zone in enumerate(zones):
          # Read in the velocity table
          df = pd.read_csv(f"all-lines-{id_label}/{zone['label']}-velocities.csv")

          # So long as so not want to fade out the colors for the lower
          # flux lines, we can use a single call to scatter and errorbar for each species

          # Iterate over the species
          for species in reversed(info["species"]):
              if species["type"] in UNWANTED_TYPES:
                  continue
              label = species["name"]
              itype = line_type_index[species["type"]]

              # Which one of the axes do we plot into?
              ax = axes[jzone, itype]

              type_data = info["types"][species["type"]]
              mask = df.ID.str.startswith(label) & (df.s_n > minimum_signal_noise)
              data = df[mask].sort_values(by="s_n")
              cmap = sns.light_palette(
                  tuple(type_data["husl"]),
                  input="husl",
                  as_cmap=True,
              )
              size = species["size"]
              marker = species["marker"]
              # Remap to range [0, 1]
              # Switch to using s/n instead of flux
              norm_value = (
                  (np.log10(data.s_n) - signal_noise_log_range[0])
                  / (signal_noise_log_range[1] - signal_noise_log_range[0])
              )
              # log_f = np.log10(data.flux)
              # norm_value = (
              #     (log_f - type_data["log_min"])
              #     / (type_data["log_max"] - type_data["log_min"])
              # )

              if type_data["husl"][2] <= 50:
                  edgecolors = "w"
              else:
                  edgecolors =  matplotlib.colormaps["gray_r"](norm_value)

              ax.scatter(
                  "flux", "vel",
                  data=data,
                  alpha=1.0, s=size,
                  c=norm_value,
                  vmin=0.0, vmax=1.0,
                  cmap=cmap,
                  edgecolors=edgecolors,
                  linewidths=0.1, marker=marker,
              )

      ax = axes[-1, 0]
      ax.set_xscale("log")
      ax.set(
          xlim=[2e-3,  1e3],
          xticks=[0.01, 1, 100],
          xticklabels=["0.01", "1", "100"],
          ylim=[80.0, 240.0],
      )
      axes[-1, 2].set(
          xlabel=" " * 24 + r"Line Intensity (H$\beta$ = 100)",
      )
      axes[3, 0].set(
          ylabel="Heliocentric Velocity, km/s",
      )
      # Add a line for the systemic velocity 
      for ax in axes.flat:
          ax.axhspan(
              v_sys - d_v_sys, v_sys + d_v_sys,
              alpha=0.2, zorder=0, color="k", linewidth=0,
          )
      # And a label for it
      axes[4, 1].text(
          0.8e-3, v_sys - 5,
          # fr"$V_\mathrm{{sys}} = {v_sys:.1f} \pm {d_v_sys:.1f}$ km/s",
          fr"$V_{{\odot}} = {v_sys:.0f}$ km/s",
          ha="right", va="center", fontsize="small",
          bbox={"facecolor": "white", "edgecolor": "none"},
      )

      # Add labels for the line types at the top of each column
      for itype, line_type in  enumerate(line_types):
          ax = axes[0, itype]
          type_data = info["types"][line_type]
          label = REPLACEMENTS.get(line_type, line_type)
          # Use a darker version of the color for the labels
          color = sns.dark_palette(
              tuple(type_data["husl"]),
              input="husl",
              as_cmap=True,
          )(0.5)
          ax.text(
              0.5, 1.2, label, transform=ax.transAxes,
              ha="center", va="center",
              color=color,
          )
      # And a title for these
      fig.text(0.5, 0.99, "Emission line type", ha="center", va="top")

      # Label the zones down the left and right sides
      for jzone, zone in enumerate(zones):
          label = zone["label"].replace("zone-", "Zone\n")
          ax = axes[jzone, -1]
          # Use a darker version of the color for the labels
          color = sns.dark_palette(
              tuple(zone["husl"]),
              input="husl",
              as_cmap=True,
          )(0.8)
          ax.text(
              1.3, 0.5, label, transform=ax.transAxes,
              ha="center", va="center",
              color=color,
          )
          ax = axes[jzone, 0]
          ax.text(
              -1.0, 0.5, label, transform=ax.transAxes,
              ha="center", va="center",
              color=color,
          )
          # Add an asterisk in the panels of line types that are
          # brightest for this zone
          for line_type in BEST_TYPES[zone["label"]]:
              itype = line_type_index[line_type]
              ax = axes[jzone, itype]
              ax.text(
                  0.95, 0.05, "[*]", transform=ax.transAxes,
                  ha="right", va="bottom",
                  color=color, fontsize="medium", fontweight="bold",
              )

      # Now do one more loop over the species to make the legend
      handles = []
      for species in info["species"]:
          if species["type"] in UNWANTED_TYPES:
              continue
          label = species["name"]
          size = species["size"]
          marker = species["marker"]
          type_data = info["types"][species["type"]]
          cmap = sns.light_palette(
              tuple(type_data["husl"]),
              input="husl",
              as_cmap=True,
          )
          # Get darkest color from the color map
          color = cmap(1.0)
          # Edge color is white or black, whichever gives best contrast with the key color
          if type_data["husl"][2] <= 50:
              edgecolor = "w"
          else:
              edgecolor = "k"
          handles.append(
              matplotlib.lines.Line2D(
                  [], [],
                  linestyle="none",
                  label=label,
                  marker=marker,
                  markersize=np.sqrt(size),
                  color=color,
                  markeredgecolor=edgecolor,
                  markeredgewidth=0.1,
              )
          )

      fig.legend(
          handles=handles,
          title="Species",
          fontsize="small",
          loc="lower center",
          ncol=8,
      )
      sns.despine()
      #fig.tight_layout()
      fig.subplots_adjust(left=0.15, bottom=0.22, top=0.93)
      fig.savefig(
          figfile,
          # bbox_inches="tight",
      )
      print(figfile, end="")


  if __name__ == "__main__":
      typer.run(main)

#+end_src
#+Begin_src sh :dir ../data/n346-lines :results output file
  python ../../scripts/plot-velocity-vs-flux-by-zone.py c007-chop-mean
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-lines/velocity-vs-flux-by-zone-c007-chop-mean.pdf]]


Copy file to paper project

#+begin_src sh :dir ../data/n346-lines :results verbatim
  PAPER_ROOT=$HOME/Dropbox/mabel-smc-deep-neutral-paper
  cp -fv velocity-vs-flux-by-zone-c007-chop-mean.pdf $PAPER_ROOT/figs
  echo Last copied: $(date)
#+end_src

#+RESULTS:
: velocity-vs-flux-by-zone-c007-chop-mean.pdf -> /Users/will/Dropbox/mabel-smc-deep-neutral-paper/figs/velocity-vs-flux-by-zone-c007-chop-mean.pdf
: Last copied: Mon Jan 16 21:32:00 CST 2023

*** DONE Calculate histogram of velocity differences between Zone 0 and MYSO
CLOSED: [2022-11-11 Fri 18:11]
- We can do this for the UIL as well as the other lines
- By looking at the histograms in different S/N bins, we can estimate the wavelength uncertainty of the UILs
- UPDATE [2022-11-11 Fri 19:03]
  - Now written out as the column ~sigma_d_vel~ in new table file
  - For instance [[file:../data/n346-lines/all-lines-c007-chop-mean/interzone-0-MYSO-vel-diffs.csv]]
#+begin_src python :eval no :tangle ../scripts/plot-vel-diff-zone-0-MYSO.py
  from matplotlib import pyplot as plt
  import matplotlib
  import seaborn as sns
  from pathlib import Path
  import pandas as pd
  import numpy as np
  import yaml
  import typer
  import sys
  import astropy.constants as const  # type: ignore
  import astropy.units as u  # type: ignore
  from astropy.stats import sigma_clipped_stats

  LIGHT_SPEED_KMS = const.c.to(u.km / u.s).value

  REPLACEMENTS = {
      "Deep": "Deep Neutral",
      "Fe": "Fe-Ni-Ca-Si",
  }
  TYPES = ["Unidentified", "Deep", "Neutral", "Low", "Medium", "Fe"]
  META_TYPES = {
      "Unidentified": ["Unidentified"],
      "Neutral-Low": ["Neutral", "Deep", "Low", "Fe"],
      "Medium": ["Medium"], 
  }
  def main(
          id_label: str,
          minimum_signal_noise: float=1.0,
          signal_noise_log_range: tuple[float, float]=(0.0, 2.0),
          species_file: str="species.yaml",
          zone_file: str="zones.yaml",
          debug: bool=False,
  ):
      """Histograms of velocity difference between Zone 0 and MYSO"""

      # Load the species and line type database
      with open(species_file) as f:
          info = yaml.safe_load(f)
      # Load the zone database
      with open(zone_file) as f:
          zones = yaml.safe_load(f)


      # Load the data for the two zones
      df0 = pd.read_csv(f"all-lines-{id_label}/zone-0-velocities.csv").set_index("Index")
      dfy = pd.read_csv(f"all-lines-{id_label}/zone-MYSO-velocities.csv").set_index("Index")

      # Make a new frame with the columns that we need
      df = df0[["ID", "wave", "flux", "s_n"]].assign(
          # Note that we use dfy.wave in denominator instead of dfy.wave0
          # since we do not have the latter for the UILs. The resultant
          # inaccuracy is very small (order v/c ~ 0.001)
          d_vel=LIGHT_SPEED_KMS * (df0.wave - dfy.wave) / dfy.wave,
          # Do not use the original type field, instead make our own
          type="Unknown",
          species="Unknown",
          sigma_d_vel=np.nan,
      )

      # Use the species info to fill in the types column
      for species in reversed(info["species"]):
          prefix = species["name"]
          if not species["name"] == "UIL":
              prefix += " "
          mask = df.ID.str.startswith(prefix)
          df.type[mask] = species["type"]
          df.species[mask] = species["name"]

      # Brightness thresholds for partitioning lines
      thresholds = [0.0, 0.1, 1.0, 10.0]
      df = df.assign(fcat=0.0)
      for thresh in thresholds:
          mask = df.flux > thresh
          df.fcat[mask] = thresh

      # The thresholds correspond to rows
      n_rows = len(thresholds)
      # The line types correspond to columns
      n_cols = len(META_TYPES)

      fig, axes = plt.subplots(
          n_rows, n_cols,
          sharex=True, sharey=True,
          figsize=(5, 4),
      )
      figfile = f"vel-diff-zone-0-MYSO-{id_label}.pdf"
      vrange = [-105, 105]
      # Iterate over the flux categories
      d_value = 0.5 / n_rows
      value = 1 -  n_rows * d_value
      for jrow, thresh in enumerate(thresholds):
          mask1 = df.fcat == thresh
          if jrow + 1 < n_rows:
              bstring = f"{thresh} to {thresholds[jrow + 1]}"
          else:
              bstring = f"> {thresh}"
          axes[jrow, -1].text(
              1.3, 0.4, "Brightness\n" + bstring + "% Hβ",
              transform=axes[jrow, -1].transAxes,
              ha="center",
          )
          if debug:
              print("> * < + " * 8)
              print(bstring, end="\n\n")
          # Iterate over the line types
          for icol, (label, line_types) in enumerate(META_TYPES.items()):
              mask = (
                  mask1
                  & df.type.str.startswith(tuple(line_types))
                  & (df.s_n > minimum_signal_noise)
              )
              data = df[mask]
              if debug:
                  print(label)
                  print(data)
                  print()
              if len(data) == 0:
                  # If we have no lines, then skip to the next
                  continue
              type_data = info["types"][line_types[0]]
              color = sns.light_palette(
                  tuple(type_data["husl"]),
                  input="husl",
                  as_cmap=True,
              )(value)
              ax = axes[jrow, icol]
              ax.hist(data.d_vel, bins=31, range=vrange, color=color)
              mean, median, std = sigma_clipped_stats(data.d_vel, sigma=2)
              stats_string = fr"${mean:.1f} \pm {std:.1f}$ km/s"
              stats_string += "\n" + fr"$N = {len(data)}$"
              # Save the sigma of the velocity differences
              df.sigma_d_vel[mask] = std
              # And higher for the outliers
              mout = df.d_vel ** 2 > (2 * std) ** 2
              df.sigma_d_vel[mask & mout] = 2 * std
              ax.text(
                  0.05, 0.95, stats_string,
                  transform=ax.transAxes,
                  ha="left", va="top",
                  color=color,
              )

          value += d_value

      # Save the new table
      df.to_csv(f"all-lines-{id_label}/interzone-0-MYSO-vel-diffs.csv")

      # Add labels for the line types at the top of each column
      for itype, meta_type in enumerate(META_TYPES):
          ax = axes[0, itype]
          ax.text(
              0.5, 1.2, meta_type, transform=ax.transAxes,
              ha="center", va="center",
          )
      # And a title for these
      fig.text(0.5, 0.99, "Emission line type", ha="center", va="top")


      axes[-1, 1].set(
          xlabel=r"Velocity difference: Zone 0 $-$ Zone MYSO (km/s)",
      )
      axes[1, 0].set(
          ylabel=r"Number of emission lines",
          ylim=[0, 19],
      )

      sns.despine()
      #fig.tight_layout()
      #fig.subplots_adjust(left=0.15, bottom=0.22, top=0.93)
      fig.savefig(
          figfile,
          bbox_inches="tight",
      )
      print(figfile, end="")


  if __name__ == "__main__":
      typer.run(main)

#+end_src
#+begin_src sh :dir ../data/n346-lines :results output file
  COLUMNS=10000 python ../../scripts/plot-vel-diff-zone-0-MYSO.py c007-chop-mean
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-lines/vel-diff-zone-0-MYSO-c007-chop-mean.pdf]]

Copy histogram figure file to paper project

#+begin_src sh :dir ../data/n346-lines :results verbatim
  PAPER_ROOT=$HOME/Dropbox/mabel-smc-deep-neutral-paper
  cp -fv vel-diff-zone-0-MYSO-c007-chop-mean.pdf $PAPER_ROOT/figs
  echo Last copied: $(date)
#+end_src

#+RESULTS:
: vel-diff-zone-0-MYSO-c007-chop-mean.pdf -> /Users/will/Dropbox/mabel-smc-deep-neutral-paper/figs/vel-diff-zone-0-MYSO-c007-chop-mean.pdf
: Last copied: Mon Jan 16 21:32:45 CST 2023

*** DONE Make a table of rest wavelengths plus uncertainties of all the UILs
CLOSED: [2022-11-12 Sat 19:08]
- Where the wavelength accuracy estimates come from
  - We will assume a velocity of 171 km/s +/- 5 km/s
    - Which is a systematic uncertainty for all lines
  - And for the wavelength accuracy of individual lines, we will assume
    - +/- 8 km/s for bright > 0.1
    - +/- 20 km/s for bright < 0.1
  - We should maybe identify outliers in the 0-MYSO velocity difference distribution, and give those an extra uncertainty (e.g., double the individual value)
  - All the above is now implemented in the previous plotting script
- 


#+begin_src python  :eval no :tangle ../scripts/make-table-uil-waves.py
  from pathlib import Path
  import pandas as pd
  import numpy as np
  import typer
  import astropy.constants as const  # type: ignore
  import astropy.units as u  # type: ignore

  LIGHT_SPEED_KMS = const.c.to(u.km / u.s).value

  def main(
          id_label: str,
          debug: bool=False,
          vsys: float=171.1,
          d_vsys: float=5.0,
  ):
      """Table of all unidentified lines"""

      # Load the data for zone 0 ... 
      df0 = pd.read_csv(f"all-lines-{id_label}/zone-0-velocities.csv").set_index("Index")
      # ... for the wavelengths and velocities ...
      dfd = pd.read_csv(f"all-lines-{id_label}/interzone-0-MYSO-vel-diffs.csv").set_index("Index")
      # ... and for the zone ratios
      dfr = pd.read_csv(f"all-lines-{id_label}/ratios-vs-ratios-by-zone-gauss.csv").set_index("Index")

      # Select only the unidentified lines with credible detection
      mask = df0.ID.str.startswith("UIL") & (df0.s_n > 1.0)
      # Make a new frame combining selected columns from each
      df = pd.concat(
          [
              df0[["Type", "ID", "blend", "wave", "e_wave", "flux", "s_n"]],
              dfd[["sigma_d_vel"]],
              dfr[[col for ratio in ["I / 0", "II / 0", "MYSO / 0"]
                   for col in [ratio, f"E({ratio})"] ]],
          ],
          axis="columns",
      )[mask]
      # Add new columns
      df = df.assign(
         wave0=df.wave / (1.0 + vsys / LIGHT_SPEED_KMS),
         sig_flux=df.flux / df.s_n, 
         sig_wave0=df.wave * np.hypot(df.sigma_d_vel, d_vsys) / LIGHT_SPEED_KMS
      ).drop(columns=["ID", "wave", "e_wave", "s_n", "sigma_d_vel"])
      priority = ["wave0", "sig_wave0", "flux", "sig_flux"]
      remainder = [c for c in df.columns if c not in priority]
      df = df[priority + remainder]
      print(df)
      df.to_csv(f"all-lines-{id_label}/uil-final-table.csv")


  if __name__ == "__main__":
      typer.run(main)

#+end_src
#+begin_src sh :dir ../data/n346-lines :results output verbatim
  COLUMNS=1000 python ../../scripts/make-table-uil-waves.py c007-chop-mean
#+end_src

#+RESULTS:
#+begin_example
             wave0  sig_wave0      flux  sig_flux            Type  blend     I / 0             E(I / 0)     II / 0            E(II / 0)  MYSO / 0          E(MYSO / 0)
Index                                                                                                                                                                 
1146   6029.569455   0.514152  0.030460  0.004393   Deep Neutral?  False  0.806796   0.2783544695494928   0.662888                    <  0.566409  0.10944291146839161
1153   6037.396888   0.514820  0.041788  0.003967   Deep Neutral?  False  0.477559                    <   0.453518                    <  0.621762  0.14597441811223902
1190   6083.195649   0.518725  0.010027  0.004825        Neutral?  False  1.655362                    <   1.854600                    <  1.587017   0.7719142568089383
1300   6221.819532   0.530546  0.044434  0.002802    Deep Neutral  False  0.253526                    <   0.543340                    <  0.646933  0.08354545607085527
1332   6261.684680   0.533945  0.027879  0.002361   Deep Neutral?  False  2.198663  0.29708825322477167   0.453927  0.10180843302574635  0.528582   0.3176379358431232
...            ...        ...       ...       ...             ...    ...       ...                  ...        ...                  ...       ...                  ...
3640   9145.250748   0.470866  0.173619  0.022533    Deep Neutral  False  0.250861                    <   0.245631  0.10120057582603312  0.499748  0.25571329399302484
3649   9155.283022   0.780688  0.091543  0.017510   Deep Neutral?  False  0.343321  0.12688119030418255   0.285899  0.08124287479567108  0.145526                    <
3654   9162.896677   0.781337  0.033448  0.008285   Deep Neutral?  False  0.508610                    <  19.891807                    <  0.364105                    <
3736   9264.376659   0.789990  0.040371  0.006785  Deep Neutral??  False  0.758882  0.45368481338933114   0.234097  0.06263303203717613  0.624451  0.29546207986604506
3762   9297.368030   0.274485  0.249847  0.007631   Deep Neutral?  False  0.515155                    <   0.215652                    <  0.798834  0.07081402869730503

[114 rows x 12 columns]
#+end_example

*** DONE Write a latex version of the table
CLOSED: [2023-05-27 Sat 20:37]
- I am going to try and do this using the pandas facility for writing latex
- This works OK, but there are a few issues that need sorting
  - [ ] alignment of the columns is not great, especially when we have a colon
  - [ ] I need to do a more careful classification of the blends
    - at the moment, I am using a colon with all of the blends that were automatically identified
    - But there are some other blends that I am finding from looking at the figures, which need to be added in
    - And also, I want to distinguish between various cases
      1. Blend affecting the flux in zones I, II, etc, so it only affects the ratios
      2. Blend affecting the UIL flux in Zone 0, which is more serious
    - At the moment, all the blend have the ratios completely omitted, but in the first case above, it would be better to just transform the measurement to an upper limit

#+begin_src python :eval no :tangle ../scripts/convert-table-uil-latex.py
  import pandas as pd
  import numpy as np

  def format_blend(value, dp=2):
      if not value or not np.isfinite(value):
          return "0.0:"
      try:
          return str(round(float(value), dp)) + ":"
      except TypeError:
          return "0.0:"

  def format_pair(value, uncertainty, dp=2):
      if not value or not np.isfinite(value):
          return "0.0"
      try:
          svalue = str(round(float(value), dp))
      except TypeError:
          svalue = "0.0"

      if uncertainty in  ["<", ">"]:
          return f"{uncertainty} {svalue}"

      try:
          suncertainty = str(round(float(uncertainty), dp))
      except TypeError:
          suncertainty = "0.0"

      return fr"{svalue} \pm {suncertainty}"

  df = pd.read_csv("uil-final-table.csv")
  table = []
  for _, row in df.iterrows():
      if row["blend"]:
          table.append(
              {
                  r"Wavelength $\lambda_0$": format_blend(row["wave0"]),
                  r"$I(\hb = 100)$": format_blend(row["flux"], 3),
                  r"$\mathrm{I / 0}$": "",
                  r"$\mathrm{II / 0}$": "",
                  r"$\mathrm{MYSO / 0}$": "",
               }
          )
      else:
          table.append(
              {
                  r"Wavelength $\lambda_0$": format_pair(row["wave0"], row["sig_wave0"]),
                  r"$I(\hb = 100)$": format_pair(row["flux"], row["sig_flux"], 3),
                  r"$\mathrm{I / 0}$": format_pair(row["I / 0"], row["E(I / 0)"]),
                  r"$\mathrm{II / 0}$": format_pair(row["II / 0"], row["E(II / 0)"]),
                  r"$\mathrm{MYSO / 0}$": format_pair(row["MYSO / 0"], row["E(MYSO / 0)"]),
              }
          )
      dff = pd.DataFrame(table)# dff = df.drop(columns=["Type", "blend"]).rename(
  #     columns=lambda col: col.replace("_", " ")
  # )

  s = dff.style.hide()



  with open("uil-final-table.tex", "w") as f:
      f.write(
          s.to_latex(
              hrules=True,
              siunitx=True,
              environment="longtable",
              column_format="SSSSS",
          )
      )
#+end_src

#+begin_src sh :dir ../data/n346-lines/all-lines-c007-chop-mean :results output verbatim
  python ../../../scripts/convert-table-uil-latex.py
#+end_src

#+RESULTS:

** DONE Step 10: Final figures showing highlights from the spectra
CLOSED: [2023-04-30 Sun 13:36]
- We can show only those spectral ranges that have Deep Neutral lines
- Show some of the different regions
  - Point out cases where we have blends
- Gray out the regions affected by sky and telluric absorption
  - Get the theoretical sky models
- Add annotations for all the different types of lines
- Include spectra from some of the partitions of the previous step
  - Also maybe add Orion and 30 Dor, but probably best not to
*** Plot spectrum for a user specified range
- Based on
  - [[file:../scripts/spec1d-plot-all-zones.py]]
  - from [[id:765997A8-764F-46E3-89EE-FC2E42F88EBB][Plot the per-zone spectra]]
- These get edited afterwards in Affinity Designer to add markers for all the lines
- [2022-11-23 Wed] Calculating a new page size to make it not so tall
  - Original version was
    - Figure size: (6, 8) inches
    - Y limits: -3 to 12 in data units
  - Try changing to 9 as upper limit
    - factor: 12/15 = 0.8
    - New  Figure size: (6, 6.4) inches


#+begin_src python :tangle ../scripts/spec1d-wave-range.py
  from mpdaf.obj import Spectrum
  from astropy.table import Table
  from matplotlib import pyplot as plt
  from matplotlib.ticker import MaxNLocator
  import seaborn as sns
  import pandas as pd
  from pathlib import Path
  import yaml
  import typer
  import astropy.constants as const  # type: ignore
  import astropy.units as u  # type: ignore

  LIGHT_SPEED_KMS = const.c.to(u.km / u.s).value

  STAR_ZONES = ("MYSO")
  def main(
          id_label: str,
          wave_range: tuple[float, float],
          separation: float=5.0,
          star_scale: float=5.0,
          v_sys: float=171.1,
          zone_file: str="zones.yaml",
  ):
      """Plot of spectra from zones in a given wave range"""
      fig, ax = plt.subplots(figsize=(6, 6.4))
      figfile = f"spec1d-{id_label}-{int(wave_range[0])}-{int(wave_range[1])}.pdf"

      with open(zone_file) as f:
          zones = yaml.safe_load(f)
      df = pd.read_csv(f"all-lines-{id_label}/uil-final-table.csv").set_index("Index")
      doppler =  1.0 + v_sys / LIGHT_SPEED_KMS
      nzones = len(zones)
      dy = separation
      offset = 0.0
      for zone in reversed(zones):
          specfile = f"{zone['label']}-{id_label}-spec1d.fits"
          spec = Spectrum(f"zone_spectra/{specfile}")
          # Now select the wavelength range
          spec = spec.subspec(*wave_range)
          # MYSO needs reducing in height
          scale = star_scale if zone["label"].endswith(STAR_ZONES) else 1.0
          # Choose a slightly darker version of the key color
          color = sns.dark_palette(
              tuple(zone["husl"]),
              input="husl",
              as_cmap=True,
          )(0.6)
          ax.plot(
              1e10 * spec.wave.coord() / doppler,
              spec.data / scale + offset,
              drawstyle="steps-mid",
              linewidth=0.7,
              color=color,
          )
          # (spec / scale + offset).plot(label=zone["label"], linewidth=1, color=color)
          ax.axhline(offset, linewidth=0.5, color=color)
          label = zone["label"].split("-")[-1]
          if zone["label"].endswith(STAR_ZONES):
              label = label + f" / {int(scale)}"
          ax.text(
              wave_range[1] + 5, offset,
              label,
              ha="left", va="center", color=color,
          )
          offset += dy
      ax.text(
          wave_range[1] + 5, offset,
          "Zone",
          ha="left", va="center", color="k",
      )
      for data in df.itertuples():
          if wave_range[0] / doppler < data.wave0 < wave_range[1] / doppler:
              linestyle = "dotted" if data.blend else "solid"
              if data.Type.startswith('Deep'):
                  ax.axvline(data.wave0, 0.85, 0.95, color="0.9", lw=1.5, linestyle=linestyle)
              else:
                  ax.axvline(data.wave0, 0.85, 0.9, color="0.9", lw=1, linestyle=linestyle)
      ax.minorticks_on()
      ax.yaxis.set_tick_params(which='minor', left=False)
      ax.grid(which="major", linewidth=0.5)
      ax.set_ylim(-3 * separation, (2 + len(zones)) * separation)
      ax.set_xlim(None, wave_range[1])
      ax.set_xlabel("STP wavelength in rest frame of nebula, Å")
      ax.set_ylabel(
          "Continuum-subtracted mean brightness plus offset\n"
          r"$10^{-20}$ erg s$^{-1}$ cm$^{-2}$ Å$^{-1}$ pix$^{-1}$"
      )
      sns.despine()
      fig.savefig(figfile, bbox_inches="tight")
      print(figfile, end="")


  if __name__ == "__main__":
      typer.run(main)

#+end_src

#+RESULTS:


**** 6000 to 7000: Region around H alpha

First do the bluest UILs

#+begin_src sh :dir ../data/n346-lines :results output file
python ../../scripts/spec1d-wave-range.py c007-chop-mean 6000 6390 --separation 5 --star-scale 5
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-lines/spec1d-c007-chop-mean-6000-6390.pdf]]

Then the immediate vicinity of Ha. We go as far as 6810 to get in the  [K IV] 6795 line.  There is another UIL further red before hitting the telluric bands, but I cut that off so that the range is not too wide

#+begin_src sh :dir ../data/n346-lines :results output file
python ../../scripts/spec1d-wave-range.py c007-chop-mean 6430 6810 --separation 5 --star-scale 5
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-lines/spec1d-c007-chop-mean-6430-6810.pdf]]


And a missing section, which is not in the paper but where I want to look for potential N I lines
#+begin_src sh :dir ../data/n346-lines :results output file
python ../../scripts/spec1d-wave-range.py c007-chop-mean 6800 7000 --separation 5 --star-scale 5
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-lines/spec1d-c007-chop-mean-6800-7000.pdf]]

Other missing section
#+begin_src sh :dir ../data/n346-lines :results output file
python ../../scripts/spec1d-wave-range.py c007-chop-mean 6350 6450 --separation 5 --star-scale 5
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-lines/spec1d-c007-chop-mean-6350-6450.pdf]]

And a zoom in on the possible N I DRLs

#+begin_src sh :dir ../data/n346-lines :results output file
python ../../scripts/spec1d-wave-range.py c007-chop-mean 6550 6690 --separation 3 --star-scale 3 --zone-file zones-0-III-MYSO.yaml
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-lines/spec1d-c007-chop-mean-6550-6690.pdf]]

**** 7000 to 8000
First section up to the [O II] lines
#+begin_src sh :dir ../data/n346-lines :results output file
python ../../scripts/spec1d-wave-range.py c007-chop-mean 6980 7380 --separation 10 --star-scale 10
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-lines/spec1d-c007-chop-mean-6980-7380.pdf]]


A nice region that leads up to the 8150.7 line

#+begin_src sh :dir ../data/n346-lines :results output file
python ../../scripts/spec1d-wave-range.py c007-chop-mean 7760 8160 --separation 10 --star-scale 5
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-lines/spec1d-c007-chop-mean-7760-8160.pdf]]

And the missing section, which is not in the paper
#+begin_src sh :dir ../data/n346-lines :results output file
python ../../scripts/spec1d-wave-range.py c007-chop-mean 7370 7760 --separation 10 --star-scale 5
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-lines/spec1d-c007-chop-mean-7370-7760.pdf]]

**** 8000 to 9000
Around the Paschen limit
#+begin_src sh :dir ../data/n346-lines :results output file
python ../../scripts/spec1d-wave-range.py c007-chop-mean 8170 8500 --separation 15 --star-scale 10
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-lines/spec1d-c007-chop-mean-8170-8500.pdf]]




Next batch is a nice clean area. The H I lines are brighter, so increase the separation

#+begin_src sh :dir ../data/n346-lines :results output file
  python ../../scripts/spec1d-wave-range.py c007-chop-mean 8520 8860 --separation 25 --star-scale 5
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-lines/spec1d-c007-chop-mean-8520-8860.pdf]]


Gap range of 8860 to 8880

#+begin_src sh :dir ../data/n346-lines :results output file
  python ../../scripts/spec1d-wave-range.py c007-chop-mean 8800 8900 --separation 25 --star-scale 5
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-lines/spec1d-c007-chop-mean-8800-8900.pdf]]


**** 9000 plus
The last range

#+begin_src sh :dir ../data/n346-lines :results output file
python ../../scripts/spec1d-wave-range.py c007-chop-mean 8880 9305 --separation 15 --star-scale 10
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-lines/spec1d-c007-chop-mean-8880-9305.pdf]]

And the farthest red range

#+begin_src sh :dir ../data/n346-lines :results output file
python ../../scripts/spec1d-wave-range.py c007-chop-mean 9300 9600 --separation 15 --star-scale 10
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-lines/spec1d-c007-chop-mean-9300-9600.pdf]]

**** The single green candidate line
#+begin_src sh :dir ../data/n346-lines :results output file
python ../../scripts/spec1d-wave-range.py c007-chop-mean 5400 5800 --separation 5 --star-scale 5
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-lines/spec1d-c007-chop-mean-5400-5800.pdf]]

This had a possible line at 5608 \AA but it is far to noisy to see anything, and may not be there at all

**** And the blue range for completeness
#+begin_src sh :dir ../data/n346-lines :results output file
python ../../scripts/spec1d-wave-range.py c007-chop-mean 4600 5400 --separation 15 --star-scale 10 
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-lines/spec1d-c007-chop-mean-4600-5400.pdf]]

*** Choosing good microcosm ranges
**** 8520-8800
- This contains one of the strongest clean UIL, 8660, plus a whole load more
- Also has [C I] 8727, which is important to show
- And has [Cl II] and a bunch of H I lines and He I
- Has sky lines, especially O_2, but they are very weak
- Has [Fe II] and lots of N I lines
**** 7350-7600
- This is an excellent range, which shows a great variety of weak lines
  - Deep neutral lines 7463, 7488, 7528
  - Several OH sky lines
  - Some very weak [Ni II] lines, plus an apparently neutral UIL
  - N I lines 7442, 7469
  - He I 7500
  - [Fe II] 7513, albeit only from compact sources
  - High ionization line [Cl IV] 7531
  - A sky OH line 7571.7 that may be blended with a deep neutral line
  - Very weak line at 7345 that could be Deep Neutral or Low Nebular
- It is marked purple in the spreadsheet
- It is bounded to the blue by the strong [O II] lines 7320-7331
- And bounded to the red by a telluric absorption band
**** 7800-8300
- Another good range

**** 6200-6800
- Shows all the lines around H alpha

** DONE Step 11: A figure showing the distribution of line types over wavelength
CLOSED: [2022-11-13 Sun 14:38]
:PROPERTIES:
:ID:       CC27FDD7-1770-408B-957D-733C0231CE96
:END:
#+begin_src python :eval no :tangle ../scripts/plot-line-type-wave-distro.py
  from matplotlib import pyplot as plt
  import matplotlib
  import seaborn as sns
  from pathlib import Path
  import pandas as pd
  import numpy as np
  import yaml
  import typer
  import sys
  import astropy.constants as const  # type: ignore
  import astropy.units as u  # type: ignore

  LIGHT_SPEED_KMS = const.c.to(u.km / u.s).value

  XY_BY_TYPE = {
      "Unidentified": (7000, 0.15),
      "Deep": (8730, 1.15),
      "Neutral": (8200, 1.35),
      "Low": (7300, 1.15),
      "Medium": (6563, 1.35),
      "High": (5000, 1.35),
      "Fe": (5500, 1.15),
  }
  REPLACEMENTS = {
      "Deep": "Deep Neutral",
      "Low": "Low Ionization",
      "Medium": "Medium Ionization",
      "High": "High Ionization",
      "Fe": "Fe-Ni-Si-Ca",
  }
  def main(
          id_label: str,
          species_file: str="species.yaml",
          vsys: float=171.1,
  ):
      """Plot of line type distribution over wavelength"""

      with open(species_file) as f:
          info = yaml.safe_load(f)

      fig, ax = plt.subplots(1,  1, figsize=(10, 3))
      figfile = f"line-type-wave-distro-{id_label}.pdf"

      df = pd.read_csv(f"all-lines-{id_label}/line-fluxes.csv").set_index("Index")
      df_wave = pd.read_csv(f"all-lines-{id_label}/line-gauss-waves.csv").set_index("Index")
      df = df.join(df_wave,  rsuffix="_wave")

      n_type = {_t: 0 for _t in info["types"]}
      # There should really be a check on s/n > 1, which eliminates one
      # of the Unidentified lines. I am just giong to go ahead and fix
      # it by hand
      n_type["Unidentified"] -= 1

      for species in reversed(info["species"]):
          label = species["name"]
          type_data = info["types"][species["type"]]
          mask = df.ID.str.startswith(label) & (df[type_data["zone"]] > 0.0)
          data = df[mask].sort_values(by=type_data["zone"])
          n_type[species["type"]] += len(data)
          cmap = sns.light_palette(
              tuple(type_data["husl"]),
              input="husl",
              as_cmap=True,
          )
          y0 = 0 if label == "UIL" else 1
          for idx, row in data.iterrows():
              # Log brightness in this line's most favorable zone
              log_f = np.log10(row[type_data["zone"]])
              # Corresponding wavelengtn
              wave = row[type_data["zone"] + "_wave"]
              wave /= 1.0 + vsys / LIGHT_SPEED_KMS
              # Remap to range [0, 1]
              # norm_value = (log_f - type_data["log_min"]) / (type_data["log_max"] - type_data["log_min"])
              norm_value = (log_f - (-2)) / (3 - (-2))
              # Get the color for this point from the color map and normalized brightness
              color = cmap(1.0)
              try:
                  ax.plot([wave, wave], [y0, y0 + 0.9], lw=0.2 * (2.5 + log_f), color=color)
              except:
                  ...
      for _type, type_data in info["types"].items():
          label = f"{REPLACEMENTS.get(_type, _type)}: $N = {n_type[_type]}$"
          x0, y0 = XY_BY_TYPE[_type]
          color = sns.light_palette(
              tuple(type_data["husl"]),
              input="husl",
              as_cmap=True,
          )(1.0)
          ax.text(
              x0, y0, label,
              color=color, ha="center", va="center",
              fontweight="bold",
              bbox={"facecolor": "white", "edgecolor": "none", "boxstyle": "Round, pad=0.1"},
          )

      ax.set(
          xlabel="Wavelength, Angstrom",
          ylabel="",
          yticks=[],
      )
      sns.despine(left=True)
      fig.savefig(figfile, bbox_inches="tight")
      print(figfile, end="")


  if __name__ == "__main__":
      typer.run(main)

#+end_src
#+Begin_src sh :dir ../data/n346-lines :results output file
  python ../../scripts/plot-line-type-wave-distro.py c007-chop-mean
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-lines/line-type-wave-distro-c007-chop-mean.pdf]]

Copy line bar-code figure to the paper project

#+begin_src sh :dir ../data/n346-lines :results verbatim
  PAPER_ROOT=$HOME/Dropbox/mabel-smc-deep-neutral-paper
  cp -fv line-type-wave-distro-c007-chop-mean.pdf $PAPER_ROOT/figs
  echo Last copied: $(date)
#+end_src

#+RESULTS:
: line-type-wave-distro-c007-chop-mean.pdf -> /Users/will/Dropbox/mabel-smc-deep-neutral-paper/figs/line-type-wave-distro-c007-chop-mean.pdf
: Last copied: Wed May 31 08:53:07 CST 2023

** DONE Step 12: Distribution of nearest neighbors and reciprocity
CLOSED: [2022-11-19 Sat 13:01]

*** DONE Make a table of nearest neighbor distances
CLOSED: [2022-11-13 Sun 21:21]

#+begin_src python :eval no :tangle ../scripts/find-nearest-neighbors.py
  from pathlib import Path
  import pandas as pd
  import numpy as np
  import yaml
  import typer
  import sys
  import astropy.constants as const  # type: ignore
  import astropy.units as u  # type: ignore

  LIGHT_SPEED_KMS = const.c.to(u.km / u.s).value


  def main(
          id_label: str,
          species_file: str="species.yaml",
  ):
      """Make tables of nearest neighbor distances"""

      with open(species_file) as f:
          info = yaml.safe_load(f)

      df = pd.read_csv(f"all-lines-{id_label}/line-fluxes.csv").set_index("Index")
      df_wav = pd.read_csv(f"all-lines-{id_label}/line-gauss-waves.csv").set_index("Index")
      df = df.join(df_wav, rsuffix="_wav")

      # First, make separate tables for each line type
      # And another for all the identified lines
      table_types = list(info["types"].keys()) + ["Identified"]
      # Initialize a dict to hold the tables
      tables = {k: [] for k in table_types}
      # Go accumulating rows in the tables by iterating over the species
      for species in reversed(info["species"]):
          _type = species["type"]
          type_data = info["types"][_type]
          zone = type_data["zone"]
          prefix = species["name"]
          if not species["name"] == "UIL":
              prefix += " "
          mask = df.ID.str.startswith(prefix) & (df[zone] > 0.0)
          data = df[mask]
          # Stripped down to only the data we need
          newdata = data[["Type", "ID"]].assign(
              flux=data[zone],
              wave=data[f"{zone}_wav"],
          )
          tables[_type].append(newdata)
          if not _type == "Unidentified":
              tables["Identified"].append(newdata)
      for _type, tab in tables.items():
          # Reassemble each table into a dataframe and sort on wavelength
          tab = pd.concat(tab).sort_values(by="wave")
          # Calculate backward and forward wave differences, padding the
          # ends with the mean separation to fake extra lines outside the range
          if len(tab) > 1:
              fill_value = (tab.wave.max() - tab.wave.min()) / (len(tab) - 1)
          else:
              fill_value = 0.0
          tab = tab.assign(
              dwave_b=np.ediff1d(tab.wave, to_begin=fill_value),
              dwave_f=np.ediff1d(tab.wave, to_end=fill_value),
          )
          # For nearest neighbor, choose minimum of the two, whereas
          # mean spacing is average of the two, then drop originals
          tab = tab.assign(
              dwave_nn=np.minimum(tab.dwave_b, tab.dwave_f),
              dwave_mean=(tab.dwave_b + tab.dwave_f) / 2,
          ).drop(columns=["dwave_b", "dwave_f"])
          # Calculate wave numbers and sort in ascending wn
          tab = tab.assign(
              wn=1.0 / (tab.wave * (u.Angstrom.to(u.cm))),
          ).sort_values(by="wn")
          # Calculate backward and forward wn differences
          if len(tab) > 1:
              fill_value = (tab.wn.max() - tab.wn.min()) / (len(tab) - 1)
          else:
              fill_value = 0.0
          tab = tab.assign(
              dwn_b=np.ediff1d(tab.wn, to_begin=fill_value),
              dwn_f=np.ediff1d(tab.wn, to_end=fill_value),
          )
          # For nearest neighbor, choose minimum of the two and drop originals
          tab = tab.assign(
              dwn_nn=np.minimum(tab.dwn_b, tab.dwn_f),
              dwn_mean=(tab.dwn_b + tab.dwn_f) / 2,
          ).drop(columns=["dwn_b", "dwn_f"])
          # Take second order differences squared to check reciprocity
          tab = tab.assign(
              dd_b=np.ediff1d(tab.dwn_nn, to_begin=10)**2,
              dd_f=np.ediff1d(tab.dwn_nn, to_end=10)**2,
          )
          # Reciprocal if at least one of these is zero
          tab = tab.assign(
              mutual=np.minimum(tab.dd_b, tab.dd_f) == 0.0,
          ).drop(columns=["dd_b", "dd_f"])
          print()
          # Ignore first and last points when calculating reciprocity, since their status is unknown
          print(_type, "Degree of reciprocity =", tab[1:-1].mutual.sum() / len(tab[1:-1]))
          print(tab.describe())
          tab.to_csv(f"all-lines-{id_label}/nearest-neighbors-{_type}.csv")





  if __name__ == "__main__":
      typer.run(main)

#+end_src
#+begin_src sh :dir ../data/n346-lines :results output verbatim
  COLUMNS=200 python ../../scripts/find-nearest-neighbors.py c007-chop-mean
#+end_src

#+RESULTS:
#+begin_example

Unidentified Degree of reciprocity = 0.7079646017699115
             flux         wave    dwave_nn  dwave_mean            wn      dwn_nn    dwn_mean
count  115.000000   115.000000  115.000000  115.000000    115.000000  115.000000  115.000000
mean     0.124497  7820.429611   15.529327   28.681260  12965.259963   27.245314   51.104167
std      0.117054   905.042654   13.075853   21.897635   1563.270921   26.727209   49.681212
min      0.004878  6033.010700    2.631700    4.947900  10749.597027    3.477977    6.544464
25%      0.045603  7089.907800    7.441050   12.727650  11600.227108   11.834660   21.183519
50%      0.085868  7852.080500   10.255000   21.515950  12735.478196   19.634523   36.007100
75%      0.164644  8620.523450   15.974600   34.376100  14104.567380   30.621329   57.794142
max      0.653517  9302.674300   70.821300  105.305900  16575.472011  152.444866  245.340542

Deep Degree of reciprocity = nan
          flux       wave  dwave_nn  dwave_mean           wn  dwn_nn  dwn_mean
count  1.00000     1.0000       1.0         1.0      1.00000     1.0       1.0
mean   0.25615  8731.9493       0.0         0.0  11452.19659     0.0       0.0
std        NaN        NaN       NaN         NaN          NaN     NaN       NaN
min    0.25615  8731.9493       0.0         0.0  11452.19659     0.0       0.0
25%    0.25615  8731.9493       0.0         0.0  11452.19659     0.0       0.0
50%    0.25615  8731.9493       0.0         0.0  11452.19659     0.0       0.0
75%    0.25615  8731.9493       0.0         0.0  11452.19659     0.0       0.0
max    0.25615  8731.9493       0.0         0.0  11452.19659     0.0       0.0

Neutral Degree of reciprocity = 0.4444444444444444
            flux         wave    dwave_nn  dwave_mean            wn       dwn_nn     dwn_mean
count  20.000000    20.000000   20.000000   20.000000     20.000000    20.000000    20.000000
mean    0.143893  7575.119005   88.157815  188.966553  13624.282417   198.721240   421.772759
std     0.195449  1234.655418  192.763000  239.535784   2755.884629   502.599423   638.642769
min     0.007870  5134.868900    5.790900    6.425900  11461.011461     8.547480     9.492898
25%     0.047599  7195.926425    8.199300   10.847788  12051.768282    10.780303    16.089206
50%     0.083402  8209.900950   14.477650  104.516588  12180.419414    33.018859   185.431965
75%     0.127978  8298.470975   56.784700  256.541612  13900.008854   120.230436   465.528387
max     0.733754  8725.233400  847.504600  902.385450  19474.693891  2258.347663  2475.706788

Low Degree of reciprocity = 0.8
            flux         wave    dwave_nn  dwave_mean            wn      dwn_nn     dwn_mean
count  12.000000    12.000000   12.000000   12.000000     12.000000   12.000000    12.000000
mean    5.735266  7105.878358  162.253079  306.231473  14307.982058  281.925987   582.746768
std     7.793427   992.310195  207.587154  192.269635   1853.929898  324.689414   308.574245
min     0.015842  5757.933600   10.354900   73.737850  10957.127194   19.276748   166.217368
25%     0.228511  6505.713700   14.385600  120.391963  13398.886110   31.785329   290.472437
50%     2.703243  6727.456300   49.432250  300.868475  14864.476238  120.067238   610.201471
75%     6.753502  7470.485550  306.231473  424.961274  15373.450893  582.746768   840.333015
max    23.100525  9126.479800  544.459400  624.602250  17367.341645  942.195245  1043.552121

Medium Degree of reciprocity = 0.5813953488372093
             flux         wave    dwave_nn  dwave_mean            wn       dwn_nn     dwn_mean
count   45.000000    45.000000   45.000000   45.000000     45.000000    45.000000    45.000000
mean    25.779645  7674.176727   56.612251   99.322423  13559.285497   131.345789   221.133545
std     90.547394  1376.228597   83.609641  110.353713   3049.738862   241.890537   313.100653
min      0.018208  4864.003400    7.381800    8.589600  10829.320168     8.972654    12.410210
25%      0.176456  7069.219300   14.735600   23.454250  11644.452390    21.150677    33.088639
50%      0.520766  8349.733700   22.101800   47.812500  11976.429859    34.904753    90.069527
75%      2.425051  8587.780400   66.356500  158.848700  14145.833614   126.462942   270.631067
max    476.538186  9234.190000  358.192400  414.207200  20559.196155  1103.604395  1395.004873

High Degree of reciprocity = 0.7272727272727273
            flux         wave    dwave_nn  dwave_mean            wn       dwn_nn     dwn_mean
count  13.000000    13.000000   13.000000   13.000000     13.000000    13.000000    13.000000
mean    0.320794  6180.958438  156.646862  299.919017  16976.660673   362.882653   784.064955
std     0.524640  1398.492573  143.869093  218.974084   3853.783193   357.298550   711.997172
min     0.006874  4641.763600   10.583400   23.166650  12134.756274    49.008351   106.459308
25%     0.065211  4714.130800   26.033900  155.251208  13760.335818   117.798843   333.154944
50%     0.102637  6104.969800   92.909500  245.278108  16380.097409   178.199423   535.715181
75%     0.231436  7267.264500  267.267000  514.338700  21212.818278   488.110465  1220.781084
max     1.538814  8240.791800  375.865400  681.106700  21543.535737  1032.986316  2352.343901

Fe Degree of reciprocity = 0.5526315789473685
            flux         wave    dwave_nn  dwave_mean            wn      dwn_nn    dwn_mean
count  40.000000    40.000000   40.000000   40.000000     40.000000   40.000000   40.000000
mean    0.276242  6134.793293   58.677630  118.975046  16971.748011  142.543662  279.084498
std     0.246535  1309.538896   82.216907  125.314647   3286.265968  128.778981  225.816921
min     0.018986  4609.123400    9.150400   17.907650  10811.804094   32.429189   46.197826
25%     0.090499  5029.927525   21.121750   37.670413  14735.094752   59.156300  127.261578
50%     0.186012  5971.572150   39.979200   55.456900  16746.060713   88.428665  209.662938
75%     0.392596  6792.864850   52.128825  151.513113  19881.443268  197.111161  390.920546
max     0.977622  9249.150200  492.041400  539.733550  21696.099523  701.991298  907.340794

Identified Degree of reciprocity = 0.6434108527131783
             flux         wave    dwave_nn  dwave_mean            wn      dwn_nn    dwn_mean
count  131.000000   131.000000  131.000000  131.000000    131.000000  131.000000  131.000000
mean     9.521078  6996.847434   19.907316   35.692514  15002.809055   46.185796   83.725349
std     54.055095  1473.734946   19.653925   32.190787   3449.243812   53.530075   82.803127
min      0.006874  4609.123400    4.205200    6.330250  10811.804094    5.704762    8.802400
25%      0.078966  5631.797650    8.529750   14.983250  11966.053575   17.446141   27.218731
50%      0.195582  7174.355000   13.980000   24.958350  13938.535241   30.160423   58.619414
75%      0.747331  8356.980400   20.797900   44.723425  17763.221480   58.947721  113.303073
max    476.538186  9249.150200  141.613500  181.817300  21696.099523  476.856928  588.566219
#+end_example



*** DONE Cross comparison of identified and unidentified samples
CLOSED: [2022-11-19 Sat 13:01]
- [2022-11-16 Wed] This will an important null comparison - I hope!
- I will calculate nearest-neighbor distances of identified lines to each of the unidentified lines
- And then re-calculate all the measures and graphs
- With luck,  it will come out similar to the random predictions
  - Which would imply that the two sets of lines were completely unrelate


#+begin_src python :eval no :tangle ../scripts/find-cross-nn.py
  from pathlib import Path
  import pandas as pd
  import numpy as np
  import yaml
  import typer
  import sys
  import astropy.constants as const  # type: ignore
  import astropy.units as u  # type: ignore


  def main(
          id_label: str,
          species_file: str="species.yaml",
  ):
      """Make tables of cross nearest neighbor distances from UILs to Identified"""

      dfi = pd.read_csv(
          f"all-lines-{id_label}/nearest-neighbors-Identified.csv"
      ).set_index("Index").sort_index()
      dfu = pd.read_csv(
          f"all-lines-{id_label}/nearest-neighbors-Unidentified.csv"
      ).set_index("Index").sort_index()

      # Copy over the first few columns from the Unidentified table
      df = dfu.loc[:, "Type":"wave"].assign(
          # Use appply to vectorize over the wavelengths
          dwave_nn=dfu.wave.apply(
              # Find the minimum absolute separation with the Identified lines
              lambda x: (dfi.wave - x).abs().min()
          ),
          index_other=dfu.wave.apply(
              # And the index of that closest line in the Identified table
              lambda x: (dfi.wave - x).abs().idxmin()
          ),
      )
      # Now use that index to obtain other info. I had to resort to list
      # comprehensions here since pandas will not let you use repeated
      # values in the index
      df = df.assign(
          # The mean separation in the Identified lines
          dwave_mean=[dfi.dwave_mean[_i] for _i in df.index_other],
          # Whether the Identified line is closer to the UIL than to its
          # own nearest neighbor among the other Identifieds
          mutual=[this < dfi.dwave_nn[_i] for this, _i in zip(df.dwave_nn, df.index_other)],
      )
      df.to_csv(f"all-lines-{id_label}/nearest-neighbors-Cross.csv")





  if __name__ == "__main__":
      typer.run(main)

#+end_src
#+begin_src sh :dir ../data/n346-lines :results output verbatim
  COLUMNS=200 python ../../scripts/find-cross-nn.py c007-chop-mean
#+end_src

#+RESULTS:



*** DONE Plot neighbor parameters versus wavelength
CLOSED: [2022-11-15 Tue 18:57]
- We want to look at 3 measures
  - Density of lines, or equivalently, mean separation \langle\Delta\lambda\rangle
  - Nearest neighbor distance \Delta\lambda_NN
    - For a one-d Poisson process, we should have E(\Delta\lambda_NN) = 0.5 \langle\Delta\lambda\rangle
  - Reciprocity fraction: P(1)
    - For a one-d Poisson process, we should have P(1) = 2/3
  - We can bin every k points to get mean or median values
    - Probably with k = 6 (at least), maybe more
    - We can use bootstrap method to estimate the confidence limits
- First attempt uses rolling average with a certain window size (in unit of number of table rows)
  - This is OK, but suffers from the fact that the effective resolution varies with the line type, being far broader for types with lower spectral density of lines
  - And if I make the window width too high, then we lose lots of the types entirely
  - To fix this, I will try and interpolate onto a uniform wavelength grid first
  - [2022-11-16 Wed] This is now fine, since I am only showing big groups
- And note that I did not find a good way to show the "Cross" results in this figure, so I am just omitting them

#+begin_src python :eval no :tangle ../scripts/plot-neighbor-stats.py
  from matplotlib import pyplot as plt
  import matplotlib
  import seaborn as sns
  from pathlib import Path
  import pandas as pd
  import numpy as np
  import yaml
  import typer
  import sys
  import astropy.constants as const  # type: ignore
  import astropy.units as u  # type: ignore


  types = [
      "Identified",
      "Unidentified",
  #     "Cross",
  ]
  colors = [
      "r",
      "k",
      # "c",
  ]

  # 
  wavgrid = np.arange(4600, 9400, dtype=float)

  def finesse_rolling(waves, values, window_size):
      """Take rolling mean in window"""
      return values.rolling(window=window_size, center=True)

  def finesse_reindex(waves, values, window_size):
      """Reindex, then interpolate, then rolling window"""
      return (values
              .reindex(range(values.index.min(),  values.index.max()))
              .interpolate(method="linear")
              .rolling(window=window_size, center=True)
              )

  finesse = finesse_rolling
  #finesse = finesse_reindex

  def main(
          id_label: str,
          window_size: int=10,
          species_file: str="species.yaml",
  ):
      """Plot statistics of the nearest neighbor distances versus wavelength"""
      with open(species_file) as f:
          info = yaml.safe_load(f)
      # Drop the Deep type since it only has one line
      info["types"].pop("Deep")
      # But add in the combination of all Identified lines
      info["types"]["Identified"] = info["types"]["Medium"]

      # Three panel stack of plots
      sns.set_color_codes()
      fig, axes = plt.subplots(3,  1, figsize=(5, 5), sharex=True)
      figfile = f"nearest-neighbor-stats-{id_label}.pdf"
      for _type, color in zip(types, colors):
          df = pd.read_csv(
              f"all-lines-{id_label}/nearest-neighbors-{_type}.csv"
          ).set_index("Index").sort_values(by="wave")
          # Make window-averaged arrays to plot
          wave = finesse(df.wave, df.wave, window_size).mean()
          density = finesse(df.wave, 1 / df.dwave_mean, window_size)
          ratio_nn = finesse(df.wave, df.dwave_nn / df.dwave_mean, window_size)
          reciprocity = finesse(df.wave, df.mutual.astype(float), window_size)

          axes[0].plot(wave, density.mean(), ds="steps-mid", color=color, label=f"{_type} lines")
          sem = density.std() / np.sqrt(window_size - 1)
          axes[0].fill_between(
              wave,
              density.mean() - sem,
              density.mean() + sem,
              step="mid",
              color=color,
              alpha=0.2,
              linewidth=0.0,
          )

          axes[1].plot(wave, ratio_nn.mean(), ds="steps-mid", color=color)
          sem = ratio_nn.std() / np.sqrt(window_size - 1)
          axes[1].fill_between(
              wave,
              ratio_nn.mean() - sem,
              ratio_nn.mean() + sem,
              step="mid",
              color=color,
              alpha=0.2,
              linewidth=0.0,
          )

          axes[2].plot(wave, reciprocity.mean(), ds="steps-mid", color=color)
          sem = reciprocity.std() / np.sqrt(window_size - 1)
          axes[2].fill_between(
              wave,
              reciprocity.mean() - sem,
              reciprocity.mean() + sem,
              step="mid",
              color=color,
              alpha=0.2,
              linewidth=0.0,
          )



      axes[-1].set(
          xlabel=r"Wavelength, Å",
      )

      axes[0].set(
          ylim=[0.0, None],
          yscale="linear",
      )
      axes[0].set_ylabel(
          "Spectral\ndensity:\n" + r" $\rho_\lambda = 1 / \langle \Delta\lambda \rangle$, Å$^{-1}$",
          rotation="horizontal", ha="center", va="center",
          labelpad=50,
      )

      axes[1].axhline(1/2, color="b", linestyle="dashed")
      axes[1].set(
          ylim=[0.0, 1.05],
      )
      axes[1].set_ylabel(
          "Nearest-neighbor\n" + r"ratio: $\langle \Delta\lambda_{\mathrm{nn}} \rangle / \langle \Delta\lambda \rangle$",
          rotation="horizontal", ha="center", va="center",
          labelpad=50,
      )

      axes[2].axhline(2/3, color="b", linestyle="dashed")
      axes[2].set(
          ylim=[0.0, 1.05],
      )
      axes[2].set_ylabel(
          "Degree of\nreciprocity:\n" + r"$P_{\mathrm{nn-nn}}$",
          rotation="horizontal", ha="center", va="center",
          labelpad=50,
      )



      axes[0].legend()
      for ax in axes:
          ax.grid(axis="x", color="k", linestyle="dotted")
      sns.despine()
      fig.savefig(figfile, bbox_inches="tight")
      print(figfile, end="")





  if __name__ == "__main__":
      typer.run(main)

#+end_src


#+begin_src sh :dir ../data/n346-lines :results output file
  COLUMNS=200 python ../../scripts/plot-neighbor-stats.py c007-chop-mean --window-size 10
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-lines/nearest-neighbor-stats-c007-chop-mean.pdf]]
      
*** DONE Make a plot of nearest neighbor distribution
CLOSED: [2022-11-15 Tue 18:57]
+ New version [2022-11-16 Wed]
  + Include the histogram of the Cross-comparison, which fits the Poisson  distro really well
#+begin_src python :eval no :tangle ../scripts/plot-histogram-nearest-neighbors.py
  from matplotlib import pyplot as plt
  import matplotlib
  import seaborn as sns
  from pathlib import Path
  import pandas as pd
  import numpy as np
  import yaml
  import typer
  import sys
  import astropy.constants as const  # type: ignore
  import astropy.units as u  # type: ignore


  types = [
      "Identified",
      "Unidentified",
      "Cross",
  ]
  colors = ["r", "k", "c"]
  lmin, lmax = -0.1, 2.9
  wave_floor = 3.0
  clabels = ["Identified lines", "Unidentified lines", "Cross comparison"]
  labels = ["_nolabel", "_nolabel", "Poisson process"]

  def poisson(wn, wn0):
      return 1 - np.exp(-2 * wn / wn0)
  def main(
          id_label: str,
          nbins: int=10,
  ):
      """Plot histograms of the nearest neighbor distribution"""

      sns.set_color_codes()
      fig, axes = plt.subplots(len(types),  1, figsize=(5, 5), sharex=True)
      figfile = f"hist-nearest-neighbors-{id_label}.pdf"
      bins = np.logspace(lmin, lmax, nbins)
      dl = (lmax - lmin) / nbins
      centers = (bins[:-1] + bins[1:]) / 2
      finegrid = np.logspace(lmin, lmax, 200)

      wave0 = {}
      for ax, _type, color, label, clabel in zip(axes, types, colors, labels, clabels):
          df = pd.read_csv(f"all-lines-{id_label}/nearest-neighbors-{_type}.csv").set_index("Index")
          df = df[1:-1]
          H, _, _ = ax.hist(
              df.dwave_nn, bins=bins, color=color, cumulative=True,
              # label=clabel,
          )
          # mean distance between lines
          if _type == "Cross":
              wave0[_type] = wave0["Identified"]
          else:
              wave0[_type] = np.mean(df.dwave_mean)
          #wn0 = np.median(df.dwn)
          ax.plot(
              finegrid,
              H[-1] * np.where(
                  finegrid > wave_floor,
                  (poisson(finegrid, wave0[_type]) - poisson(wave_floor, wave0[_type]))
                  / (1.0 - poisson(wave_floor, wave0[_type])),
                  np.nan
              ),
              color="b",
              linestyle="dashed",
              linewidth=3,
              label=label,
              # label=fr"Poisson: $\rho_\lambda = {1/wave0:.3f}$ Å$^{{-1}}$",
          )
          ax.text(
              150, 0.5 * H[-1], clabel,
              ha="center", va="center", fontweight="bold",
              color=color, bbox={"facecolor": "w", "edgecolor": "none", "pad": 2},
          )

          # HH, _ = np.histogram(df.dwave_nn[df.mutual], bins=bins)
          # P1 = HH.cumsum() / H
          # axes[0].plot(centers, P1, c=color, label=_type)
      axes[1].set_ylabel("Cumulative\n# of lines", rotation="horizontal", ha="right", va="center")

      axes[-1].legend(fontsize="small", handlelength=3.0, framealpha=1.0)

      axes[-1].set(
          xscale="log",
          xlabel=r"Nearest neighbor wavelength difference: $\Delta\lambda_{\mathrm{nn}}$, Å",
          xticks=[1, 10, 100],
          xticklabels=["1", "10", "100"],
      )
      # axes[0].axhline(2/3, color="b", linestyle="dashed")
      # axes[0].legend()
      # axes[0].set(
      #     ylim=[0.45, 1.1],
      #     ylabel="Degree of reciprocity",
      # )
      sns.despine()
      fig.savefig(figfile, bbox_inches="tight")
      print(figfile, end="")





  if __name__ == "__main__":
      typer.run(main)

#+end_src


#+begin_src sh :dir ../data/n346-lines :results output file
  python ../../scripts/plot-histogram-nearest-neighbors.py c007-chop-mean --nbins 200
#+end_src

#+RESULTS:
[[file:/Users/will/Dropbox/muse-hii-regions/data/n346-lines/hist-nearest-neighbors-c007-chop-mean.pdf]]

** DONE Step 13: Go back and do a better job of de-blending the sky lines
CLOSED: [2022-11-24 Thu 12:28]
- After making the 1d spectrum plots, it is apparent that the sky contamination of some lines is more serious than I had thought
  - I sorted the [[file:../data/n346-lines/all-lines-c007-chop-mean/uil-final-table.csv]] table on I/0 ratio and started looking at all the lines that supposedly had I/0 > 1
  - It turned out that they were all spurious, mainly due to blending with sky lines
  - In reality, most should count as non-detections in Zone I
- So, this means that the progressive sequence that we see on the diagnostic diagrams is probably not real
  - In reality, there are few if any UIL that have intermediate I/0 ratios
- So now I have a plan for dealing with the sky
  - I will use Zone IV as a proxy for the sky emission, since there should be no real emission of the UILs from this zone
  - So subtract the Zone IV intensity from Zones I and II
  - But only do this for UILs that are marked as blend with sky, so as not to add unnecessary noise
  - And we need to subtract before dividing by H beta, assuming that the sky intensity is roughly uniform  between the zones.
- [X] Implementation in the particular steps above:
  - [2022-11-23 Wed] *Do this next*
  - We need to decide which lines need treating:
    - ~ID == UIL+~
    - AND ~Notes.ID~ contains ~OH~ or ~O_2~
  - Looks like the best place for intervention is
    - [[id:C597528A-4D58-439C-99B3-EA227BAED261][Find strength of a each line in all zones]]
    - which is where we fit the gaussian and generate the yaml files for each line
    - After a bit of back and forth, I am now happy with this
      - I now write out the original spectrum and the IV-subtracted spectrum to the yaml file, so we can see exactly what is happening
      - And we also increase the sigma to account for the additional uncertainty in this process
  - Then carry on with the following steps
    - [[id:E5A865EF-2A09-4BE9-891B-617EA2E8A6CB][Line strengths normalized to H beta]]
      - Which is where we make the flux tables
    - [[id:16E007EA-F0D2-4AC5-A53E-0CC153767167][More elaborate plot of ratio versus ratio]]
      - This shows some minor changes in panel a, but much less than I expected
      - It removes nearly all the black stars with I/0 >  1, but does not affect the rest
      - [X] Need to add this to the Affinity figure
    - [[id:F7004917-496C-473F-8256-7821C94B7417][Write tables with the ratios]]
      - This writes out [[file:../data/n346-lines/all-lines-c007-chop-mean/ratios-vs-ratios-by-zone.csv]]
    - Deal with the velocities
      - This made several plots and tables
      - I still need to write a latex version of the table
    - [[id:CC27FDD7-1770-408B-957D-733C0231CE96][Step 11: A figure showing the distribution of line types over wavelength]]
      - This made the bar code plot
    - Nearest neighbors
      - We are down to 125 lines now (from 129)
      - The histograms are almost unchanged
      - But we do see a slight change in the degree of reciprocity for the identified lines
        - We no longer get the peak in P(nn-nn) to the blue side of the Paschen jump
        - This is entirely due to adding in more N I lines, so it is legitimate 
      - [X] Need to add the plots to the Affinity figure

** DONE Step 14: Final things to do [2022-11-27 Sun] 
CLOSED: [2023-05-27 Sat 20:36]
- [X] Write a latex table of all the UIL lines to include in paper
- [X] Make a top-ten table of the best lines
- [X] Better treatment of the H I line blends
  - I decided not to bother with this
- [X] Add the annotations to the remaining one-d spectra
- [X] Run EMILI on the line lists to try and get IDs
- [X] Finish writing the paper
*** DONE Top-ten line list
CLOSED: [2023-03-13 Mon 12:30]
- I have sorted the list in order of flux. Some are unsuitable because of blends, so I will analyze them here
- But I might also want some weaker lines, in the interest of diversity in wavelength bands
  - For instance, some around Ha, such as 6636.8 and 6776.8, which are the strongest ones around there that are not blends
- So I have five out of the 25 strongest, with possibly some more that are in between figures
- Plus 2 from around Ha
- And maybe I could do the least red ones, like 6221.82, which is the strongest there
- Strongest of the 7000
  - 7092.29 is nice and clean
- So now we have 9 hero lines
**** Hero lines
| Index |    Wave | Figure |    I/0 |  e I/0 |   II/0 | e II/0 | MYSO/0 | e MYSO/0 |
|-------+---------+--------+--------+--------+--------+--------+--------+----------|
|  1300 | 6221.82 | 6xxx-A | 0.2535 |      < | 0.5433 |      < | 0.6469 |   0.0835 |
|  1632 | 6636.76 | 6xxx-B | 0.5374 | 0.1076 | 0.2641 | 0.0800 | 2.6396 |   1.0973 |
|  1744 | 6776.75 | 6xxx-B | 0.4024 | 0.1387 | 0.3180 | 0.0453 | 0.4512 |   0.0655 |
|  1997 | 7092.29 | 7xxx-A | 0.2983 | 0.0855 | 0.2376 | 0.0423 | 0.5633 |   0.0610 |
|  2844 | 8150.67 | 7xxx-B | 0.1304 | 0.0801 | 0.1786 | 0.0194 | 0.2840 |   0.0403 |
|  3164 | 8550.06 | 8xxx-B | 0.3664 | 0.0820 | 0.1351 | 0.0590 | 0.1723 |   0.0183 |
|  3355 | 8789.18 | 8xxx-B | 0.1844 |      < | 0.1274 | 0.0365 | 0.3158 |   0.0229 |
|  3405 | 8850.65 | 8xxx-B | 0.2482 | 0.0846 | 0.2161 | 0.0228 | 0.3863 |   0.0499 |
|  3548 | 9029.22 | 9xxx-A | 0.2972 |      < | 0.1474 | 0.0586 | 0.4784 |   0.0755 |
|  3570 | 9057.17 | 9xxx-A | 0.5435 |      < | 0.0869 | 0.0273 | 0.4695 |        < |
|  3762 | 9297.36 | 9xxx-A | 0.5151 |      < | 0.2156 |      < | 0.7988 |   0.0708 |
**** Comments on particular lines
- ✘ 8333.95 This is beautifully strong, but is blended with a H line, so it impossible to measure for the other zones
- ✘ 8459.25 Has strong sky contamination
- ✘ 8659.51 Also very strong, and sky contamination is minimal but it is certainly there, so unfortunately must be dropped
- ✔ 9029.22 This is very strong and well-isolated
- ⊚ 8859.09 /unfortunately, this got left off the figures/ Although we could still use it  I suppose
- ⊚ 9019.35 Nice and strong, but it is very close to an H I line
- ✔ 8850.65 This is the classic line, which has clear measurements for multiple zones
- ⊚ 7628.72 /another one in a gap between the figures/
- ✘ 8299.16 Blended with H I line
- ✔ 8150.67 This is a very good one, with a well-measured and very small I/0
- ⊚ 9098.84 Nice strong line, bu there is a stellar line just to blue of it
- ✔ 8550.06 Strong line with a relatively large I/0 ratio
- ⊚ 8893.68 Not sure why the upper limit to I/0 is so high
- ✔ 9057.17 Good clean line, although some upper limits on the ratios
- ⊚ 7637.59 /In the gap/
- ✔ 8789.18 Good measurements
- ✘ 7837.58 Too affected by sky
- ✘ 7959.35 Again, sky blend
- ✘ 8649.96 Too much sky O2
- ✘ 9297.36 Not even shown as line in the figures - why not?
- ⊚ 8266.46 Not anything wrong with it, except that the stellar spectra are messy around there
- ✘ 8305.14 Blend with H I
- ⊚ 8272.50 Very similar to the nearby 8266.46
- ✘ 7804.48 Blend with sky
- ✘ 8945.95 Looks a bit weird
**** Sorted list
- Lines that we want in the Top Ten are marked in the TT column
| Index | TT |    wav0 | ewav0 |      0 |       e0 | Type           | blend |    I/0 |  e I/0 |   II/0 | e II/0 | MYSO/0 | e MYSO/0 |
|-------+----+---------+-------+--------+----------+----------------+-------+--------+--------+--------+--------+--------+----------|
|  2991 |    | 8333.95 |  0.24 | 0.7001 |   0.0437 | Deep Neutral   | True  |  1.273 | 0.3031 | 0.7199 | 0.0950 | 0.7099 |   0.0533 |
|  3091 |    | 8459.25 |  0.25 | 0.6381 |   0.0569 | Deep Neutral   | True  | 0.5609 | 0.1327 | 0.4636 | 0.0830 | 0.4447 |   0.0590 |
|  3252 |    | 8659.51 |  0.25 | 0.5215 |   0.0278 | Deep Neutral   | False | 0.6715 | 0.0412 | 0.4566 | 0.0494 | 0.1099 |   0.0311 |
|  3548 | X  | 9029.22 |  0.26 | 0.3990 |   0.0196 | Deep Neutral   | False | 0.2294 |      < | 0.1399 | 0.0569 | 0.4695 |   0.0632 |
|  3412 |    | 8859.09 |  0.46 | 0.3499 | 7.72e-05 | Deep Neutral?? | False | 0.4502 | 0.0112 | 0.4225 | 0.0043 | 1.3972 |   0.0018 |
|  3539 |    | 9019.35 |  0.47 | 0.3216 |   0.0258 | Deep Neutral   | False | 0.1510 |      < | 0.0837 |      < | 0.1644 |   0.0217 |
|  3405 | X  | 8850.65 |  0.26 | 0.3169 |   0.0101 | Deep Neutral   | False | 0.1878 | 0.0440 | 0.2156 | 0.0135 | 0.3745 |   0.0249 |
|  2426 |    | 7628.72 |  0.22 | 0.3048 |   0.0043 | Deep Neutral   | False | 0.7563 | 0.0132 | 0.3956 | 0.0144 | 0.9564 |   0.0242 |
|  2963 |    | 8299.16 |  0.24 | 0.2949 |   0.0200 | Deep Neutral   | True  | 0.9702 | 0.1785 | 0.8717 | 0.1043 | 0.9230 |   0.0802 |
|  2844 | X  | 8150.67 |  0.24 | 0.2902 |   0.0067 | Deep Neutral   | False | 0.0599 | 0.0320 | 0.1783 | 0.0179 | 0.3133 |   0.0338 |
|  3603 |    | 9098.84 |  0.47 | 0.2891 |   0.0109 | Deep Neutral   | False | 0.9313 | 0.0539 | 0.4823 | 0.0282 | 0.3270 |   0.2036 |
|  3164 | X  | 8550.06 |  0.25 | 0.2882 |   0.0196 | Deep Neutral   | False | 0.3269 | 0.0674 | 0.0971 | 0.0410 | 0.1749 |   0.0177 |
|  3439 |    | 8893.68 |  0.26 | 0.2813 |   0.0533 | Deep Neutral   | False | 1.2246 |      < | 0.4871 |      < | 0.5315 |   0.1143 |
|  3570 |    | 9057.17 |  0.47 | 0.2794 |   0.0030 | Deep Neutral   | False | 0.1023 |      < | 0.0687 | 0.0172 | 0.1870 |        < |
|  2434 |    | 7637.59 |  0.22 | 0.2700 |   0.0252 | Deep Neutral   | False | 0.8949 | 0.2697 | 0.4463 | 0.0845 | 1.5222 |   0.3188 |
|  3355 | X  | 8789.18 |  0.26 | 0.2665 |   0.0079 | Deep Neutral   | False | 0.0228 |      < | 0.0967 | 0.0086 | 0.3119 |   0.0109 |
|  2594 |    | 7837.58 |  0.23 | 0.2611 |   0.0060 | Deep Neutral   | False | 0.7847 | 0.1069 | 0.2784 | 0.0312 | 0.5355 |   0.0177 |
|  2692 |    | 7959.35 |  0.23 | 0.2566 |   0.0421 | Deep Neutral   | True  | 1.6585 |      < | 0.5259 |      < | 0.6063 |   0.1371 |
|  3244 |    | 8649.96 |  0.25 | 0.2499 |   0.0307 | Deep Neutral   | True  | 0.3625 | 0.1317 | 0.4452 | 0.0898 | 0.2957 |   0.0507 |
|  3762 |    | 9297.36 |  0.27 | 0.2498 |   0.0056 | Deep Neutral?  | False | 0.5011 |      < | 0.1890 |      < | 0.7861 |   0.0592 |
|  2937 |    | 8266.46 |  0.43 | 0.2333 |   0.0115 | Deep Neutral   | False | 0.2441 | 0.0255 | 0.2400 | 0.0483 | 0.3668 |   0.0285 |
|  2967 |    | 8305.14 |  0.43 | 0.2279 |      0.0 | Deep Neutral?  | True  | 0.0584 |    0.0 | 0.5088 |    0.0 | 0.3023 |      0.0 |
|  2942 |    | 8272.50 |  0.43 | 0.2241 |   0.0043 | Deep Neutral   | False | 0.0882 | 0.0225 | 0.2792 | 0.0406 | 0.1097 |   0.0236 |
|  2565 |    | 7804.48 |  0.40 | 0.2239 |   0.0013 | Deep Neutral   | False | 0.1569 |      < | 0.0823 |      < | 0.7771 |   0.0159 |
|  3481 |    | 8945.95 |  0.46 | 0.2118 |   0.0221 | Deep Neutral   | False | 0.6822 | 0.2820 | 0.4673 | 0.1404 | 0.4182 |   0.1076 |
*** DONE Run EMILI on the line list to get IDs
CLOSED: [2023-05-12 Fri 10:43]
**** DONE Issues and conclusions from EMILI
CLOSED: [2023-05-12 Fri 10:43]
- We want to look for consistency between the MYSO and 0 zones
  - At the moment, I am letting it find the velocity correction automatically, but this produces large differences between the zones
***** What to do about the velocities
- I could fix the per-zone and per-ion velocities using our results from Fig A1
- But on the other hand, it seems to do a good job of finding the mean velocities of each zone
-
****** Velocity comparison between zones
- Zone 0
  :  Velocity Structure: Bin/Vel(km/s)
  :  irvcor 1:    165.700958    
  :  irvcor 2:    170.145630    
  :  irvcor 3:    164.595108    
  :  irvcor 4:    161.649811    
  :  irvcor 5:    161.649811
- Zone MYSO
  :  Velocity Structure: Bin/Vel(km/s)
  :  irvcor 1:    171.206421    
  :  irvcor 2:    160.233536    
  :  irvcor 3:    159.780563    
  :  irvcor 4:    160.551498    
  :  irvcor 5:    160.551498
- Zone I
  :  Velocity Structure: Bin/Vel(km/s)
  :  irvcor 1:    173.895447    
  :  irvcor 2:    173.895447    
  :  irvcor 3:    160.534256    
  :  irvcor 4:    129.306076    
  :  irvcor 5:    129.306076    
***** DONE [12/12] Possible identifications of the strongest lines
CLOSED: [2023-05-03 Wed 11:59]
- For each line, we will look what EMILI suggests, then apply common sense
- We will rule out any III ion and any II ion that has first IP higher than 13 eV
  - We will not completely rule out species like C II, but they seem unlikely, although I suppose we could have excitation from destruction of charged PAH molecules ....
- Big output files from EMILI for
  - [[file:../data/n346-lines/emili/zone-0-emi.out][Zone 0]]
  - [[file:../data/n346-lines/emili/zone-MYSO-emi.out][Zone MYSO]]
****** DONE Likelihood of false positives from density of different line types
CLOSED: [2023-05-03 Wed 11:59]
- Permitted Fe I lines with A > 1e6 /s
  - Far more common in blue than in red
  - [[file:../data-atomic/fe-i-permitted-A-gt-1e6.txt]]
    | 4500 |  18 |     |       |
    |------+-----+-----+-------|
    | 5500 | 381 | 363 |  2.75 |
    | 6500 | 557 | 176 |  5.68 |
    | 7500 | 666 | 109 |  9.17 |
    | 8500 | 743 |  77 | 12.99 |
    | 9500 | 787 |  44 | 22.73 |
    #+TBLFM: $3=$2 - @-1$2::$4=1000/$3;f2
- All Fe I lines with upper level < 30,000 /cm
  - [[file:../data-atomic/fe-i-all-E-upper-lt-30000.txt]]
  - These are much sparser but still more common in blue than in red
    | 4500 |  18 | N/1000 AA | d wav |
    |------+-----+-----------+-------|
    | 5500 |  61 |        43 | 23.26 |
    | 6500 |  98 |        37 | 27.03 |
    | 7500 | 120 |        22 | 45.45 |
    | 8500 | 137 |        17 | 58.82 |
    | 9500 | 154 |        17 | 58.82 |
    #+TBLFM: $3=$2 - @-1$2::$4=1000/$3;f2
- All Fe I lines with upper level < 45,000 /cm
  - [[file:../data-atomic/fe-i-all-E-upper-lt-45000.txt]]
  - Intermediate energy
    | 4500 |   18 | N/1000 AA | d wav |
    |------+------+-----------+-------|
    | 5500 |  418 |       400 |  2.50 |
    | 6500 |  763 |       345 |  2.90 |
    | 7500 | 1046 |       283 |  3.53 |
    | 8500 | 1184 |       138 |  7.25 |
    | 9500 | 1374 |       190 |  5.26 |
    #+TBLFM: $3=$2 - @-1$2::$4=1000/$3;f2
- All Fe I lines with upper level < 60,000 /cm
  - [[file:../data-atomic/fe-i-all-E-upper-lt-60000.txt]]
  - There are a lot of these!!!
    | 4500 |    18 | N/1000 AA | d wav |
    |------+-------+-----------+-------|
    | 5500 |  3349 |      3331 |  0.30 |
    | 6500 |  6202 |      2853 |  0.35 |
    | 7500 |  8995 |      2793 |  0.36 |
    | 8500 | 11162 |      2167 |  0.46 |
    | 9500 | 13615 |      2453 |  0.41 |
    #+TBLFM: $3=$2 - @-1$2::$4=1000/$3;f2
  - So average spacing less than 0.5 AA across the entire spectrum
  - This means that it is no surprise to see several Fe I candidate IDs for each DRL 
- All C I lines with upper level < 90,000 /cm
  - [[file:../data-atomic/c-i-all-E-upper-lt-90000.txt]]
  - This is nearly up to the ionization limit
    | 4500 |  18 | N/1000 AA | d wav |
    |------+-----+-----------+-------|
    | 5500 | 294 |       276 |  3.62 |
    | 6500 | 596 |       302 |  3.31 |
    | 7500 | 745 |       149 |  6.71 |
    | 8500 | 823 |        78 | 12.82 |
    | 9500 | 976 |       153 |  6.54 |
    #+TBLFM: $3=$2 - @-1$2::$4=1000/$3;f2
  - So even weak and high-n C I lines should not have a high false-positive rate
****** Summary of possible IDs
- Note that none of these are very convincing, but they are the best we have
- The canonical version of the table is now in the LaTeX document. The version here is no longer up to date.

| Wav obs | Ion    |   Wav lab | E upper    | Pro    | Contra       |
|---------+--------+-----------+------------+--------+--------------|
| 6221.82 | Si I   |   6221.70 | 65,468     |        | Mult, BR, FP |
|         | Fe I]  | 6221.6722 | 22,996.67  |        | Mult         |
|---------+--------+-----------+------------+--------+--------------|
| 6636.76 | N I    |  6636.938 | 109,856.52 |        | LC, EUV, BR  |
|         | [Co I] |  6636.620 | 16,470.60  | Ground | Abun         |
|---------+--------+-----------+------------+--------+--------------|
| 6776.75 | Fe I]  |  6776.689 | 44,551.33  |        | BR           |
|         | Ca I   |   6776.5+ | 59,802     |        | BR           |
|---------+--------+-----------+------------+--------+--------------|
| 7092.29 | C I]   |   7092.51 | 89,350.10  |        | BR           |
|         | Fe I   | 7092.077+ | 57,233.84  |        | Mult, FP     |
|---------+--------+-----------+------------+--------+--------------|
| 8150.67 | [Fe I] | 8151.3424 | 12,968.55  | Ground | Mult?        |
|         | Fe I   | 8150.641+ | 60,097.02  |        | FP, Mult, BR |
|---------+--------+-----------+------------+--------+--------------|
| 8550.06 | Si I   |   8550.34 | 61,881.6   | BR?    | Mult         |
|         | Cl I   |  8550.441 | 85,917.94  | BR     | Abun         |
|---------+--------+-----------+------------+--------+--------------|
| 8789.18 | Fe I   |  8789.660 | 58,118.87  |        | Mult, FP, BR |
|---------+--------+-----------+------------+--------+--------------|
| 8850.65 | Fe I   | 8850.1114 | 37,521.16  |        | Mult, BR     |
|---------+--------+-----------+------------+--------+--------------|
| 9029.22 | N  I   |  9028.922 | 104,654.03 | BR     | LC, Mult     |
|---------+--------+-----------+------------+--------+--------------|
| 9057.17 | O I    |   9057.02 | 124,242.58 |        | AI           |
|         | Fe I   |  9056.759 | 59,514.13  | Mult?  | FP           |
|---------+--------+-----------+------------+--------+--------------|
| 9297.36 | Fe I   |   9297.61 | 51,770.55  | Mult?  | BR           |
|---------+--------+-----------+------------+--------+--------------|
|         |        |           |            |        |              |

Here are the abbreviations:
- Mult :: Multiplet. Do we see other components of the same multiplet
- BR :: Branching Ratio. Does this line have a high Branching Ratio from the upper level, or are the other theoretically brighter lines that we do not see
- FP :: False Positive. Are there so many of these lines, that it is not surprising we get an ID
- LC :: Line Class. Is this class of line seen more in other zones than Zone 0
- Abun :: Abundance. Is this species of low abundance
- AI :: Autoionizing. Is this a transition from a doubly excited level above the IP, which should be very broad
- Ground :: Is this a transition to the ground configuration. There are few of these, so less likely to be chance coincidence. Also, easier to excite. 
****** DONE 6221.82
CLOSED: [2023-04-28 Fri 23:26]
- C II 6221.900 is supposedly the best match, but this seems very unlikely
- It between highly excited levels

- Other possibilities are Si I 6221.70 or Fe I] 6221.6722 
******* C II 6221.900 candidate ID for 6221.82
Three lines of multiplet but all with the same wavelength
#+begin_example
  Atomic Line List version: 3.00b4   Constructed: 2021-07-21 14:47 GMT
Wavelength range: 0 - inf   Unit: Angstrom   Type: Air
Radial velocity: 0 km/s
Element/Spectrum: C  II

-LAB-WAVL-ANG-AIR-|-DLAM--|-SPC-|TT|-CONFIGURATION-|-TERM--|-J_i-J_k-|--A_ki---|-TPF-|-LEVEL-ENERGY--CM^-1-|-REF---|
   6221.9          3.9e-01  C II E1  2s2.5g-2s2.17f  2G-2Fo 7/2 - 5/2                 179073.05 - 195140.90 ASD,070
   6221.9          3.9e-01  C II E1  2s2.5g-2s2.17f  2G-2Fo 7/2 - 7/2                 179073.05 - 195140.90 ASD,070
   6221.9          3.9e-01  C II E1  2s2.5g-2s2.17f  2G-2Fo 9/2 - 7/2                 179073.05 - 195140.90 ASD,070
#+end_example
******* Si I 6221.70 candidate ID for 6221.82
- Highly excited level, no other lines in multiplet
- But other lines from same upper level are not seen
#+begin_example
-LAB-WAVL-ANG-AIR-|-DLAM--|-SPC-|TT|---------------CONFIGURATION---------------|--------TERM---------|J_i-J_k|--A_ki---|-TPF-|LEVEL-ENERGY--CM^-1|-REF---|
   5497.83         1.9e-01  Si I E1             3s2.3p.4p-3s2.3p.(2Po<3/2>).14d         1P-(3/2,5/2)o  1 - 1                  47284.06 - 65468.00 ASD
   5729.75         2.1e-01  Si I E1             3s2.3p.4p-3s2.3p.(2Po<3/2>).14d         3D-(3/2,5/2)o  1 - 1                  48020.07 - 65468.00 ASD
   5756.89         2.1e-01  Si I E1             3s2.3p.4p-3s2.3p.(2Po<3/2>).14d         3D-(3/2,5/2)o  2 - 1                  48102.32 - 65468.00 ASD
   6081.15         2.3e-01  Si I E1             3s2.3p.4p-3s2.3p.(2Po<3/2>).14d         3P-(3/2,5/2)o  0 - 1                  49028.29 - 65468.00 ASD
   6093.12         2.3e-01  Si I E1             3s2.3p.4p-3s2.3p.(2Po<3/2>).14d         3P-(3/2,5/2)o  1 - 1                  49060.60 - 65468.00 ASD
   6141.04         2.4e-01  Si I E1             3s2.3p.4p-3s2.3p.(2Po<3/2>).14d         3P-(3/2,5/2)o  2 - 1                  49188.62 - 65468.00 ASD
   6221.70         2.4e-01  Si I E1             3s2.3p.4p-3s2.3p.(2Po<3/2>).14d         3S-(3/2,5/2)o  1 - 1                  49399.67 - 65468.00 ASD
   6543.29         2.7e-01  Si I E1             3s2.3p.4p-3s2.3p.(2Po<3/2>).14d         1D-(3/2,5/2)o  2 - 1                  50189.39 - 65468.00 ASD
   7215.1          3.3e-01  Si I E1             3s2.3p.4p-3s2.3p.(2Po<3/2>).14d         1S-(3/2,5/2)o  0 - 1                  51612.01 - 65468.00 ASD
#+end_example
******* Fe I] 6221.6722 candidate ID for 6221.82
- /Conclusion: Very unlikely to be a legitimate ID/
- This is the shortest wavelength out of a multiplet with 15 members
  - multiplet 13 in Nave:1994a, although strangely they are missing the 5-4 component at 6221.6722
  - a5F - z7Fo
  - The letters ~a~ and ~z~ are for the configurations of heavy ions:
    - a, b, c, ... are the even parity configurations in order of increasing energy
    - z, y, x, ... are the same for the odd parity configurations
- On the plus side, the upper level is only 23,000 /cm so relatively easy to excite
  - Could be excited from ground configuration by transitions in range 4326-4490 \AA (a5D \to z7Fo, multiplet 2)
  - These are conveniently just outside the MUSE range
- On the minus side, there are lots of lines in this multiplet and the majority are not seen
  - ❓ 6280.6174 coincides with OH line. Slight indication that there might be something there
  - ❓ 6353.8363 also coincides with OH line, but not much evidence of anything else
  - ❌ 6400.3171 Definitely nothing there
  - ❌ 6462.7130 Coincide with C II line and OH sky line, but certainly nothing there in Zone 0 (minimum between two DRLs). *And this has the largest A value*
  - ❓ 6464.6621 Ditto, although maybe, just maybe, it could be blended with DRL 6468
  - ❌ 6498.9384 Definitely nothing there (3 Angstrom to blue of DRL 6502)
  - ❓ 6547.5746 Coincides with [N II] 6548, so would be undetectable
  - ❓ 6551.6772 Also close to [N II] 6548, but looks like there is nothing there
  - ❓ 6574.2267 Could be something there, but cannot tell since too close to [N II] 6583
  - ❌ 6609.6779 Definitely nothing there
  - ✔ 6613.8250 /could be/ DRL 6615
  - ✔ 6625.0216 /could be/ blended blue wing of DRL 6629
  - ❌ 6648.0797 Nothing there. Close to DRL 6646
- Summary: 5 definite NO, 6 unclear, 2 maybe YES
#+begin_example
Atomic Line List version: 3.00b4   Constructed: 2021-07-21 14:47 GMT
Wavelength range: 0 - inf   Unit: Angstrom   Type: Air
Radial velocity: 0 km/s
Element/Spectrum: Fe I

-LAB-WAVL-ANG-AIR-|-DLAM--|-SPC--|TT|--------------CONFIGURATION--------------|--TERM---|J_i-J_k|--A_ki---|-TPF-|---LVL-EN--CM-1---|-REF---|
   6221.6722       5.5e-04  Fe I] E1          3d7.(4F).4s-3d6.(5D).4s.4p.(3Po)  a5F-z7Fo  5 - 4  2.335e+01    30 6928.27 - 22996.67 061
   6280.6174       5.6e-04  Fe I] E1          3d7.(4F).4s-3d6.(5D).4s.4p.(3Po)  a5F-z7Fo  5 - 5  6.260e+02   ASD 6928.27 - 22845.87 061
   6353.8363       5.7e-04  Fe I] E1          3d7.(4F).4s-3d6.(5D).4s.4p.(3Po)  a5F-z7Fo  4 - 3  7.870e+00   ASD 7376.76 - 23110.94 061
   6358.6968       5.7e-04  Fe I] E1          3d7.(4F).4s-3d6.(5D).4s.4p.(3Po)  a5F-z7Fo  5 - 6  4.320e+02   ASD 6928.27 - 22650.41 061
   6400.3171       5.8e-04  Fe I] E1          3d7.(4F).4s-3d6.(5D).4s.4p.(3Po)  a5F-z7Fo  4 - 4  8.700e+02   ASD 7376.76 - 22996.67 061
   6462.7130       5.9e-04  Fe I] E1          3d7.(4F).4s-3d6.(5D).4s.4p.(3Po)  a5F-z7Fo  4 - 5  9.700e+04   ASD 7376.76 - 22845.87 061
   6464.6621       5.9e-04  Fe I] E1          3d7.(4F).4s-3d6.(5D).4s.4p.(3Po)  a5F-z7Fo  3 - 2  6.764e-01    30 7728.06 - 23192.50 061
   6498.9384       6.0e-04  Fe I] E1          3d7.(4F).4s-3d6.(5D).4s.4p.(3Po)  a5F-z7Fo  3 - 3  4.640e+02   ASD 7728.06 - 23110.94 061
   6547.5746       6.1e-04  Fe I] E1          3d7.(4F).4s-3d6.(5D).4s.4p.(3Po)  a5F-z7Fo  3 - 4  8.725e+01    30 7728.06 - 22996.67 061
   6551.6772       6.1e-04  Fe I] E1          3d7.(4F).4s-3d6.(5D).4s.4p.(3Po)  a5F-z7Fo  2 - 1  2.573e+01    30 7985.78 - 23244.84 061
   6574.2267       6.1e-04  Fe I] E1          3d7.(4F).4s-3d6.(5D).4s.4p.(3Po)  a5F-z7Fo  2 - 2  3.060e+02   ASD 7985.78 - 23192.50 061
   6609.6779       6.2e-04  Fe I] E1          3d7.(4F).4s-3d6.(5D).4s.4p.(3Po)  a5F-z7Fo  2 - 3  1.480e+02    30 7985.78 - 23110.94 061
   6613.8250       9.8e-04  Fe I] E1          3d7.(4F).4s-3d6.(5D).4s.4p.(3Po)  a5F-z7Fo  1 - 0  2.637e+02    30 8154.71 - 23270.38 061
   6625.0216       6.2e-04  Fe I] E1          3d7.(4F).4s-3d6.(5D).4s.4p.(3Po)  a5F-z7Fo  1 - 1  2.340e+02   ASD 8154.71 - 23244.84 061
   6648.0797       6.3e-04  Fe I] E1          3d7.(4F).4s-3d6.(5D).4s.4p.(3Po)  a5F-z7Fo  1 - 2  3.640e+01   ASD 8154.71 - 23192.50 061

gk*Aki weighted average wavelength:    6461.1778      
#+end_example

Other downward transitions from z7Fo. But these have much lower A values
#+begin_example
-LAB-WAVL-ANG-AIR-|-DLAM--|-SPC--|TT|--------------CONFIGURATION--------------|--TERM---|J_i-J_k|--A_ki---|-TPF-|LEVEL-ENERGY--CM^-1|-REF---|
   8978.4695       1.1e-03  Fe I] E1          3d7.(4F).4s-3d6.(5D).4s.4p.(3Po)  a3F-z7Fo  4 - 3  3.414e-01    30 11976.24 - 23110.94 061
   9071.5628       1.2e-03  Fe I] E1          3d7.(4F).4s-3d6.(5D).4s.4p.(3Po)  a3F-z7Fo  4 - 4  9.091e-03    30 11976.24 - 22996.67 061
   9197.4219       1.2e-03  Fe I] E1          3d7.(4F).4s-3d6.(5D).4s.4p.(3Po)  a3F-z7Fo  4 - 5  1.333e-01    30 11976.24 - 22845.87 061
   9403.3731       1.3e-03  Fe I] E1          3d7.(4F).4s-3d6.(5D).4s.4p.(3Po)  a3F-z7Fo  3 - 2  2.548e-01    30 12560.93 - 23192.50 061
   9476.0698       1.3e-03  Fe I] E1          3d7.(4F).4s-3d6.(5D).4s.4p.(3Po)  a3F-z7Fo  3 - 3  4.401e-02    30 12560.93 - 23110.94 061
   9579.8274       1.3e-03  Fe I] E1          3d7.(4F).4s-3d6.(5D).4s.4p.(3Po)  a3F-z7Fo  3 - 4  2.704e-02    30 12560.93 - 22996.67 061
   9728.4771       1.3e-03  Fe I] E1          3d7.(4F).4s-3d6.(5D).4s.4p.(3Po)  a3F-z7Fo  2 - 1  1.136e-01    30 12968.55 - 23244.84 061
   9778.2789       1.4e-03  Fe I] E1          3d7.(4F).4s-3d6.(5D).4s.4p.(3Po)  a3F-z7Fo  2 - 2  3.305e-02    30 12968.55 - 23192.50 061
   9856.9121       1.4e-03  Fe I] E1          3d7.(4F).4s-3d6.(5D).4s.4p.(3Po)  a3F-z7Fo  2 - 3                  12968.55 - 23110.94 061
#+end_example
****** DONE 6636.76
CLOSED: [2023-04-28 Fri 23:26]
- Already done below in [[id:6577FEB2-A7FF-4401-9FF3-9387BA7FF243][N I lines (5s 4P \to 3p 4Do) around H alpha (6629, 6637, 6646, 6656)]]
- But need to list other EMILI suggestions
- Note that the  measurement of MYSO/0 for 6637 is clearly an overestimate. It is probably affected by the Raman absorption
******* [Co I] 6636.620 candidate ID for 6636.76
- This is a low-lying level, which should make it easy to excite
- On the other hand, the abundance should be small
- There are a whole bunch of forbidden [Co I] lines
- Other lines of the same multiplet. Remove M1 contributions since they have smaller A
  - 5958.4838 ? Overlaps with Si II 5958
  - 6263.0898 O? DRL at 6261.68 ± 0.53
  - 6386.1346 ? Overlaps with Fe II 6383.73, 6385.46
  - 6503.8366 O? DRL at 6501.74 ± 0.55
  - 6636.6227 .. This is the target DRL at 6636.76 ± 0.57
  - 6678.7039 ? Overlaps with He I 6678.15
  - 6818.8033 ? Coincides with a feature that was dismissed as noise, but may be a weak DRL
- Conclusion is marginally favorable: we have two coincidences but they are at the 3-sigma level of wavelength difference. Plus one possible. 
  
#+begin_example
-LAB-WAVL-ANG-AIR-|-DLAM--|-SPC--|TT|-----CONFIGURATION-----|-TERM--|-J_i-J_k-|--A_ki---|-TPF-|---LVL-EN--CM-1---|-REF---|
   5958.4838       5.0e-04 [Co I] E2     3d7.4s2-3d8.(1D).4s a4F-a2D 9/2 - 5/2 1.537e-01    30    0.00 - 16778.15 071
   6263.0898       5.6e-04 [Co I] E2     3d7.4s2-3d8.(1D).4s a4F-a2D 7/2 - 5/2 3.314e-02    30  816.00 - 16778.15 071
   6386.1346       5.8e-04 [Co I] E2     3d7.4s2-3d8.(1D).4s a4F-a2D 7/2 - 3/2 1.152e-01    30  816.00 - 16470.60 071
   6503.8366       6.0e-04 [Co I] E2     3d7.4s2-3d8.(1D).4s a4F-a2D 5/2 - 5/2 8.905e-03    30 1406.85 - 16778.15 071
   6636.6227       6.2e-04 [Co I] E2     3d7.4s2-3d8.(1D).4s a4F-a2D 5/2 - 3/2 5.373e-02    30 1406.85 - 16470.60 071
   6678.7039       6.3e-04 [Co I] E2     3d7.4s2-3d8.(1D).4s a4F-a2D 3/2 - 5/2 1.360e-03    30 1809.31 - 16778.15 071
   6818.8033       6.6e-04 [Co I] E2     3d7.4s2-3d8.(1D).4s a4F-a2D 3/2 - 3/2 2.219e-02    30 1809.31 - 16470.60 071
#+end_example

- Other transitions from the same upper level. Pruned the ones of same multiplet, and also with A < 0.01
  - 8109.4084 X Nothing there
  - 8486.3041 ? Overlaps with sky OH
  - 8773.5166 ? Overlaps with sky OH
- Conclusions is mildly negative. For 2 lines, we cannot say, while another is certainly missing. 
    
#+begin_example
-LAB-WAVL-ANG-AIR-|-DLAM--|-SPC--|TT|-----CONFIGURATION-----|-TERM--|-J_i-J_k-|--A_ki---|-TPF-|LEVEL-ENERGY--CM^-1|-REF---|
   8109.4084       9.3e-04 [Co I] E2 3d8.(3F).4s-3d8.(1D).4s b4F-a2D 7/2 - 3/2 7.020e-02    30  4142.63 - 16470.60 071
   8486.3041       1.0e-03 [Co I] M1 3d8.(3F).4s-3d8.(1D).4s b4F-a2D 5/2 - 3/2 1.578e-01    30  4690.14 - 16470.60 071
   8486.3041       1.0e-03 [Co I] E2 3d8.(3F).4s-3d8.(1D).4s b4F-a2D 5/2 - 3/2 5.855e-02    30  4690.14 - 16470.60 071
   8773.5166       1.1e-03 [Co I] M1 3d8.(3F).4s-3d8.(1D).4s b4F-a2D 3/2 - 3/2 6.561e-02    30  5075.79 - 16470.60 071
   8773.5166       1.1e-03 [Co I] E2 3d8.(3F).4s-3d8.(1D).4s b4F-a2D 3/2 - 3/2 9.873e-03    30  5075.79 - 16470.60 071
  11073.3749       1.7e-03 [Co I] E2 3d8.(3F).4s-3d8.(1D).4s a2F-a2D 7/2 - 3/2 8.563e-03    30  7442.40 - 16470.60 071
  12481.2696       2.2e-03 [Co I] M1 3d8.(3F).4s-3d8.(1D).4s a2F-a2D 5/2 - 3/2 1.872e-02    30  8460.78 - 16470.60 071
#+end_example
****** DONE 6776.75
CLOSED: [2023-05-01 Mon 22:55]
- Supposedly [[file:../data/n346-lines/emili/zone-0-emi.out::6776.84][Ni II  6776.84]] 
- Could also be  6776.689  Fe I], 6776.658* Ca I,  6777.120* Ca I
- 
******* Fe I] 6776.689 candidate ID for 6776.75
- Three lines in multiplet
  - 6776.6886 This one
  - 6839.8657 Possibly something weak at 6839
  - 6921.0222 Badly affected by telluric absorption
  - So cannot be ruled out, but high upper level energy so not clear why this line in particular
- But, considering other transitions down from same upper level
  - We should have much stronger lines at 6269.1477, 6579.4724, 6586.0036, 8560.9768, 8975.3113
  - Nothing at 8975, We see one at 8561 but weaker, some would be masked by [N II] 6583, We do see one at 6270.7 but that is more than 1.50 AA away
  - So, there are some matches but it still makes no sense since they should be much brighter. And there are some blue lines that should be even brighter
#+begin_example
-LAB-WAVL-ANG-AIR-|-DLAM--|-SPC--|TT|--------------CONFIGURATION--------------|--TERM---|J_i-J_k|--A_ki---|-TPF-|LEVEL-ENERGY--CM^-1|-REF---|
   6776.6886       1.0e-03  Fe I] E1              3d6.4s2-3d6.(3F).4s.4p.(3Po)  b1G-w5Fo  4 - 3  6.761e-01    30 29798.93 - 44551.33 061
   6839.8657       6.6e-04  Fe I] E1              3d6.4s2-3d6.(3F).4s.4p.(3Po)  b1G-w5Fo  4 - 4  7.252e-01    30 29798.93 - 44415.07 061
   6921.0222       1.1e-03  Fe I] E1              3d6.4s2-3d6.(3F).4s.4p.(3Po)  b1G-w5Fo  4 - 5  3.214e-01    30 29798.93 - 44243.68 061

gk*Aki weighted average wavelength:    6839.0485
#+end_example

#+begin_example
-LAB-WAVL-ANG-AIR-|-DLAM--|-SPC--|TT|--TERM---|J_i-J_k|--A_ki---|-dA_ki-|-TPF-|LEVEL-ENERGY--CM^-1|-REF---|
   2243.90564      1.1e-04  Fe I  E1  a5D-w5Fo  4 - 3  6.922e+04            30     0.00 - 44551.33 061
   2265.05427      1.1e-04  Fe I  E1  a5D-w5Fo  3 - 3  5.717e+05            30   415.93 - 44551.33 061
   2279.93690      1.2e-04  Fe I  E1  a5D-w5Fo  2 - 3  1.158e+07            30   704.01 - 44551.33 061
   2689.21267      1.6e-04  Fe I  E1  a5F-w5Fo  4 - 3  3.476e+07            30  7376.76 - 44551.33 061
   2714.86927      1.6e-04  Fe I  E1  a5F-w5Fo  3 - 3  1.499e+06            30  7728.06 - 44551.33 061
   2734.00553      1.7e-04  Fe I  E1  a5F-w5Fo  2 - 3  4.714e+06            30  7985.78 - 44551.33 061
   3068.93812      2.1e-04  Fe I] E1  a3F-w5Fo  4 - 3  2.336e+03            30 11976.24 - 44551.33 061
   3125.03194      2.2e-04  Fe I] E1  a3F-w5Fo  3 - 3  1.941e+04            30 12560.93 - 44551.33 061
   3165.36639      2.2e-04  Fe I] E1  a3F-w5Fo  2 - 3  2.756e+03            30 12968.55 - 44551.33 061
   3702.4921       3.1e-04  Fe I] E1  a5P-w5Fo  3 - 3  1.508e+06            30 17550.18 - 44551.33 061
   3726.8969       3.1e-04  Fe I] E1  a5P-w5Fo  2 - 3  1.303e+06            30 17726.99 - 44551.33 061
   3819.6259       3.3e-04  Fe I] E1  a3P-w5Fo  2 - 3  3.257e+04            30 18378.19 - 44551.33 061
   4037.1289       3.6e-04  Fe I] E1  a3H-w5Fo  4 - 3  3.629e+02            30 19788.25 - 44551.33 061
   4181.1331       3.9e-04  Fe I] E1  b3F-w5Fo  4 - 3  3.290e+03            30 20641.11 - 44551.33 061
   4222.3454       4.0e-04  Fe I] E1  b3F-w5Fo  3 - 3  1.287e+03            30 20874.48 - 44551.33 061
   4251.8878       4.0e-04  Fe I] E1  b3F-w5Fo  2 - 3  8.271e+00            30 21038.99 - 44551.33 061
   4432.9120       4.4e-04  Fe I] E1  a3G-w5Fo  4 - 3  2.603e+02            30 21999.13 - 44551.33 061
   4482.6643       4.5e-04  Fe I] E1  a3G-w5Fo  3 - 3  6.825e+02            30 22249.43 - 44551.33 061
   4604.2437       4.7e-04  Fe I] E1  b3P-w5Fo  2 - 3  3.868e+03            30 22838.32 - 44551.33 061
   4892.7938       5.4e-04  Fe I] E1  b3G-w5Fo  4 - 3  6.246e+00            30 24118.82 - 44551.33 061
   4945.3024       5.5e-04  Fe I] E1  c3P-w5Fo  2 - 3  7.710e+01            30 24335.76 - 44551.33 061
   4946.0367       5.5e-04  Fe I] E1  b3G-w5Fo  3 - 3  1.608e+00            30 24338.76 - 44551.33 061
   5004.4411       5.6e-04  Fe I] E1  a1G-w5Fo  4 - 3  3.776e+00            30 24574.65 - 44551.33 061
   5455.1034       6.7e-04  Fe I] E1  a3D-w5Fo  3 - 3  7.073e+02            30 26224.97 - 44551.33 061
   5576.4434       7.0e-04  Fe I] E1  a3D-w5Fo  2 - 3  3.981e-02            30 26623.73 - 44551.33 061
   5577.6487       7.0e-04  Fe I] E1  b3H-w5Fo  4 - 3  5.296e+01            30 26627.61 - 44551.33 061
   6269.1477       8.8e-04  Fe I] E1  a1D-w5Fo  2 - 3  1.311e+01            30 28604.61 - 44551.33 061
   6579.4724       9.7e-04  Fe I] E1  b3D-w5Fo  2 - 3  9.614e+00            30 29356.74 - 44551.33 061
   6586.0036       9.7e-04  Fe I] E1  b3D-w5Fo  3 - 3  2.920e+01            30 29371.81 - 44551.33 061
   6776.6886       1.0e-03  Fe I] E1  b1G-w5Fo  4 - 3  6.761e-01            30 29798.93 - 44551.33 061
   8560.9768       1.6e-03  Fe I] E1  c3F-w5Fo  4 - 3  1.364e+02            30 32873.63 - 44551.33 061
   8975.3113       1.8e-03  Fe I] E1  c3F-w5Fo  3 - 3  2.033e+02            30 33412.71 - 44551.33 061
   9268.7101       1.9e-03  Fe I] E1  c3F-w5Fo  2 - 3  1.585e-03            30 33765.30 - 44551.33 061
  10083.4305       2.3e-03  Fe I] E1  b1D-w5Fo  2 - 3  3.091e-03            30 34636.79 - 44551.33 061
  13135.727        3.9e-03  Fe I] E1  d3F-w5Fo  2 - 3  1.181e+00            30 36940.59 - 44551.33 061
  13196.411        3.9e-03  Fe I] E1  d3F-w5Fo  3 - 3  7.383e+01            30 36975.59 - 44551.33 061
  13320.098        4.0e-03  Fe I] E1  d3F-w5Fo  4 - 3  4.090e+01            30 37045.93 - 44551.33 061
  27167.070        1.7e-02  Fe I] E1   3P-w5Fo  2 - 3  1.794e-01            30 40871.41 - 44551.33 061
  72026.01         1.2e-01  Fe I] E1  e7D-w5Fo  4 - 3  2.974e+00            30 43163.32 - 44551.33 061
  89524.52         1.8e-01  Fe I] E1  e7D-w5Fo  3 - 3  3.684e-01            30 43434.62 - 44551.33 061
 108926.27         2.7e-01  Fe I] E1  e7D-w5Fo  2 - 3  1.116e+00            30 43633.53 - 44551.33 061
#+end_example
******* Ca I 6776.658 candidate ID for 6776.75
I can't find it in AtLL v3 but maybe it is this doublet
#+begin_example
LAB-WAVL-ANG-AIR-|-DLAM--|-SPC-|TT|---CONF----|-TERM--|J_i-J_k|--A_ki---|-TPF-|LEVEL-ENERGY--CM^-1|-REF---|
   6776.349        2.9e-02  Ca I E1 4s.6d-3d.6f  3D-3Do  1 - 1  1.190e+04     3 45049.07 - 59802.21 ASD
   6776.967        2.9e-02  Ca I E1 4s.6d-3d.6f  3D-3Do  2 - 1  3.965e+03     3 45050.42 - 59802.21 ASD

gk*Aki weighted average wavelength:    6776.50
#+end_example

- Should be lots more transitions down from this level.
- Blue ones with MUCH higher (100 x) brightness: 4674.939, 4685.295 should be in our range
- Many red ones should have a similar or a few times higher brightness: 6122.985, 8493.39, 8660.20, 8864.29, 8874.94
- None of these are seen, although 8864.29 coincides with an H I line

#+begin_example
-LAB-WAVL-ANG-AIR-|-DLAM--|-SPC--|TT|CONFIGURATION|-TERM--|J_i-J_k|--A_ki---|-TPF-|LEVEL-ENERGY--CM^-1|-REF---|
   4533.051        1.3e-02  Ca I  E1  4s.4d-3d.6f   3D-3Do  1 - 1  3.008e+06     3 37748.20 - 59802.21 ASD
   4533.806        1.3e-02  Ca I  E1  4s.4d-3d.6f   3D-3Do  2 - 1  1.002e+06     3 37751.87 - 59802.21 ASD
   4674.939        1.4e-02  Ca I  E1    4p2-3d.6f   3P-3Do  0 - 1  6.095e+06     3 38417.54 - 59802.21 ASD
   4685.295        1.4e-02  Ca I  E1    4p2-3d.6f   3P-3Do  1 - 1  4.541e+06     3 38464.81 - 59802.21 ASD
   4704.422        1.4e-02  Ca I  E1    4p2-3d.6f   3P-3Do  2 - 1  2.991e+05     3 38551.56 - 59802.21 ASD
   5238.983        1.7e-02  Ca I] E1    4p2-3d.6f   1D-3Do  2 - 1                  40719.85 - 59802.21 ASD
   5860.312        2.2e-02  Ca I  E1  4s.5d-3d.6f   3D-3Do  1 - 1  1.032e+05     3 42743.00 - 59802.21 ASD
   5860.901        2.2e-02  Ca I  E1  4s.5d-3d.6f   3D-3Do  2 - 1  3.439e+04     3 42744.72 - 59802.21 ASD
   5921.422        2.2e-02  Ca I] E1  4s.5d-3d.6f   1D-3Do  2 - 1                  42919.05 - 59802.21 ASD
   6122.985        2.4e-02  Ca I  E1    3d2-3d.6f   3F-3Do  2 - 1  5.944e+04     3 43474.83 - 59802.21 ASD
   6749.247        2.9e-02  Ca I] E1  4s.6d-3d.6f   1D-3Do  2 - 1                  44989.83 - 59802.21 ASD
   6776.349        2.9e-02  Ca I  E1  4s.6d-3d.6f   3D-3Do  1 - 1  1.190e+04     3 45049.07 - 59802.21 ASD
   6776.967        2.9e-02  Ca I  E1  4s.6d-3d.6f   3D-3Do  2 - 1  3.965e+03     3 45050.42 - 59802.21 ASD
   7349.79         4.8e-02  Ca I] E1  4s.7d-3d.6f   1D-3Do  2 - 1                  46200.13 - 59802.21 ASD
   7405.24         3.5e-02  Ca I  E1  4s.7d-3d.6f   3D-3Do  1 - 1  6.277e+02     3 46301.97 - 59802.21 ASD
   7406.16         3.5e-02  Ca I  E1  4s.7d-3d.6f   3D-3Do  2 - 1  2.091e+02     3 46303.65 - 59802.21 ASD
   7778.01         5.4e-02  Ca I] E1  4s.8d-3d.6f   1D-3Do  2 - 1                  46948.98 - 59802.21 ASD
   7831.16         3.9e-02  Ca I  E1  4s.8d-3d.6f   3D-3Do  1 - 1  8.283e+02     3 47036.22 - 59802.21 ASD
   7833.48         3.9e-02  Ca I  E1  4s.8d-3d.6f   3D-3Do  2 - 1  2.759e+02     3 47040.01 - 59802.21 ASD
   8092.89         4.1e-02  Ca I] E1  3d.5s-3d.6f   1D-3Do  2 - 1                  47449.08 - 59802.21 ASD
   8097.72         4.2e-02  Ca I  E1  3d.5s-3d.6f   3D-3Do  1 - 1                  47456.45 - 59802.21 ASD
   8104.00         4.2e-02  Ca I  E1  3d.5s-3d.6f   3D-3Do  2 - 1                  47466.01 - 59802.21 ASD
   8296.78         4.4e-02  Ca I  E1  4s.9d-3d.6f   3D-3Do  1 - 1  5.237e+03     3 47752.65 - 59802.21 ASD
   8299.97         4.4e-02  Ca I  E1  4s.9d-3d.6f   3D-3Do  2 - 1  1.744e+03     3 47757.29 - 59802.21 ASD
   8338.12         6.2e-02  Ca I] E1  4s.9d-3d.6f   1D-3Do  2 - 1                  47812.39 - 59802.21 ASD
   8493.39         6.4e-02  Ca I  E1 4s.10d-3d.6f   3D-3Do  1 - 1  1.199e+04     3 48031.58 - 59802.21 ASD
   8494.58         6.4e-02  Ca I  E1 4s.10d-3d.6f   3D-3Do  2 - 1  3.995e+03     3 48033.23 - 59802.21 ASD
   8530.95         6.5e-02  Ca I] E1 4s.10d-3d.6f   1D-3Do  2 - 1                  48083.41 - 59802.21 ASD
   8660.20         6.7e-02  Ca I  E1 4s.11d-3d.6f   3D-3Do  1 - 1  1.580e+04     3 48258.30 - 59802.21 ASD
   8660.60         6.7e-02  Ca I  E1 4s.11d-3d.6f   3D-3Do  2 - 1  5.265e+03     3 48258.84 - 59802.21 ASD
   8684.69         6.7e-02  Ca I] E1 4s.11d-3d.6f   1D-3Do  2 - 1                  48290.85 - 59802.21 ASD
   8793.28         6.9e-02  Ca I  E1 4s.12d-3d.6f   3D-3Do  1 - 1                  48433.01 - 59802.21 ASD
   8793.63         6.9e-02  Ca I  E1 4s.12d-3d.6f   3D-3Do  2 - 1                  48433.46 - 59802.21 ASD
   8807.78         6.9e-02  Ca I] E1 4s.12d-3d.6f   1D-3Do  2 - 1                  48451.73 - 59802.21 ASD
   8864.29         5.0e-02  Ca I  E1    3d2-3d.6f   3P-3Do  0 - 1  3.484e+04     3 48524.09 - 59802.21 ASD
   8874.94         5.0e-02  Ca I  E1    3d2-3d.6f   3P-3Do  1 - 1  2.604e+04     3 48537.62 - 59802.21 ASD
   8895.39         5.0e-02  Ca I  E1    3d2-3d.6f   3P-3Do  2 - 1  1.724e+03     3 48563.52 - 59802.21 ASD
   #+end_example
****** DONE 7092.29
CLOSED: [2023-05-02 Tue 08:54]
- Supposedly [[file:../data/n346-lines/emili/zone-0-emi.out::7092.51][Ni II  7092.46]], or C I]  7092.51
- Could also be 7092.077  Fe I, 7092.080  Fe I, 7093.106  Fe I, 7093.230  C  I 
******* C I]  7092.51 candidate ID for 7092.29
- Weak transition from a high-n state
- Unlikely to be right
- Mean wavelength of the two lines is 7092.515
#+begin_example
-LAB-WAVL-ANG-AIR-|-DLAM--|-SPC-|TT|---------CONFIGURATION---------|-TERM--|J_i-J_k|--A_ki---|-TPF-|LEVEL-ENERGY--CM^-1|-REF---|
   7092.19         4.5e-02  C I] E1          2s.2p3-2s2.2p.(2Po).9p 3Po-1D   1 - 2                  75253.97 - 89350.10 ASD
   7092.84         4.5e-02  C I] E1          2s.2p3-2s2.2p.(2Po).9p 3Po-1D   2 - 2                  75255.27 - 89350.10 ASD
#+end_example
- Other transitions down from the same upper level
  - Our line is semi-forbidden. No measured A-value but it must be small
  - There are some permitted lines down from the same upper state: 8566.42, 9080.31, 9239.20
  - These ought to be far stronger than 7092
  - None of them are observed
#+begin_example
-LAB-WAVL-ANG-AIR-|-DLAM--|-SPC-|TT|---------CONFIGURATION---------|-TERM--|J_i-J_k|--A_ki---|-TPF-|LEVEL-ENERGY--CM^-1|-REF---|
   7092.19         4.5e-02  C I] E1          2s.2p3-2s2.2p.(2Po).9p 3Po-1D   1 - 2                  75253.97 - 89350.10 ASD
   7092.84         4.5e-02  C I] E1          2s.2p3-2s2.2p.(2Po).9p 3Po-1D   2 - 2                  75255.27 - 89350.10 ASD
   8566.42         6.5e-02  C I  E1 2s2.2p.(2Po).3d-2s2.2p.(2Po).9p 1Do-1D   2 - 2  1.354e+04     3 77679.82 - 89350.10 ASD
   8899.61         7.1e-02  C I] E1 2s2.2p.(2Po).4s-2s2.2p.(2Po).9p 3Po-1D   1 - 2                  78116.74 - 89350.10 ASD
   8924.52         7.1e-02  C I] E1 2s2.2p.(2Po).4s-2s2.2p.(2Po).9p 3Po-1D   2 - 2                  78148.09 - 89350.10 ASD
   8965.32         7.2e-02  C I] E1 2s2.2p.(2Po).3d-2s2.2p.(2Po).9p 3Fo-1D   2 - 2                  78199.07 - 89350.10 ASD
   8978.56         7.2e-02  C I] E1 2s2.2p.(2Po).3d-2s2.2p.(2Po).9p 3Fo-1D   3 - 2                  78215.51 - 89350.10 ASD
   9041.88         7.3e-02  C I] E1 2s2.2p.(2Po).3d-2s2.2p.(2Po).9p 3Do-1D   1 - 2                  78293.49 - 89350.10 ASD
   9053.46         7.3e-02  C I] E1 2s2.2p.(2Po).3d-2s2.2p.(2Po).9p 3Do-1D   2 - 2                  78307.63 - 89350.10 ASD
   9062.18         7.3e-02  C I] E1 2s2.2p.(2Po).3d-2s2.2p.(2Po).9p 3Do-1D   3 - 2                  78318.25 - 89350.10 ASD
   9080.31         7.4e-02  C I  E1 2s2.2p.(2Po).4s-2s2.2p.(2Po).9p 1Po-1D   1 - 2  3.192e+04     3 78340.28 - 89350.10 ASD
   9239.20         7.6e-02  C I  E1 2s2.2p.(2Po).3d-2s2.2p.(2Po).9p 1Fo-1D   3 - 2  6.647e+04     3 78529.62 - 89350.10 ASD
#+end_example
******* DONE Fe I 7092.077+  candidate ID for 7092.29
CLOSED: [2023-05-02 Tue 08:40]
- Two unrelated lines with very close wavelengths
- y5Go-5G
  - 14 lines 7092.0771 \to 7443.9984
  - ✔❌❌❌❓❓❓❓❓❌❓❓❓
  - Only the first is seen. Half are definite non-detections. The others are superimposed on [O II] lines, sky lines, and then N I lines
  - Conclusion: certainly not  
- v5Do-5F
  - 12 lines 6968.5746 \to 7422.9602
  - ❌❌✔❌❓❌❓❌❓❌❓❌
  - Certainly no additional multiplet IDs, apart from 7165.1130, which might have something there, but about 10 times weaker than the DRLs that we have included so far

#+begin_example
-LAB-WAVL-ANG-AIR-|-DLAM--|-SPC-|TT|--------------CONFIGURATION--------------|--TERM---|J_i-J_k|--A_ki---|-TPF-|LEVEL-ENERGY--CM^-1|-REF---|
   7092.0771       1.1e-03  Fe I E1 3d6.(3H).4s.4p.(3Po)-3d6.4s.(6D).5d       y5Go-5G    3 - 2  6.256e+03    30 43137.48 - 57233.84 061
   7124.2839       1.4e-03  Fe I E1 3d6.(3H).4s.4p.(3Po)-3d6.4s.(6D).5d       y5Go-5G    4 - 3  3.809e+03    30 43022.98 - 57055.61 061
   7128.7610       1.4e-03  Fe I E1 3d6.(3H).4s.4p.(3Po)-3d6.4s.(6D).5d       y5Go-5G    2 - 2  1.246e+03    30 43210.02 - 57233.84 061
   7182.8945       1.2e-03  Fe I E1 3d6.(3H).4s.4p.(3Po)-3d6.4s.(6D).5d       y5Go-5G    3 - 3  1.096e+03    30 43137.48 - 57055.61 061
   7220.5264       1.5e-03  Fe I E1 3d6.(3H).4s.4p.(3Po)-3d6.4s.(6D).5d       y5Go-5G    2 - 3  2.174e+02    30 43210.02 - 57055.61 061
   7262.1249       1.2e-03  Fe I E1 3d6.(3H).4s.4p.(3Po)-3d6.4s.(6D).5d       y5Go-5G    6 - 5  9.297e+02    30 42784.35 - 56550.63 061
   7264.7920       1.2e-03  Fe I E1 3d6.(3H).4s.4p.(3Po)-3d6.4s.(6D).5d       y5Go-5G    5 - 4  7.144e+03    30 42911.91 - 56673.14 061
   7323.9042       1.5e-03  Fe I E1 3d6.(3H).4s.4p.(3Po)-3d6.4s.(6D).5d       y5Go-5G    4 - 4  4.654e+03    30 43022.98 - 56673.14 061
   7330.0490       7.6e-04  Fe I E1 3d6.(3H).4s.4p.(3Po)-3d6.4s.(6D).5d       y5Go-5G    5 - 5  4.704e+03    30 42911.91 - 56550.63 061
   7373.9560       1.5e-03  Fe I E1 3d6.(3H).4s.4p.(3Po)-3d6.4s.(6D).5d       y5Go-5G    6 - 6  3.273e+03    30 42784.35 - 56341.86 061
   7385.8596       1.2e-03  Fe I E1 3d6.(3H).4s.4p.(3Po)-3d6.4s.(6D).5d       y5Go-5G    3 - 4  4.698e+02    30 43137.48 - 56673.14 061
   7390.2324       1.2e-03  Fe I E1 3d6.(3H).4s.4p.(3Po)-3d6.4s.(6D).5d       y5Go-5G    4 - 5  3.740e+02    30 43022.98 - 56550.63 061
   7443.9984       1.2e-03  Fe I E1 3d6.(3H).4s.4p.(3Po)-3d6.4s.(6D).5d       y5Go-5G    5 - 6  7.006e+01    30 42911.91 - 56341.86 061

gk*Aki weighted average wavelength:    7268.091       
#+end_example

- Other transitions from the same upper level and with A > 6000 /s
  - Note that some of these have A-values that are more than 100 times larger than our target line
  - So this is ruled out by branching ratio
#+begin_example
-LAB-WAVL-ANG-AIR-|-DLAM--|-SPC--|TT|--------------CONFIGURATION--------------|--TERM---|J_i-J_k|--A_ki---|-TPF-|LEVEL-ENERGY--CM^-1|-REF---|
   4623.5779       4.8e-04  Fe I  E1          3d7.(4F).4p-3d6.4s.(6D).5d       z5Go-5G    3 - 2  6.861e+05    30 35611.62 - 57233.84 061
   4676.5198       4.9e-04  Fe I  E1          3d7.(4F).4p-3d6.4s.(6D).5d       z5Go-5G    2 - 2  2.951e+04    30 35856.40 - 57233.84 061
   4725.8115       5.0e-04  Fe I] E1          3d7.(4F).4p-3d6.4s.(6D).5d       z3Go-5G    3 - 2  1.487e+04    30 36079.37 - 57233.84 061
   4884.5796       5.3e-04  Fe I] E1 3d6.(5D).4s.4p.(1Po)-3d6.4s.(6D).5d       y5Po-5G    3 - 2  7.097e+03    30 36766.96 - 57233.84 061
   4979.6143       5.5e-04  Fe I] E1 3d6.(5D).4s.4p.(1Po)-3d6.4s.(6D).5d       y5Po-5G    2 - 2  4.726e+04    30 37157.56 - 57233.84 061
   5042.9114       5.7e-04  Fe I] E1 3d6.(5D).4s.4p.(1Po)-3d6.4s.(6D).5d       y5Po-5G    1 - 2  1.767e+04    30 37409.55 - 57233.84 061
   5071.4629       5.8e-04  Fe I] E1          3d7.(4F).4p-3d6.4s.(6D).5d       y3Fo-5G    2 - 2  1.032e+04    30 37521.16 - 57233.84 061
   5481.5024       6.7e-04  Fe I] E1          3d7.(4F).4p-3d6.4s.(6D).5d       y3Do-5G    1 - 2  1.708e+04    30 38995.73 - 57233.84 061
   5879.8563       7.7e-04  Fe I] E1 3d6.(5D).4s.4p.(1Po)-3d6.4s.(6D).5d       x5Do-5G    2 - 2  1.346e+05    30 40231.33 - 57233.84 061
   5940.3635       7.9e-04  Fe I] E1 3d6.(5D).4s.4p.(1Po)-3d6.4s.(6D).5d       x5Do-5G    1 - 2  1.232e+05    30 40404.51 - 57233.84 061
   6165.1223       8.5e-04  Fe I  E1 3d6.(5D).4s.4p.(1Po)-3d6.4s.(6D).5d       x5Fo-5G    2 - 2  1.305e+05    30 41018.05 - 57233.84 061
   6208.2116       8.6e-04  Fe I  E1 3d6.(5D).4s.4p.(1Po)-3d6.4s.(6D).5d       x5Fo-5G    1 - 2  2.494e+06    30 41130.60 - 57233.84 061
   7092.0771       1.1e-03  Fe I  E1 3d6.(3H).4s.4p.(3Po)-3d6.4s.(6D).5d       y5Go-5G    3 - 2  6.256e+03    30 43137.48 - 57233.84 061
   7776.6318       1.7e-03  Fe I  E1 3d6.(3F).4s.4p.(3Po)-3d6.4s.(6D).5d       w5Fo-5G    1 - 2  1.376e+04    30 44378.34 - 57233.84 061
   7796.5352       1.4e-03  Fe I] E1 3d6.(3P).4s.4p.(3Po)-3d6.4s.(6D).5d       w5Do-5G    1 - 2  2.139e+04    30 44411.16 - 57233.84 061
#+end_example


#+begin_example
  -LAB-WAVL-ANG-AIR-|-DLAM--|-SPC-|TT|--------------CONFIGURATION--------------|--TERM---|J_i-J_k|--A_ki---|-TPF-|LEVEL-ENERGY--CM^-1|-REF---|
   6968.5746       2.0e-03  Fe I E1 3d6.(3F).4s.4p.(3Po)-3d6.4s.(4D).4d       v5Do-5F    3 - 2  8.209e+04    30 44166.20 - 58512.38 061
   7085.4422       1.6e-03  Fe I E1 3d6.(3F).4s.4p.(3Po)-3d6.4s.(4D).4d       v5Do-5F    4 - 3  1.195e+04    30 44022.52 - 58132.08 061
   7092.0802       1.6e-03  Fe I E1 3d6.(3F).4s.4p.(3Po)-3d6.4s.(4D).4d       v5Do-5F    4 - 4  5.316e+04    30 44022.52 - 58118.87 061
   7158.3377       1.6e-03  Fe I E1 3d6.(3F).4s.4p.(3Po)-3d6.4s.(4D).4d       v5Do-5F    3 - 3  5.799e+03    30 44166.20 - 58132.08 061
   7165.1130       1.6e-03  Fe I E1 3d6.(3F).4s.4p.(3Po)-3d6.4s.(4D).4d       v5Do-5F    3 - 4  1.401e+04    30 44166.20 - 58118.87 061
   7219.1077       2.1e-03  Fe I E1 3d6.(3F).4s.4p.(3Po)-3d6.4s.(4D).4d       v5Do-5F    2 - 2  4.017e+02    30 44664.07 - 58512.38 061
   7269.8567       2.2e-03  Fe I E1 3d6.(3F).4s.4p.(3Po)-3d6.4s.(4D).4d       v5Do-5F    1 - 2  2.876e+04    30 44760.74 - 58512.38 061
   7297.6068       2.7e-03  Fe I E1 3d6.(3F).4s.4p.(3Po)-3d6.4s.(4D).4d       v5Do-5F    2 - 1  1.377e+03    30 44664.07 - 58363.42 061
   7330.2044       1.7e-03  Fe I E1 3d6.(3F).4s.4p.(3Po)-3d6.4s.(4D).4d       v5Do-5F    4 - 5  8.301e+03    30 44022.52 - 57660.95 061
   7349.4694       2.8e-03  Fe I E1 3d6.(3F).4s.4p.(3Po)-3d6.4s.(4D).4d       v5Do-5F    1 - 1  2.341e+04    30 44760.74 - 58363.42 061
   7385.3870       2.9e-03  Fe I E1 3d6.(3F).4s.4p.(3Po)-3d6.4s.(4D).4d       v5Do-5F    0 - 1  1.968e+04    30 44826.90 - 58363.42 061
   7422.9602       1.7e-03  Fe I E1 3d6.(3F).4s.4p.(3Po)-3d6.4s.(4D).4d       v5Do-5F    2 - 3  3.578e+04    30 44664.07 - 58132.08 061

gk*Aki weighted average wavelength:    7164.410
#+end_example
****** DONE 8150.67
CLOSED: [2023-05-01 Mon 17:47]
- Supposedly [[file:../data/n346-lines/emili/zone-0-emi.out::8150.82][Ar II  8150.65]], Ne II  8150.82
- Could also be 8150.462$ Fe I, 8150.641  Fe I, 8150.682  N  I, 8151.606  Fe II]
- New AtLL v3 also has 8151.3424 [Fe I], which is a forbidden line that connects to ground state
******* [Fe I] 8151.3424 candidate ID for 8150.67
- This is a low-lying upper level, which counts in its favor
- But many other lines of multiplet should be seen:
  - Summary:
    - YES 2/12
    - MAYBE 3/12
    - PROBABLY NOT 3/12
    - NO 4/12
  - ❓✔ 7708.8389 closest match is 7706.79, but that is badly affected by telluric absorption, so counts as MAYBE
  - ✔✔ 7959.0029 closest match is 7959.35, so that is a YES albeit a blend with OH sky emission line
  - ❌❌ 7964.2738 definitely nothing close, NO
  - ✔✔ 8151.3424 is our line, YES
  - ❓❌ 8231.5783 overlaps with O I 8230, put PROBABLY NOT since not strong in Zone 0
  - ❓❌ 8275.5825 coincides with OH sky line, no visible excess, so PROBABLY NOT
  - ❓✔ 8337.6589 closest match is 8334, but that is blended with Paschen 8834, so MAYBE
  - ❓✔ 8347.5733 too close to Paschen 8346 and also coincides with OH sky, so MAYBE
  - ❌❌ 8431.5723 nothing there and relatively clean, so NO
  - ❌❌ 8564.5712 nothing there and relatively clean, so NO (closest is DRL 8560.3)
  - ❓❌ 8647.9154 coincides with sky O_2 but we see nothing, so PROBABLY NOT
  - ❌❌ 8868.9231 nothing there and very clean, so NO
- This is consistent with expectations from chance
  - The spectral density of ORLs is about 1 line per 20 Angstrom
  - So, if we have a tolerance of +/- 1 Angstrom, we expect 1/10 of the lines to be within tolerance
  - And we should not count the initial line, observing 1/11 is not impressive
#+begin_example
Atomic Line List version: 3.00b4   Constructed: 2021-07-21 14:47 GMT
Wavelength range: 0 - inf   Unit: Angstrom   Type: Air
Radial velocity: 0 km/s
Element/Spectrum: Fe I

-LAB-WAVL-ANG-AIR-|-DLAM--|-SPC--|TT|-----CONFIGURATION-----|-TERM--|J_i-J_k|--A_ki---|-TPF-|--LVL-EN--CM-1---|-REF---|
   7708.8389       8.4e-04 [Fe I] E2     3d6.4s2-3d7.(4F).4s a5D-a3F  4 - 2                    0.00 - 12968.55 061
   7959.0029       9.0e-04 [Fe I] E2     3d6.4s2-3d7.(4F).4s a5D-a3F  4 - 3                    0.00 - 12560.93 061
   7964.2738       9.0e-04 [Fe I] E2     3d6.4s2-3d7.(4F).4s a5D-a3F  3 - 2                  415.93 - 12968.55 061
   8151.3424       9.4e-04 [Fe I] E2     3d6.4s2-3d7.(4F).4s a5D-a3F  2 - 2                  704.01 - 12968.55 061
   8231.5783       9.6e-04 [Fe I] E2     3d6.4s2-3d7.(4F).4s a5D-a3F  3 - 3                  415.93 - 12560.93 061
   8275.5825       9.7e-04 [Fe I] E2     3d6.4s2-3d7.(4F).4s a5D-a3F  1 - 2                  888.13 - 12968.55 061
   8337.6589       9.8e-04 [Fe I] E2     3d6.4s2-3d7.(4F).4s a5D-a3F  0 - 2                  978.07 - 12968.55 061
   8347.5733       9.9e-04 [Fe I] E2     3d6.4s2-3d7.(4F).4s a5D-a3F  4 - 4                    0.00 - 11976.24 061
   8431.5723       1.0e-03 [Fe I] E2     3d6.4s2-3d7.(4F).4s a5D-a3F  2 - 3                  704.01 - 12560.93 061
   8564.5712       1.0e-03 [Fe I] E2     3d6.4s2-3d7.(4F).4s a5D-a3F  1 - 3                  888.13 - 12560.93 061
   8647.9154       1.1e-03 [Fe I] E2     3d6.4s2-3d7.(4F).4s a5D-a3F  3 - 4                  415.93 - 11976.24 061
   8868.9231       1.1e-03 [Fe I] E2     3d6.4s2-3d7.(4F).4s a5D-a3F  2 - 4                  704.01 - 11976.24 061
 #+end_example
******* Fe I 8150.462
- Highly excited levels - seems very unlikely
- Other two multiplet members at 7993.340, 8059.839. Neither detected
- A value is 288 and there are *many* other lines from same upper state, but with much higher A values
- For instance, with A > 1e4: 7253.060, 8377.415, 8477.723 and these are just a sample
- First coincides with O I line, second with OH, third is to red of DRL 8475.2, where we see nothing
- But they should all be 100 times stronger than 8150
******* All the Fe I lines within 1 A of 8150.67
#+begin_example
  Atomic Line List version: 3.00b4   Constructed: 2021-07-21 14:47 GMT

  Request: 1

  Wavelength range: 8150.67 +/- 1   Unit: Angstrom   Type: Air
  Radial velocity: 0 km/s
  Wavelength accuracy upper limit: 5%
  Element/Spectrum: Fe I
  Minimum line strength: no restrictions
  Include lines without atomic data: true
  Minimum abundance: no minimum
  Lower level energy range: no restrictions   Unit: cm^-1
  Upper level energy range: no restrictions
  Maximum for principal quantum number n: no restrictions
  Transition types included: all
  Transitions from auto-ionizing levels: included

  -LAB-WAVL-ANG-AIR-|-DLAM--|-SPC--|TT|--------------CONFIGURATION--------------|-------TERM--------|J_i-J_k|--A_ki---|-TPF-|LEVEL-ENERGY--CM^-1|-REF---|
     8149.6904       9.4e-04  Fe I  E1          3d7.(2F).4s-3d6.(3F).4s.4p.(3Po)       d3F-v3Do       3 - 2  2.750e+05    30 36975.59 - 49242.62 061
     8150.0492       1.5e-03  Fe I] E1       3d6.4s.(6D).5s-3d6.(1G).4s.4p.(3Po)       e7D-s3Go       4 - 5  2.856e-01    30 43163.32 - 55429.82 061
     8150.087        4.7e-03  Fe I] E1 3d6.(3G).4s.4p.(3Po)-3d6.4s.(6D<3/2>).5g       v5Fo-3/2[7/2]   4 - 4  2.855e-02    30 47929.99 - 60196.43 061
     8150.280        4.7e-03  Fe I] E1          3d7.(4P).4p-3d6.4s.(4D).4d            u5Do-3S         2 - 1  9.133e+05    30 46888.51 - 59154.66 061
     8150.372        6.7e-03  Fe I  E1          3d7.(2G).4p-3d6.4s.(6D<5/2>).6d       z1Go-5/2[9/2]   4 - 5  1.204e+02    30 47452.71 - 59718.72 061
     8150.462        6.7e-03  Fe I  E1 3d6.(3G).4s.4p.(3Po)-3d6.4s.(6D<3/2>).6d       w5Go-3/2[7/2]   2 - 3  2.882e+02    30 47831.15 - 60097.02 061
     8150.6406       9.4e-04  Fe I  E1 3d6.(3P).4s.4p.(3Po)-3d7.(4F).4d               z5So-f5P        2 - 3  1.019e+03    30 40894.99 - 53160.59 061
     8150.9350       1.5e-03  Fe I] E1 3d6.(3P).4s.4p.(3Po)-3d7.(4F).4d               x5Po-f3F        2 - 3  1.835e+03    30 42859.78 - 55124.93 061
     8151.0074       2.7e-03  Fe I] E1          3d7.(2G).4p-3d6.4s.(6D<7/2>).5g       z1Go-7/2[5/2]   4 - 3  3.727e-02    30 47452.71 - 59717.76 061
     8151.0147       9.4e-04  Fe I] E1              3d6.4s2-3d6.(3P).4s.4p.(3Po)       b1D-y3Po       2 - 1  3.378e+03    30 34636.79 - 46901.83 061
     8151.2992       2.7e-03  Fe I] E1          3d7.(2G).4p-3d6.4s.(6D<7/2>).5g       z1Go-7/2[7/2]   4 - 4  1.605e-01    30 47452.71 - 59717.32 061
     8151.3045       2.7e-03  Fe I] E1          3d7.(2G).4p-3d6.4s.(6D<7/2>).5g       z1Go-7/2[7/2]   4 - 3  4.257e-03    30 47452.71 - 59717.32 061
     8151.3424       9.4e-04 [Fe I] E2              3d6.4s2-3d7.(4F).4s                a5D-a3F        2 - 2                    704.01 - 12968.55 061
     8151.5524       2.7e-03  Fe I] E1          3d7.(2G).4p-3d6.4s.(6D<7/2>).5g       z1Go-7/2[9/2]   4 - 4  1.572e-01    30 47452.71 - 59716.94 061
     8151.5577       2.7e-03  Fe I] E1          3d7.(2G).4p-3d6.4s.(6D<7/2>).5g       z1Go-7/2[9/2]   4 - 5  3.895e-01    30 47452.71 - 59716.94 061
     8151.6534       2.1e-03  Fe I] E1          3d7.(2G).4p-3d6.4s.(6D<7/2>).5g       z1Go-7/2[11/2]  4 - 5  5.700e-01    30 47452.71 - 59716.79 061
#+end_example
****** DONE 8550.06
CLOSED: [2023-05-02 Tue 09:10]
- Supposedly  [[file:../data/n346-lines/emili/zone-0-emi.out::8550.3][Si I  8550.34]]
- Could also be 8550.441  Cl I, 8549.510  Cr I
******* Si I  8550.34 candidate ID for 8550.06
- Doublet from high-n level
- Other component is not seen. It is to side of Paschen line, but would be visible if it were there
#+begin_example
-LAB-WAVL-ANG-AIR-|-DLAM--|-SPC-|TT|--------------CONFIGURATION--------------|--------TERM---------|J_i-J_k|--A_ki---|-TPF-|LEVEL-ENERGY--CM^-1|-REF---|
   8550.341        4.6e-03  Si I E1            3s2.3p.4p-3s2.3p.(2Po<3/2>).7s         1D-(3/2,1/2)o  2 - 1                  50189.39 - 61881.62 ASD
   8593.014        4.7e-03  Si I E1            3s2.3p.4p-3s2.3p.(2Po<3/2>).7s         1D-(3/2,1/2)o  2 - 2                  50189.39 - 61823.56 ASD
#+end_example

- Other lines with same upper state
  - There actually is a DRL 6848 that matches 6848.5693
  - Nothing at 7212
  - 7255 coincides with O I
  - 7778 is a tiny something
  - 7797 has nothing
  - 7876 has sky OH
  - 8009 has DRL 8008.7
  - 8550 is our line
- So we have 2 (and maybe 3) extra matches out of 7, and 2 definite misses
#+begin_example
-LAB-WAVL-ANG-AIR-|-DLAM--|-SPC-|TT|--------------CONFIGURATION--------------|--------TERM---------|J_i-J_k|--A_ki---|-TPF-|LEVEL-ENERGY--CM^-1|-REF---|
   2150.45052      2.9e-04  Si I E1              3s2.3p2-3s2.3p.(2Po<3/2>).7s         1S-(3/2,1/2)o  0 - 1                  15394.36 - 61881.62 ASD
   6848.5693       3.0e-03  Si I E1            3s2.3p.4p-3s2.3p.(2Po<3/2>).7s         1P-(3/2,1/2)o  1 - 1                  47284.06 - 61881.62 ASD
   7212.215        3.3e-03  Si I E1            3s2.3p.4p-3s2.3p.(2Po<3/2>).7s         3D-(3/2,1/2)o  1 - 1                  48020.07 - 61881.62 ASD
   7255.264        3.3e-03  Si I E1            3s2.3p.4p-3s2.3p.(2Po<3/2>).7s         3D-(3/2,1/2)o  2 - 1                  48102.32 - 61881.62 ASD
   7777.946        3.8e-03  Si I E1            3s2.3p.4p-3s2.3p.(2Po<3/2>).7s         3P-(3/2,1/2)o  0 - 1                  49028.29 - 61881.62 ASD
   7797.546        3.9e-03  Si I E1            3s2.3p.4p-3s2.3p.(2Po<3/2>).7s         3P-(3/2,1/2)o  1 - 1                  49060.60 - 61881.62 ASD
   7876.189        3.9e-03  Si I E1            3s2.3p.4p-3s2.3p.(2Po<3/2>).7s         3P-(3/2,1/2)o  2 - 1                  49188.62 - 61881.62 ASD
   8009.366        4.1e-03  Si I E1            3s2.3p.4p-3s2.3p.(2Po<3/2>).7s         3S-(3/2,1/2)o  1 - 1                  49399.67 - 61881.62 ASD
   8550.341        4.6e-03  Si I E1            3s2.3p.4p-3s2.3p.(2Po<3/2>).7s         1D-(3/2,1/2)o  2 - 1                  50189.39 - 61881.62 ASD

#+end_example
******* Cl I 8550.441 candidate ID for 8550.06
- Excited by FUV
- The other component at 9045.432 is close to a line that we initially identified as DRL ar 9046.03, but it is severely affected by blend with OH sky line and we eventually decided it was not real
#+begin_example
-LAB-WAVL-ANG-AIR-|-DLAM--|-SPC-|TT|---------CONFIGURATION---------|-TERM--|-J_i-J_k-|--A_ki---|-TPF-|LEVEL-ENERGY--CM^-1|-REF---|
   8550.441        6.5e-03  Cl I E1 3s2.3p4.(3P).4s-3s2.3p4.(3P).4p  2P-2So 3/2 - 1/2 2.776e+07    21 74225.85 - 85917.94 ASD
   9045.432        7.3e-03  Cl I E1 3s2.3p4.(3P).4s-3s2.3p4.(3P).4p  2P-2So 1/2 - 1/2 2.639e+03    21 74865.67 - 85917.94 ASD
#+end_example
- It is by far the dominant line down from its upper level
- And Cl I does not have many lines at all
#+begin_example
  -LAB-WAVL-ANG-AIR-|-DLAM--|-SPC--|TT|---------CONFIGURATION---------|-TERM--|-J_i-J_k-|--A_ki---|-TPF-|LEVEL-ENERGY--CM^-1|-REF---|
     7444.316        4.9e-03  Cl I] E1 3s2.3p4.(3P).4s-3s2.3p4.(3P).4p  4P-2So 3/2 - 1/2 3.315e+03    21 72488.57 - 85917.94 ASD
     7636.793        5.2e-03  Cl I] E1 3s2.3p4.(3P).4s-3s2.3p4.(3P).4p  4P-2So 1/2 - 1/2 3.758e+04    21 72827.04 - 85917.94 ASD
     8550.441        6.5e-03  Cl I  E1 3s2.3p4.(3P).4s-3s2.3p4.(3P).4p  2P-2So 3/2 - 1/2 2.776e+07    21 74225.85 - 85917.94 ASD
     9045.432        7.3e-03  Cl I  E1 3s2.3p4.(3P).4s-3s2.3p4.(3P).4p  2P-2So 1/2 - 1/2 2.639e+03    21 74865.67 - 85917.94 ASD
    55662.10         2.8e-01  Cl I] E1 3s2.3p4.(1D).4s-3s2.3p4.(3P).4p  2D-2So 3/2 - 1/2 1.160e+02    21 84121.87 - 85917.94 ASD
#+end_example
****** DONE 8789.18
CLOSED: [2023-05-02 Tue 10:41]
- Supposedly [[file:../data/n346-lines/emili/zone-0-emi.out::8788.8][O II  8788.85]]
- Could also be 8789.305  Fe II], 8789.660  Fe I, 8790.389$ Si I, 8790.521  Fe I
******* Fe I 8789.660 candidate ID for 8789.18
- Middle member of a 12 member multiplet, in which we detect no other member
- ❌❓❌❓❓❌✔❓❌❌❓❌ where most of the ❓ are due to sky lines
- The 8891.5365 component would fall exactly in between observed ORLs at 8888.49 and 8893.68, but there is nothing there
#+begin_example
-LAB-WAVL-ANG-AIR-|-SPC-|TT|--TERM---|J_i-J_k|LEVEL-ENERGY--CM^-1|-REF---|
   8495.7248        Fe I E1 u5Do-5F    3 - 2  46744.99 - 58512.38 061
   8600.625         Fe I E1 u5Do-5F    2 - 2  46888.51 - 58512.38 061
   8712.276         Fe I E1 u5Do-5F    2 - 1  46888.51 - 58363.42 061
   8760.8851        Fe I E1 u5Do-5F    4 - 3  46720.84 - 58132.08 061
   8771.0357        Fe I E1 u5Do-5F    4 - 4  46720.84 - 58118.87 061
   8779.4662        Fe I E1 u5Do-5F    3 - 3  46744.99 - 58132.08 061
   8789.6600        Fe I E1 u5Do-5F    3 - 4  46744.99 - 58118.87 061
   8819.692         Fe I E1 u5Do-5F    1 - 2  47177.23 - 58512.38 061
   8891.5365        Fe I E1 u5Do-5F    2 - 3  46888.51 - 58132.08 061
   8932.587         Fe I E1 u5Do-5F    0 - 1  47171.53 - 58363.42 061
   8937.141         Fe I E1 u5Do-5F    1 - 1  47177.23 - 58363.42 061
   9138.1679        Fe I E1 u5Do-5F    4 - 5  46720.84 - 57660.95 061
#+end_example
- Other lines from the same upper level
  - There are much stronger lines in the blue (4682.1120 is 500x stronger)
  - And some in red too. 8343.7143 should be 100x stronger. But not observed (although coincides with OH and Paschen)
  - 
#+begin_example
-LAB-WAVL-ANG-AIR-|-DLAM--|-SPC--|TT|--------------CONFIGURATION--------------|--TERM---|J_i-J_k|--A_ki---|-TPF-|LEVEL-ENERGY--CM^-1|-REF---|
   4664.4626       6.9e-04  Fe I] E1          3d7.(4F).4p-3d6.4s.(4D).4d       y3Fo-5F    4 - 4  7.864e+03    30 36686.17 - 58118.87 061
   4682.1120       6.9e-04  Fe I] E1 3d6.(5D).4s.4p.(1Po)-3d6.4s.(4D).4d       y5Po-5F    3 - 4  1.771e+06    30 36766.96 - 58118.87 061
   5012.7621       8.0e-04  Fe I] E1          3d7.(4F).4p-3d6.4s.(4D).4d       y3Do-5F    3 - 4  5.100e+04    30 38175.35 - 58118.87 061
   5405.9281       9.2e-04  Fe I  E1 3d6.(5D).4s.4p.(1Po)-3d6.4s.(4D).4d       x5Do-5F    4 - 4  2.535e+05    30 39625.80 - 58118.87 061
   5508.4088       9.6e-04  Fe I  E1 3d6.(5D).4s.4p.(1Po)-3d6.4s.(4D).4d       x5Do-5F    3 - 4  2.661e+05    30 39969.85 - 58118.87 061
   5581.3674       9.9e-04  Fe I] E1      3d5.4s2.(6S).4p-3d6.4s.(4D).4d       y7Po-5F    3 - 4  3.329e+03    30 40207.09 - 58118.87 061
   5597.0612       9.9e-04  Fe I  E1 3d6.(5D).4s.4p.(1Po)-3d6.4s.(4D).4d       x5Fo-5F    5 - 4  1.577e+05    30 40257.31 - 58118.87 061
   5649.1278       1.0e-03  Fe I] E1      3d5.4s2.(6S).4p-3d6.4s.(4D).4d       y7Po-5F    4 - 4  1.574e+04    30 40421.93 - 58118.87 061
   5704.7331       1.0e-03  Fe I  E1 3d6.(5D).4s.4p.(1Po)-3d6.4s.(4D).4d       x5Fo-5F    4 - 4  8.513e+05    30 40594.43 - 58118.87 061
   5786.5311       1.1e-03  Fe I  E1 3d6.(5D).4s.4p.(1Po)-3d6.4s.(4D).4d       x5Fo-5F    3 - 4  2.633e+05    30 40842.15 - 58118.87 061
   6574.1217       1.4e-03  Fe I  E1 3d6.(3H).4s.4p.(3Po)-3d6.4s.(4D).4d       y5Go-5F    5 - 4  2.382e+03    30 42911.91 - 58118.87 061
   6838.3535       1.5e-03  Fe I  E1 3d6.(3P).4s.4p.(3Po)-3d6.4s.(4D).4d       w5Do-5F    4 - 4  3.089e+03    30 43499.50 - 58118.87 061
   7042.1937       1.6e-03  Fe I  E1 3d6.(3P).4s.4p.(3Po)-3d6.4s.(4D).4d       w5Do-5F    3 - 4  5.407e+03    30 43922.67 - 58118.87 061
   7092.0802       1.6e-03  Fe I  E1 3d6.(3F).4s.4p.(3Po)-3d6.4s.(4D).4d       v5Do-5F    4 - 4  5.316e+04    30 44022.52 - 58118.87 061
   7165.1130       1.6e-03  Fe I  E1 3d6.(3F).4s.4p.(3Po)-3d6.4s.(4D).4d       v5Do-5F    3 - 4  1.401e+04    30 44166.20 - 58118.87 061
   7295.2360       1.7e-03  Fe I  E1 3d6.(3F).4s.4p.(3Po)-3d6.4s.(4D).4d       w5Fo-5F    4 - 4  7.738e+03    30 44415.07 - 58118.87 061
   7368.5036       2.0e-03  Fe I  E1 3d6.(3F).4s.4p.(3Po)-3d6.4s.(4D).4d       w5Fo-5F    3 - 4  2.810e+04    30 44551.33 - 58118.87 061
   8067.0196       2.1e-03  Fe I  E1 3d6.(3F).4s.4p.(3Po)-3d6.4s.(4D).4d       x5Go-5F    5 - 4  2.220e+03    30 45726.13 - 58118.87 061
   8343.7143       2.2e-03  Fe I] E1          3d7.(4P).4p-3d6.4s.(4D).4d       w5Po-5F    3 - 4  3.362e+05    30 46137.09 - 58118.87 061
   8771.0357       2.4e-03  Fe I  E1          3d7.(4P).4p-3d6.4s.(4D).4d       u5Do-5F    4 - 4  9.003e+03    30 46720.84 - 58118.87 061
   8789.6600       2.4e-03  Fe I  E1          3d7.(4P).4p-3d6.4s.(4D).4d       u5Do-5F    3 - 4  2.780e+03    30 46744.99 - 58118.87 061
   9005.1688       2.6e-03  Fe I] E1          3d7.(4P).4p-3d6.4s.(4D).4d       w3Do-5F    3 - 4  2.896e+03    30 47017.18 - 58118.87 061
#+end_example
****** DONE 8850.65
CLOSED: [2023-05-02 Tue 10:54]
- Supposedly [[file:../data/n346-lines/emili/zone-0-emi.out::8850.8][[Mn III]  8850.89]], [Fe II]  8851.15
- Could also be 8851.153 [Fe II], 8851.822 [Fe II], 8852.420 [Co II]
- AtLL v3 also has Fe I 8850.1114, which is probably the best bet
******* Fe I 8850.1114 candidate ID for 8850.65
- Shortest of 6 members in multiplet ❌✔❓
- ✔❓❌❓||❓❓ The last two are outside MUSE observed range

#+begin_example
-LAB-WAVL-ANG-AIR-|-DLAM--|-SPC-|TT|------CONFIGURATION------|--TERM---|J_i-J_k|--A_ki---|-TPF-|LEVEL-ENERGY--CM^-1|-REF---|
   8850.1114       1.1e-03  Fe I E1 3d7.(a2D).4s-3d7.(4F).4p   a3D-y3Fo  3 - 2  4.630e+02    30 26224.97 - 37521.16 061
   8994.6288       1.1e-03  Fe I E1 3d7.(a2D).4s-3d7.(4F).4p   a3D-y3Fo  1 - 2  1.061e+04    30 26406.46 - 37521.16 061
   9140.1170       1.2e-03  Fe I E1 3d7.(a2D).4s-3d7.(4F).4p   a3D-y3Fo  3 - 3  7.741e+03    30 26224.97 - 37162.74 061
   9173.9620       1.2e-03  Fe I E1 3d7.(a2D).4s-3d7.(4F).4p   a3D-y3Fo  2 - 2  5.513e+03    30 26623.73 - 37521.16 061
   9485.9541       1.3e-03  Fe I E1 3d7.(a2D).4s-3d7.(4F).4p   a3D-y3Fo  2 - 3  1.175e+04    30 26623.73 - 37162.74 061
   9556.5051       1.3e-03  Fe I E1 3d7.(a2D).4s-3d7.(4F).4p   a3D-y3Fo  3 - 4  1.817e+04    30 26224.97 - 36686.17 061

#+end_example

- Should have *much* stronger lines from same upper level
  - 6065.4822, 6546.2382, 7583.7882, 8994.6288
  - Nothing there

#+begin_example
-LAB-WAVL-ANG-AIR-|-DLAM--|-SPC--|TT|------CONFIGURATION------|--TERM---|J_i-J_k|--A_ki---|-TPF-|LEVEL-ENERGY--CM^-1|-REF---|
   5222.3950       3.9e-04  Fe I] E1      3d6.4s2-3d7.(4F).4p   a3P-y3Fo  2 - 2  7.675e+03    30 18378.19 - 37521.16 061
   5563.6937       4.4e-04  Fe I] E1      3d6.4s2-3d7.(4F).4p   a3P-y3Fo  1 - 2  1.809e+04    30 19552.48 - 37521.16 061
   6005.5416       5.1e-04  Fe I  E1      3d6.4s2-3d7.(4F).4p   b3F-y3Fo  3 - 2  8.429e+03    30 20874.48 - 37521.16 061
   6065.4822       5.2e-04  Fe I  E1      3d6.4s2-3d7.(4F).4p   b3F-y3Fo  2 - 2  1.163e+06    30 21038.99 - 37521.16 061
   6546.2382       6.1e-04  Fe I  E1  3d7.(2G).4s-3d7.(4F).4p   a3G-y3Fo  3 - 2  9.100e+05   ASD 22249.43 - 37521.16 061
   6859.4796       6.7e-04  Fe I] E1  3d7.(4P).4s-3d7.(4F).4p   b3P-y3Fo  1 - 2  4.562e+02    30 22946.81 - 37521.16 061
   7583.7882       8.1e-04  Fe I  E1      3d6.4s2-3d7.(4F).4p   b3G-y3Fo  3 - 2  3.000e+05   ASD 24338.76 - 37521.16 061
   8850.1114       1.1e-03  Fe I  E1 3d7.(a2D).4s-3d7.(4F).4p   a3D-y3Fo  3 - 2  4.630e+02    30 26224.97 - 37521.16 061
   8994.6288       1.1e-03  Fe I  E1 3d7.(a2D).4s-3d7.(4F).4p   a3D-y3Fo  1 - 2  1.061e+04    30 26406.46 - 37521.16 061
   9173.9620       1.2e-03  Fe I  E1 3d7.(a2D).4s-3d7.(4F).4p   a3D-y3Fo  2 - 2  5.513e+03    30 26623.73 - 37521.16 061
#+end_example
****** DONE 9029.22
CLOSED: [2023-05-02 Tue 11:32]
- Supposedly [[file:../data/n346-lines/emili/zone-0-emi.out::9029.3][C II  9029.30]]
- Could also be 9029.825  Fe II], 9029.873  Fe II], 9028.922  N  I 

******* N I 9028.922 candidate ID for 9029.22
- Doublet transition 3d \to 3p
- Similar to some lines shown in Fig 8, but in the doublet spectrum rather than the quartets
- Other component would be in between DRL 9057.2 and He I 9063.29, but we see nothing there
- Should be pumped by same mechanism as for [N I] 5200, see [[id:63777288-9EC5-4E56-AC58-BFEB9E542B18][Other N I lines]]
- One thing it has going for it: it is the only line down from its level
#+begin_example
-LAB-WAVL-ANG-AIR-|-DLAM--|SPC-|TT|---------CONFIGURATION---------|-TERM--|-J_i-J_k-|--A_ki---|-TPF-|LEVEL-ENERGY--CM^-1-|-REF---|
   9028.922        7.3e-03  N I E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).3d 2So-2P  1/2 - 1/2 3.197e+07    15 93581.55 - 104654.03 ASD
   9060.475        7.3e-03  N I E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).3d 2So-2P  1/2 - 3/2 3.208e+07    15 93581.55 - 104615.47 ASD
#+end_example
****** DONE 9057.17
CLOSED: [2023-05-02 Tue 11:48]
- Supposedly [[file:../data/n346-lines/emili/zone-0-emi.out::9057.0][O I  9057.02]], Ne II  9057.61
- Could also be 9056.759$ Fe I, 9057.400  Cr I 
******* Fe I 9056.759 candidate ID for 9057.17
- Triplet from high-n level
- ✔❓✔ Which is not a bad score
- 8944.720 is very close to observed DRL 8946.0, which indeed has a blue wing
- 9036.735 is close to observed DRL 9034.7, although it is very weak
- So this is the only multiplet that is not ruled out observationally
  - But in part this is due to it being harder to falsify a triplet
#+begin_example
-LAB-WAVL-ANG-AIR-|-DLAM--|-SPC-|TT|--------------CONFIGURATION--------------|------TERM-------|J_i-J_k|--A_ki---|-TPF-|LEVEL-ENERGY--CM^-1|-REF---|
   8944.720        8.0e-03  Fe I E1 3d6.(3G).4s.4p.(3Po)-3d6.4s.(6D<7/2>).6d      y5Ho-7/2[5/2]  4 - 3  5.214e+01    30 48361.88 - 59538.59 061
   9036.735        8.3e-03  Fe I E1 3d6.(3G).4s.4p.(3Po)-3d6.4s.(6D<7/2>).6d      y5Ho-7/2[5/2]  3 - 3  5.656e+01    30 48475.68 - 59538.59 061
   9056.759        8.4e-03  Fe I E1 3d6.(3G).4s.4p.(3Po)-3d6.4s.(6D<7/2>).6d      y5Ho-7/2[5/2]  3 - 2  1.234e+02    30 48475.68 - 59514.13 061
#+end_example
******* O I  9057.02 candidate ID for 9057.17
- This can be ruled out straight away since both the upper and lower levels are autoionizing, so even if the line existed it would be very broad because of the short lifetime (femtoseconds) of the upper level

****** DONE 9297.36
CLOSED: [2023-05-02 Tue 22:17]
- Supposedly [[file:../data/n346-lines/emili/zone-0-emi.out::9297.2][Fe II  9297.27]], Fe II  9297.30, N II  9297.34, Fe I  9297.61, Ne I  9297.99
******* Ne I  9297.99 candidate ID for 9297.36
- Ne I  9297.99 can be ruled out since there is another component at 9373.3064 with the same upper state, and which has 1000 times higher A-value
- And also, the transitions are way above the H ionization limit
- Do not even include it
#+begin_example
-LAB-WAVL-ANG-AIR-|-DLAM--|-SPC-|TT|---------------CONFIGURATION---------------|-------TERM--------|J_i-J_k|--A_ki---|-TPF-|-LEVEL-ENERGY--CM^-1-|-REF---|
   9297.9890       7.7e-04  Ne I E1 2s2.2p5.(2Po<1/2>).3p-2s2.2p5.(2Po<3/2>).3d  1/2[3/2]-3/2[1/2]o  1 - 1  1.218e+03     6 150772.11 - 161524.17 023
   9310.5827       7.7e-04  Ne I E1 2s2.2p5.(2Po<1/2>).3p-2s2.2p5.(2Po<3/2>).3d  1/2[3/2]-3/2[1/2]o  1 - 0  2.376e+06     6 150772.11 - 161509.63 023
   9373.3064       7.8e-04  Ne I E1 2s2.2p5.(2Po<1/2>).3p-2s2.2p5.(2Po<3/2>).3d  1/2[3/2]-3/2[1/2]o  2 - 1  1.396e+06     6 150858.51 - 161524.17 023
#+end_example

******* Fe I 9297.61 candidate ID for 9297.36
- Fe I 9297.61 has two other detections from same multiplet according to EMILI:
  - 9062.239 -16.5 /But that is clearly He I 9063.32/
  - 9155.647 -10.8 (this is indeed a DRL), so put as ✔
  - Summary: 12 total, 6 are potentially observable
- Checking them all by hand
  - ❌❓✔ ❓❓✔ ❓✔✔  ❓✔❓
  - 8945.1893 is close to DRL 8945.95 ± 0.46, which has a blue wing, so put as ✔
  - 9147.9571 is a bit too far from DRL 9145.25 ± 0.47, so put as ❓
  - 9294.5342 would be blended with DRL 9297.4, so put as ❓
- One by one, check them again and write explicit comments
  - ❌ 8920.0129 In wing of OH sky line. Anything brighter than 5% of DRL 9297.36 is ruled out
  - ❓ 8929.0753 Ditto affected by OH lines, but some undulation here, so could be something at 10% level of DRL 9297.36
  - ✔ 8945.1893 Could contribute to blue wing of DRL 8945.95 (Although predicted to be 50 times stronger than 9297.61)
  - ❓ 8984.8870 Underneath OH 8988.4 (which has system frame wave of 8983.5). Could be something at 10% level
  - ❓ 9012.0754
  - ✔ 9019.7445 DRL 9019.36 ± 0.46 with I = 0.322
  - ❓ 9062.2394 Blend with He I 9063.32
  - ❓ 9147.9571 Should be 2 pixels to red of DRL 9145.25 and we see nothing there, BUT that is under a telluric absorption so it is hard to say
  - ✔ 9155.6472 DRL 9155.28 ± 0.78 with I = 0.092
  - ❓ 9294.5342 Blend with DRL 9297.4. We don't see anything there, but cannot exclude something at 10% level
  - ✔ 9297.6063 Bright DRL 9297.37 ± 0.27 with I = 0.250
  - ❓ 9513.6430 Outside the MUSE wavelength range
#+begin_example
-LAB-WAVL-ANG-AIR-|-DLAM--|-SPC-|TT|--------------CONFIGURATION--------------|--TERM---|J_i-J_k|--A_ki---|-TPF-|LEVEL-ENERGY--CM^-1|-REF---|
   8920.0129       1.1e-03  Fe I E1 3d6.(5D).4s.4p.(1Po)-3d6.4s.(4D).5s       x5Fo-g5D   3 - 2  6.468e+06    30 40842.15 - 52049.82 061
   8929.0753       1.1e-03  Fe I E1 3d6.(5D).4s.4p.(1Po)-3d6.4s.(4D).5s       x5Fo-g5D   2 - 1  6.494e+06    30 41018.05 - 52214.34 061
   8945.1893       1.1e-03  Fe I E1 3d6.(5D).4s.4p.(1Po)-3d6.4s.(4D).5s       x5Fo-g5D   4 - 3  7.308e+06    30 40594.43 - 51770.55 061
   8984.8870       1.1e-03  Fe I E1 3d6.(5D).4s.4p.(1Po)-3d6.4s.(4D).5s       x5Fo-g5D   1 - 0  9.992e+06    30 41130.60 - 52257.34 061
   9012.0754       1.1e-03  Fe I E1 3d6.(5D).4s.4p.(1Po)-3d6.4s.(4D).5s       x5Fo-g5D   5 - 4  8.455e+06    30 40257.31 - 51350.49 061
   9019.7445       1.2e-03  Fe I E1 3d6.(5D).4s.4p.(1Po)-3d6.4s.(4D).5s       x5Fo-g5D   1 - 1  2.841e+06    30 41130.60 - 52214.34 061
   9062.2394       1.2e-03  Fe I E1 3d6.(5D).4s.4p.(1Po)-3d6.4s.(4D).5s       x5Fo-g5D   2 - 2  2.370e+06    30 41018.05 - 52049.82 061
   9147.9571       1.2e-03  Fe I E1 3d6.(5D).4s.4p.(1Po)-3d6.4s.(4D).5s       x5Fo-g5D   3 - 3  1.741e+06    30 40842.15 - 51770.55 061
   9155.6472       1.2e-03  Fe I E1 3d6.(5D).4s.4p.(1Po)-3d6.4s.(4D).5s       x5Fo-g5D   1 - 2  2.195e+05    30 41130.60 - 52049.82 061
   9294.5342       1.2e-03  Fe I E1 3d6.(5D).4s.4p.(1Po)-3d6.4s.(4D).5s       x5Fo-g5D   4 - 4  9.861e+05    30 40594.43 - 51350.49 061
   9297.6063       1.2e-03  Fe I E1 3d6.(5D).4s.4p.(1Po)-3d6.4s.(4D).5s       x5Fo-g5D   2 - 3  1.432e+05    30 41018.05 - 51770.55 061
   9513.6430       1.3e-03  Fe I E1 3d6.(5D).4s.4p.(1Po)-3d6.4s.(4D).5s       x5Fo-g5D   3 - 4  9.248e+04    30 40842.15 - 51350.49 061

#+end_example
- Other lines from the same upper level with higher A values
  - So 6627 maybe has something, but very weak
  - And 6663 coincides with Raman O I absorption - definitely no emission there
  - And the blue ones are not there either

#+begin_example
  -LAB-WAVL-ANG-AIR-|-DLAM--|-SPC--|TT|--------------CONFIGURATION--------------|--TERM---|J_i-J_k|--A_ki---|-TPF-|LEVEL-ENERGY--CM^-1|-REF---|
     4885.4304       3.4e-04  Fe I] E1 3d6.(5D).4s.4p.(3Po)-3d6.4s.(4D).5s       z3Fo-g5D   4 - 3  3.655e+06    30 31307.24 - 51770.55 061
     4889.1021       3.4e-04  Fe I] E1 3d6.(5D).4s.4p.(3Po)-3d6.4s.(4D).5s       z3Do-g5D   3 - 3  2.303e+06    30 31322.61 - 51770.55 061
     4977.6482       3.5e-04  Fe I] E1 3d6.(5D).4s.4p.(3Po)-3d6.4s.(4D).5s       z3Do-g5D   2 - 3  2.990e+05    30 31686.35 - 51770.55 061
     5353.3739       4.1e-04  Fe I  E1          3d7.(4F).4p-3d6.4s.(4D).5s       y5Do-g5D   4 - 3  5.018e+06    30 33095.94 - 51770.55 061
     5473.9008       4.2e-04  Fe I  E1          3d7.(4F).4p-3d6.4s.(4D).5s       y5Do-g5D   3 - 3  5.689e+06    30 33507.12 - 51770.55 061
     5563.5999       4.4e-04  Fe I  E1          3d7.(4F).4p-3d6.4s.(4D).5s       y5Do-g5D   2 - 3  4.246e+06    30 33801.57 - 51770.55 061
     5608.9745       4.5e-04  Fe I] E1 3d6.(5D).4s.4p.(3Po)-3d6.4s.(4D).5s       z3Po-g5D   2 - 3  7.114e+05    30 33946.93 - 51770.55 061
     5638.2621       4.5e-04  Fe I  E1          3d7.(4F).4p-3d6.4s.(4D).5s       y5Fo-g5D   4 - 3  5.243e+06    30 34039.51 - 51770.55 061
     5731.7619       4.6e-04  Fe I  E1          3d7.(4F).4p-3d6.4s.(4D).5s       y5Fo-g5D   3 - 3  2.203e+06    30 34328.75 - 51770.55 061
     5804.4637       4.8e-04  Fe I  E1          3d7.(4F).4p-3d6.4s.(4D).5s       y5Fo-g5D   2 - 3  3.109e+05    30 34547.21 - 51770.55 061
     6054.0734       5.2e-04  Fe I] E1          3d7.(4F).4p-3d6.4s.(4D).5s       z5Go-g5D   4 - 3  1.115e+05    30 35257.32 - 51770.55 061
     6627.5439       6.2e-04  Fe I] E1          3d7.(4F).4p-3d6.4s.(4D).5s       y3Fo-g5D   4 - 3  3.881e+05    30 36686.17 - 51770.55 061
     6663.2316       6.3e-04  Fe I  E1 3d6.(5D).4s.4p.(1Po)-3d6.4s.(4D).5s       y5Po-g5D   3 - 3  1.943e+06    30 36766.96 - 51770.55 061
     6841.3387       6.6e-04  Fe I  E1 3d6.(5D).4s.4p.(1Po)-3d6.4s.(4D).5s       y5Po-g5D   2 - 3  4.375e+06    30 37157.56 - 51770.55 061
     7353.5104       7.7e-04  Fe I] E1          3d7.(4F).4p-3d6.4s.(4D).5s       y3Do-g5D   3 - 3  2.748e+05    30 38175.35 - 51770.55 061
     8231.7457       9.6e-04  Fe I  E1 3d6.(5D).4s.4p.(1Po)-3d6.4s.(4D).5s       x5Do-g5D   4 - 3  3.162e+05    30 39625.80 - 51770.55 061
     8471.7429       1.0e-03  Fe I  E1 3d6.(5D).4s.4p.(1Po)-3d6.4s.(4D).5s       x5Do-g5D   3 - 3  1.306e+06    30 39969.85 - 51770.55 061
     8663.7166       1.1e-03  Fe I  E1 3d6.(5D).4s.4p.(1Po)-3d6.4s.(4D).5s       x5Do-g5D   2 - 3  5.646e+05    30 40231.33 - 51770.55 061
     8945.1893       1.1e-03  Fe I  E1 3d6.(5D).4s.4p.(1Po)-3d6.4s.(4D).5s       x5Fo-g5D   4 - 3  7.308e+06    30 40594.43 - 51770.55 061
     9147.9571       1.2e-03  Fe I  E1 3d6.(5D).4s.4p.(1Po)-3d6.4s.(4D).5s       x5Fo-g5D   3 - 3  1.741e+06    30 40842.15 - 51770.55 061
     9297.6063       1.2e-03  Fe I  E1 3d6.(5D).4s.4p.(1Po)-3d6.4s.(4D).5s       x5Fo-g5D   2 - 3  1.432e+05    30 41018.05 - 51770.55 061
#+end_example
***** Possible identifications of the 6xxx lines
- [2023-04-10 Mon] For some reason I have done most of the work on these so far
****** N I lines (5s 4P \to 3p 4Do) around H alpha (6629, 6637, 6646, 6656)
:PROPERTIES:
:ID:       6577FEB2-A7FF-4401-9FF3-9387BA7FF243
:END:
- We have a bunch of DRL at 6629, 6637, 6646, 6656, which have possible EMILI IDs of an N I multiplet
  - 
- 5s 4P \to 3p 4Do
#+begin_example
  Atomic Line List version: 3.00b4   Constructed: 2021-07-21 14:47 GMT
  Wavelength range: 0 - inf   Unit: Angstrom   Type: Air
  Radial velocity: 0 km/s
  Element/Spectrum: N  I

  -LAB-WAVL-ANG-AIR-|-DLAM--|SPC-|TT|---------CONFIGURATION---------|-TERM--|-J_i-J_k-|--A_ki---|-TPF-|LEVEL-ENERGY--CM^-1-|-REF---|
     6606.176        3.9e-03  N I E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 4Do-4P  3/2 - 5/2 8.871e+04     3 94793.49 - 109926.66 ASD
     6622.543        3.9e-03  N I E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 4Do-4P  5/2 - 5/2 7.924e+05     3 94830.89 - 109926.66 ASD
     6626.990        3.9e-03  N I E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 4Do-4P  1/2 - 3/2 2.197e+05     3 94770.88 - 109856.52 ASD
     6636.938        3.9e-03  N I E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 4Do-4P  3/2 - 3/2 1.400e+06     3 94793.49 - 109856.52 ASD
     6644.962        3.9e-03  N I E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 4Do-4P  7/2 - 5/2 3.486e+06     3 94881.82 - 109926.66 ASD
     6646.503        3.9e-03  N I E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 4Do-4P  1/2 - 1/2 2.178e+06     3 94770.88 - 109812.23 ASD
     6653.458        3.9e-03  N I E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 4Do-4P  5/2 - 3/2 2.735e+06     3 94830.89 - 109856.52 ASD
     6656.509        3.9e-03  N I E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 4Do-4P  3/2 - 1/2 2.168e+06     3 94793.49 - 109812.23 ASD

  gk*Aki weighted average wavelength:    6644.231       

#+end_example
******* Summary of logic
- Three arguments against these lines being N I 5s 4P \to 3p 4Do
  1. Pumping of 5s from ground state requires lambda < 912
  2. We should also see lines 5s 4P \to 3p 4Po and 5s 4P \to 3p 4So but we do not
  3. Every transition to 3p 4Do should also produce a 3p 4Do \to 3s 4P line, since this is the only even-parity quartet state of lower energy
- We can argue that 1 and 2 are not watertight
  1. Illumination by diffuse recombination radiation
  2. Terrestrial absorption gets in the way
- But 3 is more quantifiable
  - We need to measure the relative brightnesses
  - Compare the sum of the DRLs around 6650 to the N I multiplet at 8700
  - Convert to photons instead of energy, so multiply by respective wavelengths
|     Wave |   Zone 0 |     MYSO |
|----------+----------+----------|
|     6629 | 7.73e-04 |  1.44e-3 |
|     6637 | 7.32e-04 |  1.93e-3 |
|     6646 | 4.39e-04 |  2.49e-4 |
|     6656 | 3.72e-04 |  1.05e-4 |
|----------+----------+----------|
|  Sum DRL |  0.00232 |  0.00372 |
|----------+----------+----------|
|     8680 | 9.24e-05 | 5.99e-04 |
|     8703 | 1.96e-04 | 2.15e-03 |
|     8712 | 1.15e-04 | 2.87e-03 |
|     8719 | 2.60e-04 | 1.29e-03 |
|----------+----------+----------|
|   Sum V1 |  0.00066 |  0.00691 |
|----------+----------+----------|
| V1 / DRL |    0.372 |    2.430 |
#+TBLFM: @6$2..@6$3=vsum(@I..@II);f5::@11$2..@11$3=vsum(@III..@IIII);f5::@12$2..@12$3=8700 @11 / 6650 @6;f3
******* Citation for transition probabilities in N I
- Turns out that Froese-Fischer:2009a (that is cited in the Ferland::2012a N I paper) does not go as high as the 5s level, so that can not be the source of our transition probabilities
- And neither can Hibbert:1991a, since they do not go that high either
******* DONE Reanalysis of V1 / V20 test
CLOSED: [2023-05-19 Fri 12:15]
- I did this in the above table, but I want to get an error estimate for it, so I am going back to the individual yaml files to get the data
- We will use the ~Strength~, and ~Gauss_Fit.Amplitude~ values, with ~Sigma~ for the uncertainty
#+name: ni-versus-drl
|          | Zone 0          | Zone MYSO        |  Wav |
|----------+-----------------+------------------+------|
| DRL 66xx | 12.41 +/- 1.86  | 90.79 +/- 54.47  | 6640 |
| N I V1   | 3.56 +/- 1.78   | 168.14 +/- 16.81 | 8700 |
|----------+-----------------+------------------+------|
| V1 / DRL | 0.376 +/- 0.196 | 2.427 +/- 1.476  |      |
#+TBLFM: @2$2=remote(zone-0-DRL-66xx, @II$3) (1 +/- (0.01 remote(zone-0-DRL-66xx, @II$5)));f2::@2$3=remote(zone-MYSO-DRL-66xx, @II$3) (1 +/- (0.01 remote(zone-MYSO-DRL-66xx, @II$5)));f2::@3$2=remote(zone-0-NI-87xx, @II$3) (1 +/- (0.01 remote(zone-0-NI-87xx, @II$5)));f2::@3$3=remote(zone-MYSO-NI-87xx, @II$3) (1 +/- (0.01 remote(zone-MYSO-NI-87xx, @II$5)));f2::@4$2..@4$3=(@3 @3$4) / (@2 @2$4);f3

- Hurray! This result is almost identical to my earlier calculation, and now I have the uncertainties too
- This time I did it with raw intensities, instead of normalizing to H beta
- But if I *do* normalize to H beta, I can check the MYSO/0 value for these DRLs

| Zone   | 100 sum (DRL 66xx) / H beta |
|--------+-----------------------------|
| 0      | 0.24 +/- 0.04               |
| MYSO   | 0.39 +/- 0.23               |
|--------+-----------------------------|
| MYSO/0 | 1.63 +/- 1.00               |
#+TBLFM: @2$2=100 (remote(ni-versus-drl, @2$2)) / remote(zone-0-Hbeta, @2$2);f2::@3$2=100 (remote(ni-versus-drl, @2$3)) / remote(zone-MYSO-Hbeta, @2$2);f2::@4$2=@3/@2;f2

- So this does confirm the earlier estimates that MYSO/0 is of order 1 for these lines (much larger than for typical DRLs)
******** Zone 0


#+name: zone-0-DRL-66xx
|  DRL | Strength | G Strength |  Sigma | % Sig | % Dif |
|------+----------+------------+--------+-------+-------|
| 6629 |   3.6349 |     4.1484 | 1.0295 |  28.3 |  14.1 |
| 6637 |   3.5747 |     3.9239 | 0.4624 |  12.9 |   9.8 |
| 6646 |    2.271 |     2.3421 |  0.142 |   6.3 |   3.1 |
| 6656 |   1.9202 |      1.994 | 0.1532 |   8.0 |   3.8 |
|------+----------+------------+--------+-------+-------|
|      |          |      12.41 |        |    15 |    10 |
#+TBLFM: $5=100 $4/$2;f1::$6=100 abs($3-$2)/$2;f1::@6$3=vsum(@I..@II);f2::@6$5=15::@6$6=10

#+name: zone-0-Hbeta
| H beta |  Strength | G Strength |    Sigma | % Sig | % Dif |
|--------+-----------+------------+----------+-------+-------|
|   4861 | 5174.6966 |  5363.4732 | 192.4817 |   3.7 |   3.6 |
#+TBLFM: $5=100 $4/$2;f1::$6=100 abs($3-$2)/$2;f1

#+name: zone-0-NI-87xx
| N I V1 | Strength | G Strength |  Sigma | % Sig | % Dif |
|--------+----------+------------+--------+-------+-------|
|   8680 |   0.3197 |     0.4956 | 0.2593 |  81.1 |  55.0 |
|   8703 |   0.9116 |     1.0528 | 0.1734 |  19.0 |  15.5 |
|   8712 |   0.4784 |     0.6154 | 0.1814 |  37.9 |  28.6 |
|   8719 |   0.8601 |      1.395 | 0.6067 |  70.5 |  62.2 |
|--------+----------+------------+--------+-------+-------|
|        |          |       3.56 |        |    50 |    40 |
#+TBLFM: $5=100 $4/$2;f1::$6=100 abs($3-$2)/$2;f1::@6$3=vsum(@I..@II);f2::@6$5=15::@6$6=10


******** Zone MYSO
#+name: zone-MYSO-DRL-66xx
|  DRL | Strength | G Strength |   Sigma | % Sig | % Dif |
|------+----------+------------+---------+-------+-------|
| 6629 |  22.2545 |    35.1666 | 16.3897 |  73.6 |  58.0 |
| 6637 |  31.5175 |     47.301 | 18.0581 |  57.3 |  50.1 |
| 6646 |   5.8628 |     5.8627 |  0.2254 |   3.8 |  2e-3 |
| 6656 |   2.4612 |      2.461 |  0.5491 |  22.3 |  8e-3 |
|------+----------+------------+---------+-------+-------|
|      |          |      90.79 |         |    60 |    50 |
#+TBLFM: $5=100 $4/$2;f1::$6=100 abs($3-$2)/$2;f1::@6$3=vsum(@I..@II);f2::@6$5=60::@6$6=50

#+name: zone-MYSO-Hbeta
| H beta |  Strength | G Strength |    Sigma | % Sig | % Dif |
|--------+-----------+------------+----------+-------+-------|
|   4861 | 23531.115 | 24493.5804 | 964.0874 |   4.1 |   4.1 |
#+TBLFM: $5=100 $4/$2;f1::$6=100 abs($3-$2)/$2;f1

#+name: zone-MYSO-NI-87xx
| N I V1 | Strength | G Strength |  Sigma | % Sig | % Dif |
|--------+----------+------------+--------+-------+-------|
|   8680 |  14.0973 |     13.634 | 4.8458 |  34.4 |   3.3 |
|   8703 |  48.1393 |    52.6126 | 5.1697 |  10.7 |   9.3 |
|   8712 |  66.7244 |     70.265 | 3.7714 |   5.7 |   5.3 |
|   8719 |  29.8532 |    31.6259 | 1.8697 |   6.3 |   5.9 |
|--------+----------+------------+--------+-------+-------|
|        |          |     168.14 |        |    10 |     6 |
#+TBLFM: $5=100 $4/$2;f1::$6=100 abs($3-$2)/$2;f1::@6$3=vsum(@I..@II);f2::@6$5=15::@6$6=10
******* DONE Find the multiplet numbers for all these transitions
CLOSED: [2023-04-08 Sat 19:57]

******** UV pumping lines
- 5s level: UV 3.08 at 910 \AA
- 3d 4D: UV 3.06 at 952 \AA (forbidden)
- 3d 4P: UV 3.05 at 954 \AA
- 4s 4P: UV 3 at 964 \AA
******** Optical lines
- V1: 3p 4Do \to 3s 4P around 8700 \AA
  - Strong in MYSO
- V2: 3p 4Po \to 3s 4P around 8200 \AA
  - Strong in MYSO
- V3: 3p 4So \to 3s 4P around 7440 \AA
  - Strong in MYSO
- V20: 5s 4P \to 3p 4Do around 6650 \AA
  - This is the one with a possible ID as DRLs
- V8: 3p 2Po \to 3s 2P around 8600 \AA
  - We see a line at 8630, which might be one of these
  - But we do not see the others, so I am somewhat doubtful
  - These are from the doublet spectrum, but may be excited by the same pumping that gives the 5200 \AA lines
- V55: 5s 4P \to 3p 4Po around 6960 \AA
  - Not seen
  - From same upper level as V20
- V83: 5s 4P \to 3p 4So around 7600 \AA
  - Maybe 1/3 components seen
  - From same upper level as V20    
******** Infrared lines
- V17: 4s 4P \to 3p 4Do around 11,300 \AA
- V18.02: 3d 4P \to 3p 4Do around 10,000 \AA
******** Citation to Charlotte E. Moore (1975) multiplet table
Please convert the following citation of a technical report to bibtex format:

: Selected Tables of Atomic Spectra, Atomic Energy Levels and Multiplet Tables – N I, N II, N III,
: C. E. Moore,
: in Nat. Stand. Ref. Data Ser., NSRDS-NBS 3 (Sect. 5), 80 pp. (Nat. Bur. Stand., U.S., 1975)
: DOI:10.6028/NBS.NSRDS.3sec5
: (NIST compilation)

Here's the converted citation in BibTeX format:

#+begin_src 
@techreport{Moore:1975a,
  title={Selected Tables of Atomic Spectra, Atomic Energy Levels and Multiplet Tables--N I, N II, N III},
  author={Moore, C. E.},
  year={1975},
  institution={National Bureau of Standards},
  number={NSRDS-NBS 3 (Sect. 5)},
  pages={80},
  doi={10.6028/NBS.NSRDS.3sec5}
}
#+end_src
******* Check each member of the multiplet
|     wav0 | J_i  | J_k  |       A_ki | DRL ID  | g_k A_ki  / 1e6 | dwav/10 | Notes |
|----------+-----+-----+-----------+---------+---------------+---------+-------|
| 6606.176 | 3/2 | 5/2 | 8.871e+04 | No      |          0.53 |    0.00 |       |
| 6622.543 | 5/2 | 5/2 | 7.924e+05 | ?       |          4.75 |    1.64 |       |
| 6626.990 | 1/2 | 3/2 | 2.197e+05 | 6628.78 |          0.88 |    2.08 |       |
| 6636.938 | 3/2 | 3/2 | 1.400e+06 | 6636.76 |          5.60 |    3.08 |       |
| 6644.962 | 7/2 | 5/2 | 3.486e+06 | 6645.64 |         20.92 |    3.88 |       |
| 6646.503 | 1/2 | 1/2 | 2.178e+06 | blend   |          4.36 |    4.03 |       |
| 6653.458 | 5/2 | 3/2 | 2.735e+06 | blend   |         10.94 |    4.73 |       |
| 6656.509 | 3/2 | 1/2 | 2.168e+06 | 6655.89 |          4.34 |    5.03 |       |
#+TBLFM: $6=(2 $3 + 1) $4 / 1e6;f2::$7=($1 - @2$1)/10;f2

******* Other downward transitions from 5s
In principle, we would expect to see these too


******** All of the downward transitions from 5s

********* Branching ratios weighted by g_k
| Transition |     Wav | Br (J = 5/2) | Br (J = 3/2) | Br  (J = 1/2) | Average |
|------------+---------+--------------+--------------+---------------+---------|
| UV 3.08    |     910 |        0.735 |        0.738 |         0.740 |   0.737 |
| V 20       |    6650 |        0.089 |        0.090 |         0.090 |   0.090 |
| V 55       |    6960 |        0.055 |        0.054 |         0.054 |   0.055 |
| V 83       |    7600 |        0.014 |        0.014 |         0.013 |   0.014 |
| IR         | 3-4 mic |        0.107 |        0.104 |         0.102 |   0.105 |
#+TBLFM: $6=(6 $3 + 4 $4 + 2 $5) / (6 + 4 + 2);f3
- Conclusions: 
  - The UV lines are the dominant decay channel: 74%
  - The IR lines are the next most important: 10%
  - The V 20 line is the next most important: 9%
  - The V 55 line is the next most important: 5%
  - The V 83 line is the least important: 2%
********* J = 5/2
Branching ratio
| Transition |     Wav |         A |    Br |
|------------+---------+-----------+-------|
| UV 3.08    |     910 | 3.586e+07 | 0.735 |
| V 20       |    6650 | 4.367e+06 | 0.089 |
| V 55       |    6960 |   2.671e6 | 0.055 |
| V 83       |    7600 | 6.663e+05 | 0.014 |
| IR         | 3-4 mic |   5.234e6 | 0.107 |
|------------+---------+-----------+-------|
|            |         |    4.88e7 | 1.000 |
#+TBLFM: $4=$-1 / @II$-1;f3::@7$3=vsum(@I..@II);s3

UV transitions 
#+begin_example
-LAB-WAVL-ANG-VAC-|-DLAM--|-SPC-|TT|---------CONFIGURATION---------|-TERM--|-J_i-J_k-|--A_ki---|-TPF-|-LEVEL-ENERGY--CM^-1-|-REF---|
    909.69742      7.4e-05  N I  E1         2s2.2p3-2s2.2p2.(3P).5s 4So-4P  3/2 - 5/2 3.586e+07     3      0.00 - 109926.66 ASD
   1102.50913      1.1e-04  N I] E1         2s2.2p3-2s2.2p2.(3P).5s 2Do-4P  5/2 - 5/2                  19224.46 - 109926.66 ASD
   1102.61505      1.1e-04  N I] E1         2s2.2p3-2s2.2p2.(3P).5s 2Do-4P  3/2 - 5/2                  19233.18 - 109926.66 ASD
   1233.23791      1.4e-04  N I] E1         2s2.2p3-2s2.2p2.(3P).5s 2Po-4P  3/2 - 5/2                  28839.31 - 109926.66 ASD
#+end_example

Optical transitions
#+begin_example
-LAB-WAVL-ANG-AIR-|-DLAM--|-SPC-|TT|---------CONFIGURATION---------|-TERM--|-J_i-J_k-|--A_ki---|-TPF-|-LEVEL-ENERGY--CM^-1-|-REF---|
   6606.176        3.9e-03  N I  E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 4Do-4P  3/2 - 5/2 8.871e+04     3  94793.49 - 109926.66 ASD
   6622.543        3.9e-03  N I  E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 4Do-4P  5/2 - 5/2 7.924e+05     3  94830.89 - 109926.66 ASD
   6644.962        3.9e-03  N I  E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 4Do-4P  7/2 - 5/2 3.486e+06     3  94881.82 - 109926.66 ASD

   6926.670        4.3e-03  N I  E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 4Po-4P  3/2 - 5/2 8.058e+05     3  95493.69 - 109926.66 ASD
   6945.177        4.3e-03  N I  E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 4Po-4P  5/2 - 5/2 1.865e+06     3  95532.15 - 109926.66 ASD

   7587.571        5.1e-03  N I  E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 4So-4P  3/2 - 5/2 6.663e+05     3  96750.84 - 109926.66 ASD

   7608.846        5.2e-03  N I] E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 2Do-4P  3/2 - 5/2                  96787.68 - 109926.66 ASD
   7653.331        5.2e-03  N I] E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 2Do-4P  5/2 - 5/2                  96864.05 - 109926.66 ASD
   8247.999        6.1e-03  N I] E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 2Po-4P  3/2 - 5/2                  97805.84 - 109926.66 ASD
#+end_example

Infrared transitions
#+begin_example
-LAB-WAVL-ANG-AIR-|-DLAM--|-SPC-|TT|---------CONFIGURATION---------|-TERM--|-J_i-J_k-|--A_ki---|-TPF-|-LEVEL-ENERGY--CM^-1-|-REF---|
  31754.27         9.0e-02  N I  E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 4Do-4P  3/2 - 5/2 5.884e+04     3 106778.34 - 109926.66 ASD
  32122.83         9.2e-02  N I  E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 4Do-4P  5/2 - 5/2 5.115e+05     3 106814.46 - 109926.66 ASD
  32691.92         9.5e-02  N I  E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 4Do-4P  7/2 - 5/2 2.157e+06     3 106868.63 - 109926.66 ASD
  34113.06         1.0e-01  N I  E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 4Po-4P  3/2 - 5/2 6.990e+05     3 106996.03 - 109926.66 ASD
  34597.53         1.1e-01  N I  E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 4Po-4P  5/2 - 5/2 1.563e+06     3 107037.07 - 109926.66 ASD
  36434.90         1.2e-01  N I] E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 2Do-4P  3/2 - 5/2                 107182.79 - 109926.66 ASD
  37393.18         1.2e-01  N I] E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 2Do-4P  5/2 - 5/2                 107253.11 - 109926.66 ASD
  40294.71         1.4e-01  N I  E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 4So-4P  3/2 - 5/2 2.448e+05     3 107445.62 - 109926.66 ASD
  43497.08         1.7e-01  N I] E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 2Po-4P  3/2 - 5/2                 107628.28 - 109926.66 ASD
#+end_example

********* J = 3/2
Branching ratio
| Transition |     Wav |         A |    Br |
|------------+---------+-----------+-------|
| UV 3.08    |     910 | 3.579e+07 | 0.738 |
| V 20       |    6650 | 4.355e+06 | 0.090 |
| V 55       |    6960 | 2.642e+06 | 0.054 |
| V 83       |    7600 | 6.557e+05 | 0.014 |
| IR         | 3-4 mic | 5.057e+06 | 0.104 |
|------------+---------+-----------+-------|
|            |         |    4.85e7 | 1.000 |
#+TBLFM: $4=$-1 / @II$-1;f3::@7$3=vsum(@I..@II);s3


UV
#+begin_example
-LAB-WAVL-ANG-VAC-|-DLAM--|-SPC-|TT|---------CONFIGURATION---------|-TERM--|-J_i-J_k-|--A_ki---|-TPF-|-LEVEL-ENERGY--CM^-1-|-REF---|
    910.27824      7.4e-05  N I  E1         2s2.2p3-2s2.2p2.(3P).5s 4So-4P  3/2 - 3/2 3.579e+07     3      0.00 - 109856.52 ASD
   1103.36237      1.1e-04  N I] E1         2s2.2p3-2s2.2p2.(3P).5s 2Do-4P  5/2 - 3/2                  19224.46 - 109856.52 ASD
   1103.46845      1.1e-04  N I] E1         2s2.2p3-2s2.2p2.(3P).5s 2Do-4P  3/2 - 3/2                  19233.18 - 109856.52 ASD
   1234.29971      1.4e-04  N I] E1         2s2.2p3-2s2.2p2.(3P).5s 2Po-4P  1/2 - 3/2                  28838.92 - 109856.52 ASD
   1234.30559      1.4e-04  N I] E1         2s2.2p3-2s2.2p2.(3P).5s 2Po-4P  3/2 - 3/2                  28839.31 - 109856.52 ASD
#+end_example

Optical/IR  
#+begin_example
-LAB-WAVL-ANG-AIR-|-DLAM--|-SPC-|TT|---------CONFIGURATION---------|-TERM--|-J_i-J_k-|--A_ki---|-TPF-|-LEVEL-ENERGY--CM^-1-|-REF---|
   6142.705        3.4e-03  N I] E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 2So-4P  1/2 - 3/2                  93581.55 - 109856.52 ASD
   
   6626.990        3.9e-03  N I  E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 4Do-4P  1/2 - 3/2 2.197e+05     3  94770.88 - 109856.52 ASD
   6636.938        3.9e-03  N I  E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 4Do-4P  3/2 - 3/2 1.400e+06     3  94793.49 - 109856.52 ASD
   6653.458        3.9e-03  N I  E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 4Do-4P  5/2 - 3/2 2.735e+06     3  94830.89 - 109856.52 ASD
   
   6951.600        4.3e-03  N I  E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 4Po-4P  1/2 - 3/2 1.107e+06     3  95475.31 - 109856.52 ASD
   6960.496        4.3e-03  N I  E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 4Po-4P  3/2 - 3/2 3.529e+05     3  95493.69 - 109856.52 ASD
   6979.185        4.3e-03  N I  E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 4Po-4P  5/2 - 3/2 1.182e+06     3  95532.15 - 109856.52 ASD
   
   7628.180        5.2e-03  N I  E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 4So-4P  3/2 - 3/2 6.557e+05     3  96750.84 - 109856.52 ASD
   
   7649.683        5.2e-03  N I] E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 2Do-4P  3/2 - 3/2                  96787.68 - 109856.52 ASD
   7694.648        5.3e-03  N I] E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 2Do-4P  5/2 - 3/2                  96864.05 - 109856.52 ASD
   8271.530        6.1e-03  N I] E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 2Po-4P  1/2 - 3/2                  97770.18 - 109856.52 ASD
   8296.007        6.1e-03  N I] E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 2Po-4P  3/2 - 3/2                  97805.84 - 109856.52 ASD
  #+end_example

  IR
#+begin_example
-LAB-WAVL-ANG-AIR-|-DLAM--|-SPC-|TT|---------CONFIGURATION---------|-TERM--|-J_i-J_k-|--A_ki---|-TPF-|-LEVEL-ENERGY--CM^-1-|-REF---|
  29588.94         7.8e-02  N I] E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 2So-4P  1/2 - 3/2                 106477.80 - 109856.52 ASD
  32272.29         9.3e-02  N I  E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 4Do-4P  1/2 - 3/2 1.401e+05     3 106758.73 - 109856.52 ASD
  32477.84         9.4e-02  N I  E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 4Do-4P  3/2 - 3/2 8.799e+05     3 106778.34 - 109856.52 ASD
  32863.49         9.6e-02  N I  E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 4Do-4P  5/2 - 3/2 1.672e+06     3 106814.46 - 109856.52 ASD
  34760.55         1.1e-01  N I  E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 4Po-4P  1/2 - 3/2 9.176e+05     3 106980.48 - 109856.52 ASD
  34949.54         1.1e-01  N I  E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 4Po-4P  3/2 - 3/2 2.889e+05     3 106996.03 - 109856.52 ASD
  35458.23         1.1e-01  N I  E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 4Po-4P  5/2 - 3/2 9.337e+05     3 107037.07 - 109856.52 ASD
  37390.71         1.2e-01  N I] E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 2Do-4P  3/2 - 3/2                 107182.79 - 109856.52 ASD
  38400.63         1.3e-01  N I] E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 2Do-4P  5/2 - 3/2                 107253.11 - 109856.52 ASD
  41467.01         1.5e-01  N I  E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 4So-4P  3/2 - 3/2 2.246e+05     3 107445.62 - 109856.52 ASD
  44078.70         1.7e-01  N I] E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 2Po-4P  1/2 - 3/2                 107588.47 - 109856.52 ASD
  44866.30         1.8e-01  N I] E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 2Po-4P  3/2 - 3/2                 107628.28 - 109856.52 ASD
  #+end_example

********* J = 1/2
Branching ratio
| Transition |     Wav |         A |    Br |
|------------+---------+-----------+-------|
| UV 3.08    |     910 | 3.575e+07 | 0.740 |
| V 20       |    6650 |   4.346e6 | 0.090 |
| V 55       |    6960 |   2.624e6 | 0.054 |
| V 83       |    7600 | 6.491e+05 | 0.013 |
| IR         | 3-4 mic |   4.944e6 | 0.102 |
|------------+---------+-----------+-------|
|            |         |    4.83e7 | 1.000 |
#+TBLFM: $4=$-1 / @II$-1;f3::@7$3=vsum(@I..@II);s3

UV
#+begin_example
-LAB-WAVL-ANG-VAC-|-DLAM--|-SPC-|TT|---------CONFIGURATION---------|-TERM--|-J_i-J_k-|--A_ki---|-TPF-|-LEVEL-ENERGY--CM^-1-|-REF---|
    910.64536      7.4e-05  N I  E1         2s2.2p3-2s2.2p2.(3P).5s 4So-4P  3/2 - 1/2 3.575e+07     3      0.00 - 109812.23 ASD
   1104.00797      1.1e-04  N I] E1         2s2.2p3-2s2.2p2.(3P).5s 2Do-4P  3/2 - 1/2                  19233.18 - 109812.23 ASD
   1234.97479      1.4e-04  N I] E1         2s2.2p3-2s2.2p2.(3P).5s 2Po-4P  1/2 - 1/2                  28838.92 - 109812.23 ASD
   1234.98067      1.4e-04  N I] E1         2s2.2p3-2s2.2p2.(3P).5s 2Po-4P  3/2 - 1/2                  28839.31 - 109812.23 ASD
#+end_example

Optical
#+begin_example
-LAB-WAVL-ANG-AIR-|-DLAM--|-SPC-|TT|---------CONFIGURATION---------|-TERM--|-J_i-J_k-|--A_ki---|-TPF-|-LEVEL-ENERGY--CM^-1-|-REF---|
   6159.466        3.4e-03  N I] E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 2So-4P  1/2 - 1/2                  93581.55 - 109812.23 ASD

   6646.503        3.9e-03  N I  E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 4Do-4P  1/2 - 1/2 2.178e+06     3  94770.88 - 109812.23 ASD
   6656.509        3.9e-03  N I  E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 4Do-4P  3/2 - 1/2 2.168e+06     3  94793.49 - 109812.23 ASD

   6973.074        4.3e-03  N I  E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 4Po-4P  1/2 - 1/2 4.388e+05     3  95475.31 - 109812.23 ASD
   6982.025        4.3e-03  N I  E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 4Po-4P  3/2 - 1/2 2.185e+06     3  95493.69 - 109812.23 ASD

   7654.044        5.2e-03  N I  E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 4So-4P  3/2 - 1/2 6.491e+05     3  96750.84 - 109812.23 ASD

   7675.694        5.3e-03  N I] E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 2Do-4P  3/2 - 1/2                  96787.68 - 109812.23 ASD

   8301.950        6.1e-03  N I] E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 2Po-4P  1/2 - 1/2                  97770.18 - 109812.23 ASD
   8326.608        6.2e-03  N I] E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 2Po-4P  3/2 - 1/2                  97805.84 - 109812.23 ASD
#+end_example

IR
#+begin_example
-LAB-WAVL-ANG-AIR-|-DLAM--|-SPC-|TT|---------CONFIGURATION---------|-TERM--|-J_i-J_k-|--A_ki---|-TPF-|-LEVEL-ENERGY--CM^-1-|-REF---|
  29981.93         8.0e-02  N I] E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 2So-4P  1/2 - 1/2                 106477.80 - 109812.23 ASD
  32740.35         9.6e-02  N I  E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 4Do-4P  1/2 - 1/2 1.342e+06     3 106758.73 - 109812.23 ASD
  32951.93         9.7e-02  N I  E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 4Do-4P  3/2 - 1/2 1.316e+06     3 106778.34 - 109812.23 ASD
  35304.19         1.1e-01  N I  E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 4Po-4P  1/2 - 1/2 3.504e+05     3 106980.48 - 109812.23 ASD
  35499.15         1.1e-01  N I  E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 4Po-4P  3/2 - 1/2 1.723e+06     3 106996.03 - 109812.23 ASD
  38020.47         1.3e-01  N I] E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 2Do-4P  3/2 - 1/2                 107182.79 - 109812.23 ASD
  42243.00         1.6e-01  N I  E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 4So-4P  3/2 - 1/2 2.125e+05     3 107445.62 - 109812.23 ASD
  44956.54         1.8e-01  N I] E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 2Po-4P  1/2 - 1/2                 107588.47 - 109812.23 ASD
  45776.11         1.9e-01  N I] E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 2Po-4P  3/2 - 1/2                 107628.28 - 109812.23 ASD
#+end_example


******** 5s 4P \to 3p 4Po NOT SEEN
- We see nothing at all in this wavelength range
- It is quite messy with telluric absorption and sky lines, so this is not necessarily conclusive
#+begin_example
-LAB-WAVL-ANG-AIR-|-DLAM--|SPC-|TT|---------CONFIGURATION---------|-TERM--|-J_i-J_k-|--A_ki---|-TPF-|LEVEL-ENERGY--CM^-1-|-REF---|
   6926.670        4.3e-03  N I E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 4Po-4P  3/2 - 5/2 8.058e+05     3 95493.69 - 109926.66 ASD
   6945.177        4.3e-03  N I E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 4Po-4P  5/2 - 5/2 1.865e+06     3 95532.15 - 109926.66 ASD
   6951.600        4.3e-03  N I E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 4Po-4P  1/2 - 3/2 1.107e+06     3 95475.31 - 109856.52 ASD
   6960.496        4.3e-03  N I E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 4Po-4P  3/2 - 3/2 3.529e+05     3 95493.69 - 109856.52 ASD
   6973.074        4.3e-03  N I E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 4Po-4P  1/2 - 1/2 4.388e+05     3 95475.31 - 109812.23 ASD
   6979.185        4.3e-03  N I E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 4Po-4P  5/2 - 3/2 1.182e+06     3 95532.15 - 109856.52 ASD
   6982.025        4.3e-03  N I E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 4Po-4P  3/2 - 1/2 2.185e+06     3 95493.69 - 109812.23 ASD

gk*Aki weighted average wavelength:    6954.815
#+end_example

******** 5s 4P \to 3p 4So SEEN ONE OF THREE MAYBE?
- We have a DRL at 7628.73 ± 0.23 that could possibly be 7628.180 at a stretch. But no other lines
- This is in the middle of a telluric band, so it is hard to see
#+begin_example
-LAB-WAVL-ANG-AIR-|-DLAM--|SPC-|TT|---------CONFIGURATION---------|-TERM--|-J_i-J_k-|--A_ki---|-TPF-|LEVEL-ENERGY--CM^-1-|-REF---|
   7587.571        5.1e-03  N I E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 4So-4P  3/2 - 5/2 6.663e+05     3 96750.84 - 109926.66 ASD
   7628.180        5.2e-03  N I E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 4So-4P  3/2 - 3/2 6.557e+05     3 96750.84 - 109856.52 ASD
   7654.044        5.2e-03  N I E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).5s 4So-4P  3/2 - 1/2 6.491e+05     3 96750.84 - 109812.23 ASD

gk*Aki weighted average wavelength:    7611.919       
#+end_example
     
******** DONE Infrared 5s \to 4p lines
CLOSED: [2023-05-12 Fri 10:43]
- These are at 3 to 4 microns
- The first one 3.26 micron is the strongest, with branching ratio of about 30% as opposed to 40% for the optical line
- [X] Then there would be more downward transitions from 4p that we should look into
  - NO, cannot be bothered


#+begin_example
-LAB-WAVL-ANG-AIR-|-DLAM--|SPC-|TT|---------CONFIGURATION---------|-TERM--|-J_i-J_k-|--A_ki---|-TPF-|-LEVEL-ENERGY--CM^-1-|-REF---|
  31754.27         9.0e-02  N I E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 4Do-4P  3/2 - 5/2 5.884e+04     3 106778.34 - 109926.66 ASD
  32122.83         9.2e-02  N I E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 4Do-4P  5/2 - 5/2 5.115e+05     3 106814.46 - 109926.66 ASD
  32272.29         9.3e-02  N I E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 4Do-4P  1/2 - 3/2 1.401e+05     3 106758.73 - 109856.52 ASD
  32477.84         9.4e-02  N I E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 4Do-4P  3/2 - 3/2 8.799e+05     3 106778.34 - 109856.52 ASD
  32691.92         9.5e-02  N I E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 4Do-4P  7/2 - 5/2 2.157e+06     3 106868.63 - 109926.66 ASD
  32740.35         9.6e-02  N I E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 4Do-4P  1/2 - 1/2 1.342e+06     3 106758.73 - 109812.23 ASD
  32863.49         9.6e-02  N I E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 4Do-4P  5/2 - 3/2 1.672e+06     3 106814.46 - 109856.52 ASD
  32951.93         9.7e-02  N I E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 4Do-4P  3/2 - 1/2 1.316e+06     3 106778.34 - 109812.23 ASD

gk*Aki weighted average wavelength:   32657.88        
#+end_example

#+begin_example
-LAB-WAVL-ANG-AIR-|-DLAM--|SPC-|TT|---------CONFIGURATION---------|-TERM--|-J_i-J_k-|--A_ki---|-TPF-|-LEVEL-ENERGY--CM^-1-|-REF---|
  34113.06         1.0e-01  N I E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 4Po-4P  3/2 - 5/2 6.990e+05     3 106996.03 - 109926.66 ASD
  34597.53         1.1e-01  N I E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 4Po-4P  5/2 - 5/2 1.563e+06     3 107037.07 - 109926.66 ASD
  34760.55         1.1e-01  N I E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 4Po-4P  1/2 - 3/2 9.176e+05     3 106980.48 - 109856.52 ASD
  34949.54         1.1e-01  N I E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 4Po-4P  3/2 - 3/2 2.889e+05     3 106996.03 - 109856.52 ASD
  35304.19         1.1e-01  N I E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 4Po-4P  1/2 - 1/2 3.504e+05     3 106980.48 - 109812.23 ASD
  35458.23         1.1e-01  N I E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 4Po-4P  5/2 - 3/2 9.337e+05     3 107037.07 - 109856.52 ASD
  35499.15         1.1e-01  N I E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 4Po-4P  3/2 - 1/2 1.723e+06     3 106996.03 - 109812.23 ASD

gk*Aki weighted average wavelength:   34817.82        
#+end_example

#+begin_example
-LAB-WAVL-ANG-AIR-|-DLAM--|SPC-|TT|---------CONFIGURATION---------|-TERM--|-J_i-J_k-|--A_ki---|-TPF-|-LEVEL-ENERGY--CM^-1-|-REF---|
  40294.71         1.4e-01  N I E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 4So-4P  3/2 - 5/2 2.448e+05     3 107445.62 - 109926.66 ASD
  41467.01         1.5e-01  N I E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 4So-4P  3/2 - 3/2 2.246e+05     3 107445.62 - 109856.52 ASD
  42243.00         1.6e-01  N I E1 2s2.2p2.(3P).4p-2s2.2p2.(3P).5s 4So-4P  3/2 - 1/2 2.125e+05     3 107445.62 - 109812.23 ASD

gk*Aki weighted average wavelength:   40968.43     
#+end_example

******** Intercombination lines
There are more transitions to the doublet series, but these have small transition probabilities
******* Pumping UV lines from ground to the upper 5s level
- Note that the upper level is more than 1 Rydberg above ground level, so if they are pumped then the pumping line can be absorbed by neutral hydrogen
  - 909.697, 910.278, 910.645 Angstrom (lambda vac)
  - On the other hand, it is only *just* above the threshold, so the line could be pumped by diffuse recombination radiation in a
    gas shielded from direct irradiation
  - This is getting a bit contrived
  - So the perfect scenario for this would be gas that is shielded from the stellar EUV, but is illuminated by diffuse recombination EUV
    - Photons between 853 and 912 Angstrom can ionize H but not N, so in this scenario we would still have neutral N
- These are the pumping lines
#+begin_example
  -LAB-WAVL-ANG-VAC-|-DLAM--|SPC-|TT|---------CONFIGURATION---------|-TERM--|-J_i-J_k-|--A_ki---|-TPF-|--LVL-EN--CM-1--|-REF---|
      909.69742      7.4e-05  N I E1         2s2.2p3-2s2.2p2.(3P).5s 4So-4P  3/2 - 5/2 3.586e+07     3 0.00 - 109926.66 ASD
      910.27824      7.4e-05  N I E1         2s2.2p3-2s2.2p2.(3P).5s 4So-4P  3/2 - 3/2 3.579e+07     3 0.00 - 109856.52 ASD
      910.64536      7.4e-05  N I E1         2s2.2p3-2s2.2p2.(3P).5s 4So-4P  3/2 - 1/2 3.575e+07     3 0.00 - 109812.23 ASD
#+end_example
******* Cascade down from lower 3p 4Do level
:PROPERTIES:
:ID:       B45C9645-CEBB-4066-BD62-753E650085B5
:END:
First the optical lines, which are 3p \to 3s
#+begin_example
  Atomic Line List version: 3.00b4   Constructed: 2021-07-21 14:47 GMT
  Request: 1

  Wavelength range: 4500 - 9500   Unit: Angstrom   Type: Air
  Radial velocity: 0 km/s
  Wavelength accuracy upper limit: 5%
  Element/Spectrum: N  I
  Minimum line strength: no restrictions
  Include lines without atomic data: true
  Minimum abundance: no minimum
  Lower level energy range: no restrictions   Unit: cm^-1
  Upper level energy range: 94770 - 94900
  Maximum for principal quantum number n: no restrictions
  Transition types included: all
  Transitions from auto-ionizing levels: included

  -LAB-WAVL-ANG-AIR-|-DLAM--|SPC-|TT|---------CONFIGURATION---------|-TERM--|-J_i-J_k-|--A_ki---|-TPF-|LEVEL-ENERGY--CM^-1|-REF---|
     8680.282        6.7e-03  N I E1 2s2.2p2.(3P).3s-2s2.2p2.(3P).3p  4P-4Do 5/2 - 7/2 2.531e+07    15 83364.62 - 94881.82 ASD
     8683.403        6.7e-03  N I E1 2s2.2p2.(3P).3s-2s2.2p2.(3P).3p  4P-4Do 3/2 - 5/2 1.881e+07    15 83317.83 - 94830.89 ASD
     8686.149        6.7e-03  N I E1 2s2.2p2.(3P).3s-2s2.2p2.(3P).3p  4P-4Do 1/2 - 3/2 1.152e+07    15 83284.07 - 94793.49 ASD
     8703.247        6.8e-03  N I E1 2s2.2p2.(3P).3s-2s2.2p2.(3P).3p  4P-4Do 1/2 - 1/2 2.161e+07    15 83284.07 - 94770.88 ASD
     8711.703        6.8e-03  N I E1 2s2.2p2.(3P).3s-2s2.2p2.(3P).3p  4P-4Do 3/2 - 3/2 1.288e+07    15 83317.83 - 94793.49 ASD
     8718.837        6.8e-03  N I E1 2s2.2p2.(3P).3s-2s2.2p2.(3P).3p  4P-4Do 5/2 - 5/2 6.546e+06    15 83364.62 - 94830.89 ASD
     8728.901        6.8e-03  N I E1 2s2.2p2.(3P).3s-2s2.2p2.(3P).3p  4P-4Do 3/2 - 1/2 3.761e+06    15 83317.83 - 94770.88 ASD
     8747.369        6.8e-03  N I E1 2s2.2p2.(3P).3s-2s2.2p2.(3P).3p  4P-4Do 5/2 - 3/2 9.662e+05    15 83364.62 - 94793.49 ASD
#+end_example
These are the same lines that we mark on Figure 5 and which are relatively strong in MYSO, but they are absent (or at least, much reduced) in zone 0. 

There are additional lines farther to the infrared (note that these are vacuum waves)
#+begin_example
  -LAB-WAVL-ANG-VAC-|-DLAM--|-SPC-|TT|---------CONFIGURATION---------|-TERM--|-J_i-J_k-|--A_ki---|-TPF-|LEVEL-ENERGY--CM^-1|-REF---|
    11552.493        1.2e-02  N I] E1 2s2.2p2.(3P).3s-2s2.2p2.(3P).3p  2P-4Do 1/2 - 3/2 5.280e+01    15 86137.35 - 94793.49 ASD
    11582.748        1.2e-02  N I] E1 2s2.2p2.(3P).3s-2s2.2p2.(3P).3p  2P-4Do 1/2 - 1/2 2.894e+01    15 86137.35 - 94770.88 ASD
    11613.889        1.2e-02  N I] E1 2s2.2p2.(3P).3s-2s2.2p2.(3P).3p  2P-4Do 3/2 - 5/2 1.813e+02    15 86220.51 - 94830.89 ASD
    11664.555        1.2e-02  N I] E1 2s2.2p2.(3P).3s-2s2.2p2.(3P).3p  2P-4Do 3/2 - 3/2 1.968e+02    15 86220.51 - 94793.49 ASD
    11695.400        1.2e-02  N I] E1 2s2.2p2.(3P).3s-2s2.2p2.(3P).3p  2P-4Do 3/2 - 1/2 3.396e+02    15 86220.51 - 94770.88 ASD
    14761.106        1.9e-02  N I  E1          2s.2p4-2s2.2p2.(3P).3p  4P-4Do 5/2 - 7/2 1.061e+06    15 88107.26 - 94881.82 ASD
    14872.918        2.0e-02  N I  E1          2s.2p4-2s2.2p2.(3P).3p  4P-4Do 5/2 - 5/2 2.827e+05    15 88107.26 - 94830.89 ASD
    14956.111        2.0e-02  N I  E1          2s.2p4-2s2.2p2.(3P).3p  4P-4Do 5/2 - 3/2 4.319e+04    15 88107.26 - 94793.49 ASD
    14970.687        2.0e-02  N I  E1          2s.2p4-2s2.2p2.(3P).3p  4P-4Do 3/2 - 5/2 7.064e+05    15 88151.17 - 94830.89 ASD
    15054.981        2.0e-02  N I  E1          2s.2p4-2s2.2p2.(3P).3p  4P-4Do 3/2 - 3/2 4.933e+05    15 88151.17 - 94793.49 ASD
    15099.080        2.0e-02  N I  E1          2s.2p4-2s2.2p2.(3P).3p  4P-4Do 1/2 - 3/2 4.073e+05    15 88170.57 - 94793.49 ASD
    15106.402        2.0e-02  N I  E1          2s.2p4-2s2.2p2.(3P).3p  4P-4Do 3/2 - 1/2 1.464e+05    15 88151.17 - 94770.88 ASD
    15150.804        2.0e-02  N I  E1          2s.2p4-2s2.2p2.(3P).3p  4P-4Do 1/2 - 1/2 7.728e+05    15 88170.57 - 94770.88 ASD
#+end_example
- The permitted ones of these are to the core-excited level 2s^2 2p^2 3p \to 2s 2p^4
- But total branching ratio for these looks like it is only about 5%
******* Fluorescence of the 4s level instead
- This would be easier since the UV line is longward of Lyman limit
******** Pumping from ground up to 4s
#+begin_example
-LAB-WAVL-ANG-VAC-|-DLAM--|SPC-|TT|---------CONFIGURATION---------|-TERM--|-J_i-J_k-|--A_ki---|-TPF-|--LVL-EN--CM-1--|-REF---|
    963.9903       5.9e-04  N I E1         2s2.2p3-2s2.2p2.(3P).4s 4So-4P  3/2 - 5/2 5.940e+07    15 0.00 - 103735.48 ASD
    964.6256       5.9e-04  N I E1         2s2.2p3-2s2.2p2.(3P).4s 4So-4P  3/2 - 3/2 5.661e+07    15 0.00 - 103667.16 ASD
    965.0413       5.9e-04  N I E1         2s2.2p3-2s2.2p2.(3P).4s 4So-4P  3/2 - 1/2 5.524e+07    15 0.00 - 103622.51 ASD

gk*Aki weighted average wavelength:     964.3653      
#+end_example
******** Transitions down from 4s \to 3p
- These are the only possibilities
- The transitions to quartets will dominate over the intercombination lines
********* 4s 4P \to 3p 4Do at 1.13 micron
#+begin_example
-LAB-WAVL-ANG-AIR-|-DLAM--|SPC-|TT|---------CONFIGURATION---------|-TERM--|-J_i-J_k-|--A_ki---|-TPF-|LEVEL-ENERGY--CM^-1-|-REF---|
  11180.13         7.9e-02  N I E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).4s 4Do-4P  3/2 - 5/2 2.207e+05    15 94793.49 - 103735.48 ASD
  11227.09         8.0e-02  N I E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).4s 4Do-4P  5/2 - 5/2 2.302e+06    15 94830.89 - 103735.48 ASD
  11237.58         8.0e-02  N I E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).4s 4Do-4P  1/2 - 3/2 6.640e+05    15 94770.88 - 103667.16 ASD
  11266.21         8.0e-02  N I E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).4s 4Do-4P  3/2 - 3/2 4.574e+06    15 94793.49 - 103667.16 ASD
  11291.67         8.1e-02  N I E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).4s 4Do-4P  7/2 - 5/2 1.196e+07    15 94881.82 - 103735.48 ASD
  11294.26         8.1e-02  N I E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).4s 4Do-4P  1/2 - 1/2 7.686e+06    15 94770.88 - 103622.51 ASD
  11313.89         8.1e-02  N I E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).4s 4Do-4P  5/2 - 3/2 1.002e+07    15 94830.89 - 103667.16 ASD
  11323.18         8.1e-02  N I E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).4s 4Do-4P  3/2 - 1/2 8.190e+06    15 94793.49 - 103622.51 ASD

gk*Aki weighted average wavelength:   11290.54    
#+end_example

********* 4s 4P \to 3p 4Po at 1.22 micron
#+begin_example
LAB-WAVL-ANG-AIR-|-DLAM--|SPC-|TT|---------CONFIGURATION---------|-TERM--|-J_i-J_k-|--A_ki---|-TPF-|LEVEL-ENERGY--CM^-1-|-REF---|
  12129.97         9.3e-02  N I E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).4s 4Po-4P  3/2 - 5/2 3.056e+06    15 95493.69 - 103735.48 ASD
  12186.84         9.4e-02  N I E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).4s 4Po-4P  5/2 - 5/2 7.401e+06    15 95532.15 - 103735.48 ASD
  12203.92         9.4e-02  N I E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).4s 4Po-4P  1/2 - 3/2 4.233e+06    15 95475.31 - 103667.16 ASD
  12231.36         9.5e-02  N I E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).4s 4Po-4P  3/2 - 3/2 1.582e+06    15 95493.69 - 103667.16 ASD
  12270.80         9.5e-02  N I E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).4s 4Po-4P  1/2 - 1/2 1.484e+06    15 95475.31 - 103622.51 ASD
  12289.19         9.6e-02  N I E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).4s 4Po-4P  5/2 - 3/2 3.908e+06    15 95532.15 - 103667.16 ASD
  12298.54         9.6e-02  N I E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).4s 4Po-4P  3/2 - 1/2 7.700e+06    15 95493.69 - 103622.51 ASD

gk*Aki weighted average wavelength:   12212.65        
#+end_example

********* 4s 4P \to 3p 4So at 1.44 micron
#+begin_example
-LAB-WAVL-ANG-AIR-|-DLAM--|SPC-|TT|---------CONFIGURATION---------|-TERM--|-J_i-J_k-|--A_ki---|-TPF-|LEVEL-ENERGY--CM^-1-|-REF---|
  14313.22         1.3e-01  N I E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).4s 4So-4P  3/2 - 5/2 1.199e+06    15 96750.84 - 103735.48 ASD
  14454.60         1.3e-01  N I E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).4s 4So-4P  3/2 - 3/2 1.079e+06    15 96750.84 - 103667.16 ASD
  14548.53         1.3e-01  N I E1 2s2.2p2.(3P).3p-2s2.2p2.(3P).4s 4So-4P  3/2 - 1/2 1.015e+06    15 96750.84 - 103622.51 ASD

gk*Aki weighted average wavelength:   14393.57        
#+end_example

******** Further cascade down from 3p
- These mostly go to 3s

********* 3p 4So \to 3s 4P at 7423.6, 7442.3, 7468.3
- We see these in an [[file:../data/n346-lines/spec1d-c007-chop-mean-7370-7760.pdf][in-the-gaps spectrum]], which maybe we should add to paper

#+begin_example
-LAB-WAVL-ANG-AIR-|-DLAM--|SPC-|TT|---------CONFIGURATION---------|-TERM--|-J_i-J_k-|--A_ki---|-TPF-|LEVEL-ENERGY--CM^-1|-REF---|
   7423.641        4.9e-03  N I E1 2s2.2p2.(3P).3s-2s2.2p2.(3P).3p  4P-4So 1/2 - 3/2 5.649e+06    15 83284.07 - 96750.84 ASD
   7442.298        4.9e-03  N I E1 2s2.2p2.(3P).3s-2s2.2p2.(3P).3p  4P-4So 3/2 - 3/2 1.196e+07    15 83317.83 - 96750.84 ASD
   7468.312        5.0e-03  N I E1 2s2.2p2.(3P).3s-2s2.2p2.(3P).3p  4P-4So 5/2 - 3/2 1.961e+07    15 83364.62 - 96750.84 ASD

gk*Aki weighted average wavelength:    7453.173       
#+end_example
********* 3p 4Po \to 3s 4P around 8200 Angstrom
- We see all these lines in Fig C4
- Strongest in MYSO, but weakly in I and 0
#+begin_example
-LAB-WAVL-ANG-AIR-|-DLAM--|SPC-|TT|---------CONFIGURATION---------|-TERM--|-J_i-J_k-|--A_ki---|-TPF-|LEVEL-ENERGY--CM^-1|-REF---|
   8184.861        6.0e-03  N I E1 2s2.2p2.(3P).3s-2s2.2p2.(3P).3p  4P-4Po 3/2 - 5/2 8.220e+06    15 83317.83 - 95532.15 ASD
   8188.012        6.0e-03  N I E1 2s2.2p2.(3P).3s-2s2.2p2.(3P).3p  4P-4Po 1/2 - 3/2 1.253e+07    15 83284.07 - 95493.69 ASD
   8200.357        6.0e-03  N I E1 2s2.2p2.(3P).3s-2s2.2p2.(3P).3p  4P-4Po 1/2 - 1/2 4.684e+06    15 83284.07 - 95475.31 ASD
   8210.715        6.0e-03  N I E1 2s2.2p2.(3P).3s-2s2.2p2.(3P).3p  4P-4Po 3/2 - 3/2 5.233e+06    15 83317.83 - 95493.69 ASD
   8216.336        6.0e-03  N I E1 2s2.2p2.(3P).3s-2s2.2p2.(3P).3p  4P-4Po 5/2 - 5/2 2.263e+07    15 83364.62 - 95532.15 ASD
   8223.128        6.0e-03  N I E1 2s2.2p2.(3P).3s-2s2.2p2.(3P).3p  4P-4Po 3/2 - 1/2 2.619e+07    15 83317.83 - 95475.31 ASD
   8242.389        6.1e-03  N I E1 2s2.2p2.(3P).3s-2s2.2p2.(3P).3p  4P-4Po 5/2 - 3/2 1.312e+07    15 83364.62 - 95493.69 ASD

gk*Aki weighted average wavelength:    8212.242  
#+end_example
********* 3p 4Do \to 3s 4P
- We already discussed these in [[id:B45C9645-CEBB-4066-BD62-753E650085B5][Cascade down from lower 3p 4Do level]]
- But included again here for completeness
#+begin_example
-LAB-WAVL-ANG-AIR-|-DLAM--|SPC-|TT|---------CONFIGURATION---------|-TERM--|-J_i-J_k-|--A_ki---|-TPF-|LEVEL-ENERGY--CM^-1|-REF---|
   8680.282        6.7e-03  N I E1 2s2.2p2.(3P).3s-2s2.2p2.(3P).3p  4P-4Do 5/2 - 7/2 2.531e+07    15 83364.62 - 94881.82 ASD
   8683.403        6.7e-03  N I E1 2s2.2p2.(3P).3s-2s2.2p2.(3P).3p  4P-4Do 3/2 - 5/2 1.881e+07    15 83317.83 - 94830.89 ASD
   8686.149        6.7e-03  N I E1 2s2.2p2.(3P).3s-2s2.2p2.(3P).3p  4P-4Do 1/2 - 3/2 1.152e+07    15 83284.07 - 94793.49 ASD
   8703.247        6.8e-03  N I E1 2s2.2p2.(3P).3s-2s2.2p2.(3P).3p  4P-4Do 1/2 - 1/2 2.161e+07    15 83284.07 - 94770.88 ASD
   8711.703        6.8e-03  N I E1 2s2.2p2.(3P).3s-2s2.2p2.(3P).3p  4P-4Do 3/2 - 3/2 1.288e+07    15 83317.83 - 94793.49 ASD
   8718.837        6.8e-03  N I E1 2s2.2p2.(3P).3s-2s2.2p2.(3P).3p  4P-4Do 5/2 - 5/2 6.546e+06    15 83364.62 - 94830.89 ASD
   8728.901        6.8e-03  N I E1 2s2.2p2.(3P).3s-2s2.2p2.(3P).3p  4P-4Do 3/2 - 1/2 3.761e+06    15 83317.83 - 94770.88 ASD
   8747.369        6.8e-03  N I E1 2s2.2p2.(3P).3s-2s2.2p2.(3P).3p  4P-4Do 5/2 - 3/2 9.662e+05    15 83364.62 - 94793.49 ASD

gk*Aki weighted average wavelength:    8690.884       
#+end_example
****** 
****** Other N I lines
:PROPERTIES:
:ID:       63777288-9EC5-4E56-AC58-BFEB9E542B18
:END:
- The observed DRL at 9029.2 is close to the N I 9028.922 line
- This is one of the lines mentioned in the N I pumping paper as being excited by the same fluorescent mechanism as 5199
  - See Table 9 of Ferland:2012a
  - It is in the Doublet system
****** O I lines around 9264
- We have a DRL at 9264.4 +/- 0.8
- There is a whole multiplet of O I lines from 9261 to 9266
- But these should be recombination according to Sharpee:2004a, similar to O I 7772, which we do detect
  - But mainly from the higher ionization zones, which is rather odd
****** Fe I lines (5F \to y5Go) also around H alpha (6502.311, 6616.703, 6699.640)
- 6502.311, 6616.703, 6699.640 all come from same multiplet
  - Zone 0: 5.5e-4, 3.4e-4, 1.0e-4
  - Zone MYSO: 1.7e-4, 1.4e-4, 6.7e-5
  - Observed waves: 6501.74 ± 0.55, 6615.00 ± 0.56, 6699.27 ± 0.57, 
- Data from AtLL 3
  : -LAB-WAVL-ANG-AIR-|-SPC-|TT|--TERM---|J_i-J_k|--A_ki---|-TPF-|LEVEL-ENERGY--CM^-1|-REF---|
  :  * 6502.3111        Fe I E1 y5Go-5F    3 - 2  1.309e+03    30 43137.48 - 58512.38 061
  :    6533.1344        Fe I E1 y5Go-5F    2 - 2  2.212e+01    30 43210.02 - 58512.38 061
  :  * 6574.1217        Fe I E1 y5Go-5F    5 - 4  2.382e+03    30 42911.91 - 58118.87 061
  :  * 6597.3578        Fe I E1 y5Go-5F    2 - 1  8.067e+03    30 43210.02 - 58363.42 061
  :  * 6616.7027        Fe I E1 y5Go-5F    4 - 3  5.199e+03    30 43022.98 - 58132.08 061
  :    6622.4911        Fe I E1 y5Go-5F    4 - 4  3.986e+00    30 43022.98 - 58118.87 061
  :    6667.2297        Fe I E1 y5Go-5F    3 - 3  5.635e+02    30 43137.48 - 58132.08 061
  :    6673.1069        Fe I E1 y5Go-5F    3 - 4  1.796e+00    30 43137.48 - 58118.87 061
  :    6699.6402        Fe I E1 y5Go-5F    2 - 3  1.040e+01    30 43210.02 - 58132.08 061
  :  * 6720.1109        Fe I E1 y5Go-5F    6 - 5  1.201e+04    30 42784.35 - 57660.95 061
  :    6778.2338        Fe I E1 y5Go-5F    5 - 5  3.179e+02    30 42911.91 - 57660.95 061
  :    6829.6651        Fe I E1 y5Go-5F    4 - 5  9.277e-02    30 43022.98 - 57660.95 061
- So there are a few things to check with this identification
  1. [ ] Where are the missing members of the multiplet?
  2. [ ] Do the relative intensities pan out?
     - 6699.640 and 6616.703 come from exactly the same upper level (J = 3), so the relative intensity should just be the ratio of the Einstein A values, which are 10.4 and 52,000, so an enormous disparity
     - So one would expect 6699.640 to be much weaker than 6616.703
     - Observed
  3. What about wavelength matching
     - 6615.00 ± 0.56 is more than 3 sigma away from 6616.703
****** Fe II lines
- Emili's best match for 6655.9 and 6699.3 are Fe II] lines of the same multiplet
  - Fe II] 6655.996 and 6699.615
  - Here is the whole multiplet from AtLL 3
    : -LAB-WAVL-ANG-AIR-|--SPC--|TT|--TERM---|-J_i-J_k-|LEVEL-ENERGY--CM^-1|-REF---|
    :    6655.9844        Fe II] E1  a2F-z6Fo 7/2 - 5/2 27314.92 - 42334.84 094
    :    6699.6024        Fe II] E1  a2F-z6Fo 7/2 - 7/2 27314.92 - 42237.06 094
    :    6754.9289        Fe II] E1  a2F-z6Fo 7/2 - 9/2 27314.92 - 42114.84 094
    :    6763.6135        Fe II] E1  a2F-z6Fo 5/2 - 3/2 27620.40 - 42401.32 094
    :    6794.1696        Fe II] E1  a2F-z6Fo 5/2 - 5/2 27620.40 - 42334.84 094
    :    6839.6236        Fe II] E1  a2F-z6Fo 5/2 - 7/2 27620.40 - 42237.06 094
  - The predicted doublet intensity ratio is about 1, consistent with observed value
  - But there are problems with this interpretation
    - For a start, we are missing some members of the multiplet
      - 6754.9289 is not seen at all, and it is a very clean part of the spectrum
      - 6763.6135 might have something very weak in Zone 0
      - 6794.1696 has nothing, also clean
      - 6839.6236 is in gap between figures
    - In general the Fe II lines are much stronger in MYSO than filaments, but these lines are the opposite:
      - Zone 0: 3.7E-04 (1.6E-05), 3.4E-04 (1.6E-05)
      - Zone MYSO: 1.0E-04 (7.9E-04), 1.4E-04 (8.0E-04)
      - This is observed intensity (fraction of H beta) for 6655.996, 6699.615 with predicted values in parentheses. Predictions for MYSO are without depletion, whereas for Zone 0 are for depletion of factor 50. *But note that I still have not put in SMC abundances*
      - So the absolute values are in the right ball park, assuming an intermediate level of depletion, but this would require 3 to 4 times less depletion in Zone 0 than MYSO, all else being equal, which is hard to reconcile with the other Fe II lines that are detected
    - For instance for the z4Do-c4D Fe II lines
      : Atomic Line List version: 3.00b4   Constructed: 2021-07-21 14:47 GMT
      : Wavelength range: 0 - inf   Unit: Angstrom   Type: Air
      : Radial velocity: 0 km/s
      : Element/Spectrum: Fe II
      : 
      : -LAB-WAVL-ANG-AIR-|-SPC--|TT|--TERM---|-J_i-J_k-|LEVEL-ENERGY--CM^-1|-REF---|
      :    6248.9067        Fe II E1 z4Do-c4D  7/2 - 5/2 44446.91 - 60445.28 094
      :    6317.9889        Fe II E1 z4Do-c4D  7/2 - 7/2 44446.91 - 60270.35 094
      :    6383.7302        Fe II E1 z4Do-c4D  5/2 - 5/2 44784.79 - 60445.28 094
      :    6385.4578        Fe II E1 z4Do-c4D  5/2 - 3/2 44784.79 - 60441.04 094
      :    6455.8427        Fe II E1 z4Do-c4D  5/2 - 7/2 44784.79 - 60270.35 094
      :    6491.2544        Fe II E1 z4Do-c4D  3/2 - 5/2 45044.19 - 60445.28 094
      :    6493.0407        Fe II E1 z4Do-c4D  3/2 - 3/2 45044.19 - 60441.04 094
      :    6517.0293        Fe II E1 z4Do-c4D  3/2 - 1/2 45044.19 - 60384.37 094
      :    6562.2051        Fe II E1 z4Do-c4D  1/2 - 3/2 45206.47 - 60441.04 094
      :    6586.7085        Fe II E1 z4Do-c4D  1/2 - 1/2 45206.47 - 60384.37 094
      - Seven of these are detected in mYSO, but not all show up in our list. The remaining ones are hidden by Ha and [N II]
      - For instance 6517.0293
        - Zone 0: not detected
        - Zone MYSO: 1.3E-03 (4.5E-03)
      - Or 6248.9067
        - Zone 0: 2.1E-04 (8.9E-05)
        - Zone MYSO: 5.3E-04 (4.4E-03)
      - Or 6317.9889
        - Zone 0: not detected
        - Zone MYSO: 1.1E-03 (4.5E-03)
      - Or 6455.8427 
        - Zone 0: not detected
        - Zone MYSO: 9.4e-4 (??)
      - Or 6383.7302 + 6385.4578 blend
        - Zone 0: not detected
        - Zone MYSO: 3.0E-04 (4.4E-03)
      - Or 6491.2544
        - Zone 0: not detected (would be blended with UIL)
        - Zone MYSO: 2.3E-04 (4.4E-03)
****** Si I lines
**** [5/5] Steps to run EMILI on our lines
***** DONE Write our line list in a format that EMILI can use
CLOSED: [2023-03-13 Mon 21:40]
- Format of [[id:0F83FBDC-6894-4B22-8F1A-8FFFD35A8BF6][Input Line List]]
- We already have the data we need in the zone-XX-velocities.csv files
  - Which we wrote out here: [[id:F75E4620-F16F-4F6F-932D-4BB897436B0C][Write file for each zone with table of velocities]]
- So we will just transform those files


#+begin_src python :eval no :tangle ../scripts/write-emili-inputs.py
  from pathlib import Path
  import pandas as pd
  import numpy as np
  import yaml
  import typer
  import sys
  from textwrap import dedent

  MATCH_LINES = {
      71: ("He  II", 4685.68),
      114: ("[Ar IV]", 4740.17),
      328: ("[O  III]", 5006.84),
      737: ("[Cl III]", 5517.71),
      1023: ("He  I", 5875.62),
      1363: ("[O  I]", 6300.30),
      1372: ("[S  III]", 6312.06),
      1573: ("H   I", 6562.79),
      1590: ("[N  II]", 6583.45),
      2032: ("[Ar III]", 7135.78),
      2524: ("[Ar III]", 7751.10),
      3306: ("[C  I]", 8727.13),
      3579: ("[S  III]", 9068.90),
  }

  # Estimated ionization fractions for the different levels
  ICF = {
      "zone-0": "0.01 0.5 0.5 1e-4 1e-10",
      "zone-I": "0.001 0.5 0.5 1e-4 1e-10",
      "zone-II": "0.01 0.5 0.5 1e-4 1e-10",
      "zone-III": "0.001 0.5 0.5 1e-4 1e-10",
      "zone-IV": "0.0001 0.5 0.5 0.002 2e-6",
      "zone-MYSO": "0.01 0.5 0.5 1e-4 1e-10",
      "zone-S": "0.01 0.5 0.5 1e-4 1e-10",
  }
  def main(
          id_label: str,
          species_file: str="species.yaml",
          zone_file: str="zones.yaml",
          v_sys: float=171.1,
          d_v_sys: float=2.7,
  ):
      """Write input files for EMILI"""

      # Load the species and line type database
      with open(species_file) as f: 
          info = yaml.safe_load(f)
      # Load the zone database
      with open(zone_file) as f:
          zones = yaml.safe_load(f)

      for zone in zones:
          prefix = f"all-lines-{id_label}/{zone['label']}"
          oprefix = f"emili/{zone['label']}"
          # Read file and drop rows with no observed wavelength
          df = pd.read_csv(
              f"{prefix}-velocities.csv"
          ).set_index("Index").dropna(subset="wave")
          # Make sure that wavelength error is not below 0.3 Angstrom
          e_wave = np.hypot(0.3, df.e_wave)
          # Select the columns we want and in the order we want
          dff = df[["wave"]].assign(
              ewm=-e_wave,
              ewp=e_wave,
              flux=df.flux / 100.0,
              fwhm=3e5 * df.d_wave / df.wave,
              sn=df.s_n,
              label=df.ID,
          )
          # Write to fixed width columns file .in
          with open(f"{oprefix}-emi.in", "w") as f:
              np.savetxt(
                  f,
                  dff.values,
                  fmt="%7.2f %5.2f %5.2f %10.2e %6.2f %9.2f %20s",
              )
          # And write out the match lines to .match too
          with open(f"{oprefix}-emi.match", "w") as f:
              for idx, (ion, wave0) in MATCH_LINES.items():
                  try:
                      f.write(
                          f"{df.loc[idx].wave:.2f} {wave0:.2f} {ion:10s} {df.loc[idx].flux / 100:.2e}\n"
                      )
                  except KeyError:
                      ...

          # And finally write out the .cmd file
          with open(f"{oprefix}-emi.cmd", "w") as f:
              zlabel = zone["label"]
              f.write(
                  dedent(
                      f"""\
                      A abun_smc.dat
                      M {zlabel}-emi.match
                      O {zlabel}-emi.out
                      D {zlabel}-emi.dat
                      T 10000
                      N 100
                      I 100
                      L {zlabel}-emi.in
                      Z COMMENT vel 171 171 171 171 171
                      vel+
                      icf {ICF[zlabel]}
                      """
                  )
              )
              if "YSO" not in zlabel:
                  f.write(
                      "\n".join([f"deplete {element} 10"
                                 for element in ["Fe", "Ni", "Si", "Ca", "Mg", "Ti", "Al"]])
                  )

  if __name__ == "__main__":
      typer.run(main)

#+end_src


 #+begin_src sh :dir ../data/n346-lines :results output verbatim
  python ../../scripts/write-emili-inputs.py c007-chop-mean
#+end_src

#+RESULTS:


***** DONE Choose lines for the ~.match~ file
CLOSED: [2023-03-13 Mon 21:40]
- We will use the following lines to give a spread of ionizations
  - He II 4685.68
  - [Ar IV] 4740.17
  - [O III] 5006.84
  - He I 5875.62
  - [N II] 6583.45
  - [C I] 8727.13
- This is now handled in the same script as above
***** DONE Specify the abundances
CLOSED: [2023-04-04 Tue 22:18]
- Just to get things started, I have copied the file from the EMILI distribution


#+begin_src sh :dir ../data/n346-lines/emili :results output verbatim
  pwd
  for f in abun ion multi; do
      cp -fv ~/Dropbox/EMILI/$f.dat .
  done
#+end_src

#+RESULTS:
: /Users/will/Dropbox/muse-hii-regions/data/n346-lines/emili
: /Users/will/Dropbox/EMILI/abun.dat -> ./abun.dat
: /Users/will/Dropbox/EMILI/ion.dat -> ./ion.dat
: /Users/will/Dropbox/EMILI/multi.dat -> ./multi.dat

I have fixed up a mistake in abundance file: changed second S to Sr
****** Create an SMC abundance file
- Use the abundances from NGC 346 from Valerdi et al 2019
- And for all other elements, use 0.3 times solar

#+name: valerdi-abundances
| He | 10.916 |
| N  |   6.61 |
| O  |   8.19 |
| Ne |   7.48 |
| S  |   6.44 |
| Ar |   5.82 |
| Cl |   5.47 |

#+header: :var TAB=valerdi-abundances
#+begin_src python :results none :dir ../data/n346-lines/emili
  import numpy as np

  # Get the small number of measured abundances
  valdict = dict(TAB)

  # Get the default Galactic abundances
  ism_dict = dict(np.loadtxt('abun.dat', comments='!', dtype=str))

  smc_dict = {
      # Take the measured value if it exists
      k: 10**(valdict[k] - 12) if k in valdict
      # otherwise use 0.3 times the ISM value
      else 0.3 * float(ism_dict[k])
      for k in ism_dict
  }
  # Fix up hydrogen
  smc_dict['H'] = 1.0

  with open('abun_smc.dat', 'w') as f:
      f.write('! 100 10000\n')
      for k, v in smc_dict.items():
          f.write(f"{k:3s} {v:9.2E}\n")

#+end_src

Compare the two abundance sets to check they are sensible. Note that ~diff~ writes to ~stderr~ not ~stdout~ so we need to redirect it
#+header: :prologue "exec 2>&1" :epilogue ":"
#+begin_src sh :dir ../data/n346-lines/emili
  diff --side-by-side -w --width 40 --ignore-case abun.dat abun_smc.dat
#+end_src

#+RESULTS:
#+begin_example
! 100 10000		! 100 10000
H  0.10E+01	   |    H    1.00E+00
He 0.98E-01	   |    He   8.24E-02
Li 0.14E-10	   |    Li   4.20E-12
Be 0.14E-10	   |    Be   4.20E-12
B  0.40E-09	   |    B    1.20E-10
C  0.36E-03	   |    C    1.08E-04
N  0.11E-03	   |    N    4.07E-06
O  0.85E-03	   |    O    1.55E-04
F  0.36E-07	   |    F    1.08E-08
Ne 0.12E-03	   |    Ne   3.02E-05
Na 0.21E-05	   |    Na   6.30E-07
Mg 0.38E-04	   |    Mg   1.14E-05
Al 0.30E-05	   |    Al   9.00E-07
Si 0.35E-04	   |    Si   1.05E-05
P  0.28E-06	   |    P    8.40E-08
S  0.16E-04	   |    S    2.75E-06
Cl 0.32E-06	   |    Cl   2.95E-07
Ar 0.36E-05	   |    Ar   6.61E-07
K  0.13E-06	   |    K    3.90E-08
Ca 0.23E-05	   |    Ca   6.90E-07
Sc 0.13E-08	   |    Sc   3.90E-10
Ti 0.98E-07	   |    Ti   2.94E-08
V  0.10E-07	   |    V    3.00E-09
Cr 0.47E-06	   |    Cr   1.41E-07
Mn 0.20E-06	   |    Mn   6.00E-08
Fe 0.35E-04	   |    Fe   1.05E-05
Co 0.83E-07	   |    Co   2.49E-08
Ni 0.18E-05	   |    Ni   5.40E-07
Cu 0.16E-07	   |    Cu   4.80E-09
Zn 0.40E-07	   |    Zn   1.20E-08
Ga 0.76E-09	   |    Ga   2.28E-10
Ge 0.26E-08	   |    Ge   7.80E-10
Rb 0.40E-09	   |    Rb   1.20E-10
Sr 0.79E-09	   |    Sr   2.37E-10
Y  0.17E-09	   |    Y    5.10E-11
Zr 0.40E-09	   |    Zr   1.20E-10
Nb 0.26E-10	   |    Nb   7.80E-12
Mo 0.83E-10	   |    Mo   2.49E-11
Ru 0.69E-10	   |    Ru   2.07E-11
Rh 0.13E-10	   |    Rh   3.90E-12
Pd 0.49E-10	   |    Pd   1.47E-11
Ag 0.87E-11	   |    Ag   2.61E-12
Cd 0.72E-10	   |    Cd   2.16E-11
In 0.46E-10	   |    In   1.38E-11
Sn 0.10E-09	   |    Sn   3.00E-11
Sb 0.10E-10	   |    Sb   3.00E-12
Ba 0.13E-09	   |    Ba   3.90E-11
Pt 0.63E-10	   |    Pt   1.89E-11
Au 0.10E-10	   |    Au   3.00E-12
Pb 0.71E-10	   |    Pb   2.13E-11
#+end_example

***** DONE Setup the ~.cmd~ file
CLOSED: [2023-04-05 Wed 21:02]
- This is also now done in the above script
- [X] I have added an SMC abundance file
- [X] I am going to try and specify the ICF by hand


****** Deciding on the ICF factors
- EMILI uses the following ionization bands
  1. 0-13.6
     - Mg I], Na I, [S I], [C I], Ca II
  2. 13.6-24.7
     - H I
  3. 24.7-54.5
     - He I
  4. 54.5-100.0
     - He II
  5. 100+
     - [Fe X], [Ne V], [Fe VII], [Ar X]
- It works out ICF factors for each of these bands, according to equations (1) to (4) in Sharpee:2003a
  - However, there seems to be an error in eq (2): the Y factor must divide, not multiply
  - There is also the problem that H I and He I overlap almost completely for this nebula, so it does not make much sense to use these lines
- Still, I will do the calculations by hand, based on the lines that we have


| Zone | He I 5876 | He II 4686 | [C I] 8727 |    x1 | x3/x2 | x4/x3 |
|------+-----------+------------+------------+-------+-------+-------|
| 0    |  1.24e-01 |          0 |   2.65e-03 |  0.01 | 1.053 | 0.000 |
| I    |  1.16e-01 |          0 |          0 | 0.001 | 0.985 | 0.000 |
| II   |  1.30e-01 |          0 |   4.17e-04 |  0.01 | 1.104 | 0.000 |
| III  |  1.32e-01 |          0 |   6.32e-05 | 0.001 | 1.121 | 0.000 |
| IV   |  1.15e-01 |   2.31e-03 |          0 |   0.0 | 0.977 | 0.002 |
| MYSO |  7.98e-02 |          0 |   2.95e-03 |  0.01 | 0.678 | 0.000 |
| S    |  8.96e-02 |          0 |   6.21e-04 |  0.01 | 0.761 | 0.000 |
#+TBLFM: $6=0.7 $2 / 0.0824;f3::$7=0.11 $3 / $2;f3

- According to the Sharpee equations, the ICF factors (which add up to 1 by definition) are roughly
  - x1 = 0.0 to 0.01
  - x2 = 0.5
  - x3 = 0.5
  - x4 = 0 to 0.002
  - x5 = 0.001, which is minimum
- However, I would prefer to set a smaller x5 since we see zero evidence of any such lines
  - For Zone IV we can use x5/x4 = 1e-4 and for all other zones 1e-6
- So, I will set these all by hand in the ~.cmd~ file
  - When I ran it by hand, it did correctly assign x1 for Zone 0, but it failed to assign x4 for Zone IV because it thought that C IV was a better ID for the 4686 line
- In summary
  - Sharpee level 1 corresponds to our Zone 0
  - Sharpee levels 2 and 3 both correspond to our Zone III
  - Sharpee level 4 corresponds to our Zone IV approximately
  - Sharpee level 5 we do not see at all
  - There are no Sharpee levels corresponding to our Zones I, and II
    - Although II will be a small part of Level 2
***** DONE Run EMILI and look at the output
CLOSED: [2023-04-05 Wed 21:05]
Run commands like this in a terminal
#+begin_src sh :dir ../data/n346-lines/emili :eval no
time ./em4 zone-0-emi.cmd
#+end_src
and hit RETURN a few times to get the prompt back

- [X] I have run EMILI on all the zones
- [X] I have looked at the output
  

**** Specifications of the input files for EMILI
These are all taken from the manual
***** Input Line List
:PROPERTIES:
:ID:       0F83FBDC-6894-4B22-8F1A-8FFFD35A8BF6
:END:
: This is a list of unidentified lines that the user wants to
: identify. These lines must have observed wavelengths between
: 3000-11000Ä, the range of a typical optical echelle spectrum.  The
: user specifies the observed wavelength in Ä, the measurement/systemic
: error on either side of the o.served value, also in À, the flux of the
: line with respect to HB, the FWHM in km/s, and the signal-to-noise of
: the line. Currently the final two parameters, FWHM and signal to
: noise, are not employed directly by the EMILI code, and are simply
: propagated into the output to give the user full knowledge of each
: line the code identifies. Placeholder numeric values can be employed
: for these parameters.
: 
: Users submit a line list in the form of an ASCII text table, with the
: information specified above for each particular unidentified line
: comprising an individual line in the table, ended with a carriage
: return. Information is read in FORTRAN free format, with blank space
: separating each individual element on the line. Each element in the
: line is a FORTRAN "REAL" variable. The code currently accepts up to
: 1500 unidentified lines. No blank lines should be left at the end of
: the table, and no special indicators need be included to signify the
: end of the file. The Input Line List is read in by a statement in the
: main routine: em4.f.  An example of a segment of an Input Line List is
: given in Figure (from the file ic418.in included with the
: distribution).

Columns:

1. Observed wavelength in \AA
2. The measurement/systemic error on either side of the observed value, also in \AA
3. CONTINUATION of 2, but on the positive side
4. The flux of the line with respect to HB
5. The FWHM in km/s
6. And the signal-to-noise of the line

But only the first four are actually used. The FWHM and s/n are carried through to output, but not used by the code. 

Sample from ~ic418.in~ in the distribution:
:  3512.51  -0.05   0.05    1.36e-03   22.90       37.60   4.09  Real     
:  3530.50  -0.05   0.05    2.00e-03   24.60    99990.00   4.09  Real     
:  3554.42  -0.05   0.05    2.34e-03   23.10      127.50   4.09  Real     
:  3560.62  -0.06   0.06    6.50e-05   20.30        7.30   5.12  Real     
:  3562.93  -0.06   0.06    1.82e-04   20.70       11.50   5.12  Real     
:  3574.78  -0.06   0.06    4.68e-05   13.50        7.20   5.12  Real?
Note that this has some additional columns, which are presumably also ignored
***** Matched Line List
This is optional

: If included, the Matched Line List must take the form of an ASCII
: table, with the information about each specified line comprising one
: line of the table, individual values separated by blank space, and
: ended by a carriage return. While read in with the FORTRAN free format
: the information on each matched line comprising a line in the list
: must satisfy the following convention in the following order:
: 
: - observed wavelength: A FORTRAN "REAL" variable, read in free format.
: 
: - laboratory wavelength: Also a FORTRAN "REAL" variable, read in free
:   format.
: 
: - the element notation: This is a three place character variable:
:   FORTRAN "CHARAC- TER*3". If the line is a forbidden line, the first
:   character must include the "[" symbol.  Non-forbidden lines or
:   intercombination lines must start with the elemental notation.  If
:   the notation doesn't reach three characters the remaining space
:   should be filled with blank spaces.
: 
: - a single blank space between arguments.
: 
: - the ion notation: This is six place character variable: FORTRAN
:   "CHARACTER*6".  The particular ion must be specified in Roman
:   numeral format, with the standard astronomical convention (i.e. Na I
:   is neutral sodium, Na II is first ionized sodium etc...).  If the
:   line is an intercombination of forbidden line, the next character
:   immediately after the end of the Roman numeral specification must be
:   the "]" character. If the entire If information comprises less than
:   six characters, blank spaces should be used to fill out the
:   remaining places.
: 
: - the flux with respect to HB: A FORTRAN "REAL" variable, read in free
:   format.

It might be better to just copy the sample file and make a few changes.

: 5006.845  5006.843 [O  III]  2.15e+00
: 6583.467  6583.450 [N  II]   1.63e+00
: 3726.035  3726.032 [O  II]   1.24e+00
: 4958.915  4958.911 [O  III]  7.27e-01
: 6548.088  6548.050 [N  II]   5.36e-01
: ...
: 4921.933  4921.931 He  I     1.22e-02 
: 5889.960  5889.951 Na  I     7.93e-04
: 4571.161  4571.096 Mg  I]    4.29e-03

Note that the element and ion columns have very precise requirements.

We probably only want to put a few lines in here, but have them be a good spread of the different ionization zones. 
***** Abundance table
- We could grab the SMC abundances from Cloudy
- Only uses Z < 30 but that is fine for us

Sample: 
: ! 100 10000
: H  0.10E+01
: He 0.98E-01
: Li 0.14E-10
: Be 0.14E-10
: B  0.40E-09
: C  0.36E-03
: N  0.11E-03
: O  0.85E-03
: F  0.36E-07






